parameter,temperature,token_limit,prompt,response
limit,0.2,256,"
Analyze the provided API parameter description, and extract any example values for the parameter mentioned in the description. 
Then, generate a few additional example values that correspond to, or are in the same category as the provided values.
If there are no example values provided, simply generate values corresponding to the description, and always generate values when possible.  
If generating example values is not possible, return None. Consider the following cases: 

Case 1: The description contains example values USA, CAN, ZWE: Output: ""PROVIDED: USA, CAN, ZWE +++ GENERATED: BRA, FRA, GER ...""
Case 2: The description does not explicitly mention example values: Output: ""PROVIDED: None +++ GENERATED: BRA, FRA, GER, USA ...""
Case 3: The description does not explicitly mention example values, and it is not possible to generate example values: Output: ""None""

Assume any ""
"" values in the input represent spaces or new lines. Do not output any ""
"" strings.

Here are some examples of inputs and expected outputs:
Input:'The country code associated with the country. Examples are CAD, USD, etc...'
Output:PROVIDED: CAD, USD +++ GENERATED: AFG, ALA, ALB, DZA, ASM, AND, AGO, AIA, ATA, ATG, ARG, ARM, ABW, AUS, AUT, AZE, BHS, BHR, BGD, BRB, BLR, BEL, 
BLZ, BEN, BMU, BTN, BOL, BES, BIH, BWA, BVT, BRA, IOT, BRN, BGR, BFA, BDI, CPV, KHM, CMR, CAN, CYM, CAF, TCD, 
CHL, CHN, CXR, CCK, COL, COM, COG, COD, COK, CRI, CIV, HRV, CUB, CUW, CYP, CZE, DNK, DJI, DMA, DOM, ECU, EGY, 
SLV, GNQ, ERI, EST, SWZ, ETH, FLK, FRO, FJI, FIN, FRA, GUF, PYF, ATF, GAB, GMB, GEO, DEU, GHA, GIB, GRC, GRL, 
GRD, GLP, GUM, GTM, GGY, GIN, GNB, GUY, HTI, HMD, VAT, HND, HKG, HUN, ISL, IND, IDN, IRN, IRQ, IRL, IMN, ISR, 
ITA, JAM, JPN, JEY, JOR, KAZ, KEN, KIR, PRK, KOR, KWT, KGZ, LAO, LVA, LBN, LSO, LBR, LBY, LIE, LTU, LUX, MAC, 
MDG, MWI, MYS, MDV, MLI, MLT, MHL, MTQ, MRT, MUS, MYT, MEX, FSM, MDA, MCO, MNG, MNE, MSR, MAR, MOZ, MMR, NAM, 
NRU, NPL, NLD, NCL, NZL, NIC, NER, NGA, NIU, NFK, MKD, MNP, NOR, OMN, PAK, PLW, PSE, PAN, PNG, PRY, PER, PHL, 
PCN, POL, PRT, PRI, QAT, REU, ROU, RUS, RWA, BLM, SHN, KNA, LCA, MAF, SPM, VCT, WSM, SMR, STP, SAU, SEN, SRB, 
SYC, SLE, SGP, SXM, SVK, SVN, SLB, SOM, ZAF, SGS, SSD, ESP, LKA, SDN, SUR, SJM, SWE, CHE, SYR, TWN, TJK, TZA, 
THA, TLS, TGO, TKL, TON, TTO, TUN, TUR, TKM, TCA, TUV, UGA, UKR, ARE, GBR, USA, UMI, URY, UZB, VUT, VEN, VNM, 
VGB, VIR, WLF, ESH, YEM, ZMB, ZWE
Input:'The numbers for the percent grades must be to one decimal place (such as 10.6).'
Output:PROVIDED: 10.6 +++ GENERATED: 0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0, 2.1, 
2.2, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8, 2.9, 3.0, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6, 3.7, 3.8, 3.9, 4.0, 4.1, 4.2, 4.3, 4.4, 
4.5, 4.6, 4.7, 4.8, 4.9, 5.0, 5.1, 5.2, 5.3, 10.0, 99.9, 100.0
Input:'The title of the book to be rated.'
Output:PROVIDED: None +++ GENERATED: To Kill a Mockingbird, 1984, Pride and Prejudice, The Great Gatsby, Moby-Dick, The Catcher in the Rye, Harry Potter 
and the Sorcerer's Stone, The Lord of the Rings, One Hundred Years of Solitude, Brave New World, Sapiens: A Brief 
History of Humankind, The Immortal Life of Henrietta Lacks, Thinking, Fast and Slow, The Wright Brothers, The Diary of 
a Young Girl, Educated, The Art of War, The 7 Habits of Highly Effective People, Freakonomics, Quiet: The Power of 
Introverts in a World That Can't Stop Talking, Dune, Ender's Game, Neuromancer
Input:'The value for the number of products to consume. It must be greater than 12 and less than 50.'
Output:PROVIDED: None +++ GENERATED: None
Input:'The number of bank accounts associated. Cannot be less than 0.'
Output:PROVIDED: None +++ GENERATED: None
Input:'The maximum number of playlists to return. Default: 20. Minimum: 1. Maximum: 50.'
Output:",None
limit,0.2,256,"
Analyze the provided API parameter description and first estimate the parameter type. Then, according to the type, apply the following to determine restrictions on the parameter input:
If it is a number, determine if the description mentions minimum, maximum, or default possible values and output: ""min [minimum], max [maximum], default [default]"". 
If it's a string, word, or code, determine if the description mentions minimum or maximum possible character amounts or a default value, and output: ""minLength [minimum], maxLength [maximum], default [default]"". 
If it's an array or list, determine if the description mentions minimum or maximum possible list lengths or a default value, and output: ""minItems [minimum], maxItems [maximum], default [default]"".
If it's an object, determine if the description mentions minimum or maximum possible numbers of object properties or a default value, and output: ""minProperties [minimum], maxProperties [maximum], default [default]"".
If it is any other data type where there is a default value provided, output: ""min None, max None, default [default]"".
If you are unable to determine any minimum, maximum, or default restrictions, output ""None"". If you are able to determine only one either the minimum or maximum, output the undetermined value as ""None"".

Assume any ""
"" values in the input indicate either new lines or spaces. 

Here are some examples of inputs and expected outputs:

Input:'An idea for a project. This and 'rating' are required.'
Output:None
Input:'The maximum value is 50. If nothing is put in, default to 0.'
Output:min None, max 50, default 0
Input:'The timer counter. The value must be between 15.0 and 120.'
Output:min 15.0, max 120, default None
Input:'The input range. The smallest value possible is -120.8. The largest should be 179.652.'
Output:min -120.8, max 179.652, default None
Input:'The number of items to be investigated. The maximum is 9,999.99'
Output:min None, max 9999.99, default None
Input:'The name of the movie. The movie name cannot be shorter than 10 characters and longer than 20 characters.'
Output:minLength 10, maxLength 20, default None
Input:'The country code which can be 1-letter, 2-letter, or 3-letter.'
Output:minLength 1, maxLength 3, default None
Input:'A supplied language code that can either be 2-letter or 3-letter which is used to parse through a list of common phrases.'
Output:minLength 2, maxLength 3, default None
Input:'Search via county areas.'
Output:None
Input:'Identifies synonyms through word inputs.'
Output:None
Input:'After searching through a list of ISO country codes, input 2-letter or 3-letter codes to find their data.'
Output:minLength 2, maxLength 3, default None
Input:'The maximum number of playlists to return. Default: 20. Minimum: 1. Maximum: 50.'
Output:","min 1, max 50, default 20"
limit,0.2,256,"
Analyze the provided API parameter description and determine whether it clearly identifies the parameter's data type 
or formatting. 
The list of possible data types are as follows: string, number, integer, boolean, array, and object.
The list of format options are as follows: time, date, password, byte, binary, email, uuid, uri, url, hostname, ipv4, and ipv6. Use the types and formats available for the OpenAPI Specification. 
A list of collectionFormat types are as follows: csv, ssv, and pipes.
If the data type is an array, attempt to identify its item type. 
Output the answer as follows: ""type [type], items [item type], format [format], collectionFormat [collectionFormat]"". Output None when unable to determine any of the categories. 
For example, only output a non-None ""item type"" if the ""type"" is array.

Assume any ""
"" values in the input indicate either new lines or spaces. 

Here are some examples of inputs and expected outputs:

Input:'A space-separated list of percent grades corresponding to the student.'
Output:type array, items number, format None, collectionFormat ssv
Input:'This should contain the email of the sender.'
Output:type string, items None, format email, collectionFormat None
Input:'This value should be true if the assignment is available for regrade.'
Output:type boolean, items None, format None, collectionFormat None
Input:'A URL containing the website for evaluation.'
Output:type string, items None, format url, collectionFormat None
Input:'The date of the contest. The date must be within the last three months.'
Output:type string, items None, format date, collectionFormat None
Input:'The time that the project must be completed. Use Eastern Standard Timezone (EST).'
Output:type string, items None, format date-time, collectionFormat None
Input:'A list of region codes.'
Output:type array, items None, format None, collectionFormat None
Input:'The maximum number of playlists to return. Default: 20. Minimum: 1. Maximum: 50.'
Output:",None
limit,0.2,256,"
Identify the API parameter object by the grouping of its ""name"" and ""description"". Analyze the parameter description and extract logical constraints
in the provided format. Evaluate each case and determine whether it is applicable. Strictly follow the format and make no inferences. Only consider constraints
that are strictly required. Interpret the description in the least constraining manner, and assume Case 1 unless the other cases are obvious:

Case 1: The description isn't definitive about parameter requirements. Output ""None"".
Case 2: The description states the parameter ""name"" is required. Output: ""REQUIRED: name"". 
Case 3: The description states that parameter ""name"" or another parameter ""name"" is required. Output: ""Or(name, name)""
Case 4: The description states that given a set of parameters name, name_2, . . . , name_n, zero or one can be present in the API call: Output: ""ZeroOrOne(name, name_2, ... name_n)""
Case 5: The description states that given a set of parameters name, name_2, . . . , name_n, exactly one must be present in the API call: Output: ""OnlyOne(name, name_2, ... name_n)""
Case 6: The description states that given a set of parameters name, name_2, . . . , name_n, all of them or none must be present in the API call: Output: ""AllOrNone(name, name_2, ... name_n)""
Case 7: The description states that there is a relational relationship between some parameters: Output: ""name >= name_2"", where the standard relational operators can be used
Case 8: The description states that there is an arithmetic relationship between the value of parameters: Output: ""name_1 + name_2 <= value"", where the standard arithmetic operators can be used
Case 9: The description states there is a conditional relationship between parameters: Output: ""IF name THEN name_2"", where the standard logical operators can be used
Case 10: The description states that there exists a complex relationship between parameters, you can combine rules from the grammar to express a statement: Output: ""IF name==value THEN OnlyOne(name_2 AND name_3, name_4 AND name_5);

The grammar for statements is succinctly defined as follows:

Model:
    Dependency*;
Dependency:
    RelationalDependency | ArithmeticDependency |
    ConditionalDependency | PredefinedDependency;
RelationalDependency:
    Param RelationalOperator Param;
ArithmeticDependency:
    Operation RelationalOperator DOUBLE;
Operation:
    Param OperationContinuation |
    '(' Operation ')' OperationContinuation?;
OperationContinuation:
    ArithmeticOperator (Param | Operation);
ConditionalDependency:
    'IF' Predicate 'THEN' Predicate;
Predicate:
    Clause ClauseContinuation?;
Clause:
    (Term | RelationalDependency | ArithmeticDependency
    | PredefinedDependency) | 'NOT'? '(' Predicate ')';
Term:
    'NOT'? (Param | ParamValueRelation);
Param:
    ID | '[' ID ']';
ParamValueRelation:
    Param '==' STRING('|'STRING)* |
    Param 'LIKE' PATTERN_STRING | Param '==' BOOLEAN |
    Param RelationalOperator DOUBLE;
ClauseContinuation:
    ('AND' | 'OR') Predicate;
PredefinedDependency:
    'NOT'? ('Or' | 'OnlyOne' | 'AllOrNone' |
    'ZeroOrOne') '(' Clause (',' Clause)+ ')';
RelationalOperator:
    '<' | '>' | '<=' | '>=' | '==' | '!=';
ArithmeticOperator:
    '+' | '-' | '*' | '/';

If there are multiple dependency statements, return each one on a new line. Do not include any other text. Do not create dependencies on expected API responses.
Assume any ""
"" values in the input indicate either new lines or spaces. 
Here are some examples of expected outputs:

Input:
name: text 
description: The text to be checked. This or 'data' is required.
Output:Or(text, data);
Input: 
     name: idea
     description: 'An idea for a project. This and 'rating' are required.'
Output:OnlyOne(idea AND rating);
Input:
      name: partID
      description: 'The ID of the part. If partModel is specified partID must be specified'
Output:IF partModel THEN partID;
Input:
       name: language 
       description: The language of the client, not required if the country-code is USA or CAN.
Output:IF country-code!='USA' OR country-code=='CAN' THEN language;
Input:
        name: cost
        description: The cost of the product, this - profit must be greater than 500.
Output:cost - profit > 500;
Input:'The maximum number of playlists to return. Default: 20. Minimum: 1. Maximum: 50.'
Output:",None
offset,0.2,256,"
Analyze the provided API parameter description, and extract any example values for the parameter mentioned in the description. 
Then, generate a few additional example values that correspond to, or are in the same category as the provided values.
If there are no example values provided, simply generate values corresponding to the description, and always generate values when possible.  
If generating example values is not possible, return None. Consider the following cases: 

Case 1: The description contains example values USA, CAN, ZWE: Output: ""PROVIDED: USA, CAN, ZWE +++ GENERATED: BRA, FRA, GER ...""
Case 2: The description does not explicitly mention example values: Output: ""PROVIDED: None +++ GENERATED: BRA, FRA, GER, USA ...""
Case 3: The description does not explicitly mention example values, and it is not possible to generate example values: Output: ""None""

Assume any ""
"" values in the input represent spaces or new lines. Do not output any ""
"" strings.

Here are some examples of inputs and expected outputs:
Input:'The country code associated with the country. Examples are CAD, USD, etc...'
Output:PROVIDED: CAD, USD +++ GENERATED: AFG, ALA, ALB, DZA, ASM, AND, AGO, AIA, ATA, ATG, ARG, ARM, ABW, AUS, AUT, AZE, BHS, BHR, BGD, BRB, BLR, BEL, 
BLZ, BEN, BMU, BTN, BOL, BES, BIH, BWA, BVT, BRA, IOT, BRN, BGR, BFA, BDI, CPV, KHM, CMR, CAN, CYM, CAF, TCD, 
CHL, CHN, CXR, CCK, COL, COM, COG, COD, COK, CRI, CIV, HRV, CUB, CUW, CYP, CZE, DNK, DJI, DMA, DOM, ECU, EGY, 
SLV, GNQ, ERI, EST, SWZ, ETH, FLK, FRO, FJI, FIN, FRA, GUF, PYF, ATF, GAB, GMB, GEO, DEU, GHA, GIB, GRC, GRL, 
GRD, GLP, GUM, GTM, GGY, GIN, GNB, GUY, HTI, HMD, VAT, HND, HKG, HUN, ISL, IND, IDN, IRN, IRQ, IRL, IMN, ISR, 
ITA, JAM, JPN, JEY, JOR, KAZ, KEN, KIR, PRK, KOR, KWT, KGZ, LAO, LVA, LBN, LSO, LBR, LBY, LIE, LTU, LUX, MAC, 
MDG, MWI, MYS, MDV, MLI, MLT, MHL, MTQ, MRT, MUS, MYT, MEX, FSM, MDA, MCO, MNG, MNE, MSR, MAR, MOZ, MMR, NAM, 
NRU, NPL, NLD, NCL, NZL, NIC, NER, NGA, NIU, NFK, MKD, MNP, NOR, OMN, PAK, PLW, PSE, PAN, PNG, PRY, PER, PHL, 
PCN, POL, PRT, PRI, QAT, REU, ROU, RUS, RWA, BLM, SHN, KNA, LCA, MAF, SPM, VCT, WSM, SMR, STP, SAU, SEN, SRB, 
SYC, SLE, SGP, SXM, SVK, SVN, SLB, SOM, ZAF, SGS, SSD, ESP, LKA, SDN, SUR, SJM, SWE, CHE, SYR, TWN, TJK, TZA, 
THA, TLS, TGO, TKL, TON, TTO, TUN, TUR, TKM, TCA, TUV, UGA, UKR, ARE, GBR, USA, UMI, URY, UZB, VUT, VEN, VNM, 
VGB, VIR, WLF, ESH, YEM, ZMB, ZWE
Input:'The numbers for the percent grades must be to one decimal place (such as 10.6).'
Output:PROVIDED: 10.6 +++ GENERATED: 0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0, 2.1, 
2.2, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8, 2.9, 3.0, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6, 3.7, 3.8, 3.9, 4.0, 4.1, 4.2, 4.3, 4.4, 
4.5, 4.6, 4.7, 4.8, 4.9, 5.0, 5.1, 5.2, 5.3, 10.0, 99.9, 100.0
Input:'The title of the book to be rated.'
Output:PROVIDED: None +++ GENERATED: To Kill a Mockingbird, 1984, Pride and Prejudice, The Great Gatsby, Moby-Dick, The Catcher in the Rye, Harry Potter 
and the Sorcerer's Stone, The Lord of the Rings, One Hundred Years of Solitude, Brave New World, Sapiens: A Brief 
History of Humankind, The Immortal Life of Henrietta Lacks, Thinking, Fast and Slow, The Wright Brothers, The Diary of 
a Young Girl, Educated, The Art of War, The 7 Habits of Highly Effective People, Freakonomics, Quiet: The Power of 
Introverts in a World That Can't Stop Talking, Dune, Ender's Game, Neuromancer
Input:'The value for the number of products to consume. It must be greater than 12 and less than 50.'
Output:PROVIDED: None +++ GENERATED: None
Input:'The number of bank accounts associated. Cannot be less than 0.'
Output:PROVIDED: None +++ GENERATED: None
Input:'The index of the first playlist to return. Default: 0 (the first object). Maximum offset: 100.000. Use with `limit` to get the next set of playlists.'
Output:",None
offset,0.2,256,"
Analyze the provided API parameter description and first estimate the parameter type. Then, according to the type, apply the following to determine restrictions on the parameter input:
If it is a number, determine if the description mentions minimum, maximum, or default possible values and output: ""min [minimum], max [maximum], default [default]"". 
If it's a string, word, or code, determine if the description mentions minimum or maximum possible character amounts or a default value, and output: ""minLength [minimum], maxLength [maximum], default [default]"". 
If it's an array or list, determine if the description mentions minimum or maximum possible list lengths or a default value, and output: ""minItems [minimum], maxItems [maximum], default [default]"".
If it's an object, determine if the description mentions minimum or maximum possible numbers of object properties or a default value, and output: ""minProperties [minimum], maxProperties [maximum], default [default]"".
If it is any other data type where there is a default value provided, output: ""min None, max None, default [default]"".
If you are unable to determine any minimum, maximum, or default restrictions, output ""None"". If you are able to determine only one either the minimum or maximum, output the undetermined value as ""None"".

Assume any ""
"" values in the input indicate either new lines or spaces. 

Here are some examples of inputs and expected outputs:

Input:'An idea for a project. This and 'rating' are required.'
Output:None
Input:'The maximum value is 50. If nothing is put in, default to 0.'
Output:min None, max 50, default 0
Input:'The timer counter. The value must be between 15.0 and 120.'
Output:min 15.0, max 120, default None
Input:'The input range. The smallest value possible is -120.8. The largest should be 179.652.'
Output:min -120.8, max 179.652, default None
Input:'The number of items to be investigated. The maximum is 9,999.99'
Output:min None, max 9999.99, default None
Input:'The name of the movie. The movie name cannot be shorter than 10 characters and longer than 20 characters.'
Output:minLength 10, maxLength 20, default None
Input:'The country code which can be 1-letter, 2-letter, or 3-letter.'
Output:minLength 1, maxLength 3, default None
Input:'A supplied language code that can either be 2-letter or 3-letter which is used to parse through a list of common phrases.'
Output:minLength 2, maxLength 3, default None
Input:'Search via county areas.'
Output:None
Input:'Identifies synonyms through word inputs.'
Output:None
Input:'After searching through a list of ISO country codes, input 2-letter or 3-letter codes to find their data.'
Output:minLength 2, maxLength 3, default None
Input:'The index of the first playlist to return. Default: 0 (the first object). Maximum offset: 100.000. Use with `limit` to get the next set of playlists.'
Output:","min 0, max 100000, default 0"
offset,0.2,256,"
Analyze the provided API parameter description and determine whether it clearly identifies the parameter's data type 
or formatting. 
The list of possible data types are as follows: string, number, integer, boolean, array, and object.
The list of format options are as follows: time, date, password, byte, binary, email, uuid, uri, url, hostname, ipv4, and ipv6. Use the types and formats available for the OpenAPI Specification. 
A list of collectionFormat types are as follows: csv, ssv, and pipes.
If the data type is an array, attempt to identify its item type. 
Output the answer as follows: ""type [type], items [item type], format [format], collectionFormat [collectionFormat]"". Output None when unable to determine any of the categories. 
For example, only output a non-None ""item type"" if the ""type"" is array.

Assume any ""
"" values in the input indicate either new lines or spaces. 

Here are some examples of inputs and expected outputs:

Input:'A space-separated list of percent grades corresponding to the student.'
Output:type array, items number, format None, collectionFormat ssv
Input:'This should contain the email of the sender.'
Output:type string, items None, format email, collectionFormat None
Input:'This value should be true if the assignment is available for regrade.'
Output:type boolean, items None, format None, collectionFormat None
Input:'A URL containing the website for evaluation.'
Output:type string, items None, format url, collectionFormat None
Input:'The date of the contest. The date must be within the last three months.'
Output:type string, items None, format date, collectionFormat None
Input:'The time that the project must be completed. Use Eastern Standard Timezone (EST).'
Output:type string, items None, format date-time, collectionFormat None
Input:'A list of region codes.'
Output:type array, items None, format None, collectionFormat None
Input:'The index of the first playlist to return. Default: 0 (the first object). Maximum offset: 100.000. Use with `limit` to get the next set of playlists.'
Output:",None
offset,0.2,256,"
Identify the API parameter object by the grouping of its ""name"" and ""description"". Analyze the parameter description and extract logical constraints
in the provided format. Evaluate each case and determine whether it is applicable. Strictly follow the format and make no inferences. Only consider constraints
that are strictly required. Interpret the description in the least constraining manner, and assume Case 1 unless the other cases are obvious:

Case 1: The description isn't definitive about parameter requirements. Output ""None"".
Case 2: The description states the parameter ""name"" is required. Output: ""REQUIRED: name"". 
Case 3: The description states that parameter ""name"" or another parameter ""name"" is required. Output: ""Or(name, name)""
Case 4: The description states that given a set of parameters name, name_2, . . . , name_n, zero or one can be present in the API call: Output: ""ZeroOrOne(name, name_2, ... name_n)""
Case 5: The description states that given a set of parameters name, name_2, . . . , name_n, exactly one must be present in the API call: Output: ""OnlyOne(name, name_2, ... name_n)""
Case 6: The description states that given a set of parameters name, name_2, . . . , name_n, all of them or none must be present in the API call: Output: ""AllOrNone(name, name_2, ... name_n)""
Case 7: The description states that there is a relational relationship between some parameters: Output: ""name >= name_2"", where the standard relational operators can be used
Case 8: The description states that there is an arithmetic relationship between the value of parameters: Output: ""name_1 + name_2 <= value"", where the standard arithmetic operators can be used
Case 9: The description states there is a conditional relationship between parameters: Output: ""IF name THEN name_2"", where the standard logical operators can be used
Case 10: The description states that there exists a complex relationship between parameters, you can combine rules from the grammar to express a statement: Output: ""IF name==value THEN OnlyOne(name_2 AND name_3, name_4 AND name_5);

The grammar for statements is succinctly defined as follows:

Model:
    Dependency*;
Dependency:
    RelationalDependency | ArithmeticDependency |
    ConditionalDependency | PredefinedDependency;
RelationalDependency:
    Param RelationalOperator Param;
ArithmeticDependency:
    Operation RelationalOperator DOUBLE;
Operation:
    Param OperationContinuation |
    '(' Operation ')' OperationContinuation?;
OperationContinuation:
    ArithmeticOperator (Param | Operation);
ConditionalDependency:
    'IF' Predicate 'THEN' Predicate;
Predicate:
    Clause ClauseContinuation?;
Clause:
    (Term | RelationalDependency | ArithmeticDependency
    | PredefinedDependency) | 'NOT'? '(' Predicate ')';
Term:
    'NOT'? (Param | ParamValueRelation);
Param:
    ID | '[' ID ']';
ParamValueRelation:
    Param '==' STRING('|'STRING)* |
    Param 'LIKE' PATTERN_STRING | Param '==' BOOLEAN |
    Param RelationalOperator DOUBLE;
ClauseContinuation:
    ('AND' | 'OR') Predicate;
PredefinedDependency:
    'NOT'? ('Or' | 'OnlyOne' | 'AllOrNone' |
    'ZeroOrOne') '(' Clause (',' Clause)+ ')';
RelationalOperator:
    '<' | '>' | '<=' | '>=' | '==' | '!=';
ArithmeticOperator:
    '+' | '-' | '*' | '/';

If there are multiple dependency statements, return each one on a new line. Do not include any other text. Do not create dependencies on expected API responses.
Assume any ""
"" values in the input indicate either new lines or spaces. 
Here are some examples of expected outputs:

Input:
name: text 
description: The text to be checked. This or 'data' is required.
Output:Or(text, data);
Input: 
     name: idea
     description: 'An idea for a project. This and 'rating' are required.'
Output:OnlyOne(idea AND rating);
Input:
      name: partID
      description: 'The ID of the part. If partModel is specified partID must be specified'
Output:IF partModel THEN partID;
Input:
       name: language 
       description: The language of the client, not required if the country-code is USA or CAN.
Output:IF country-code!='USA' OR country-code=='CAN' THEN language;
Input:
        name: cost
        description: The cost of the product, this - profit must be greater than 500.
Output:cost - profit > 500;
Input:'The index of the first playlist to return. Default: 0 (the first object). Maximum offset: 100.000. Use with `limit` to get the next set of playlists.'
Output:",None
playlist_id,0.2,256,"
Analyze the provided API parameter description, and extract any example values for the parameter mentioned in the description. 
Then, generate a few additional example values that correspond to, or are in the same category as the provided values.
If there are no example values provided, simply generate values corresponding to the description, and always generate values when possible.  
If generating example values is not possible, return None. Consider the following cases: 

Case 1: The description contains example values USA, CAN, ZWE: Output: ""PROVIDED: USA, CAN, ZWE +++ GENERATED: BRA, FRA, GER ...""
Case 2: The description does not explicitly mention example values: Output: ""PROVIDED: None +++ GENERATED: BRA, FRA, GER, USA ...""
Case 3: The description does not explicitly mention example values, and it is not possible to generate example values: Output: ""None""

Assume any ""
"" values in the input represent spaces or new lines. Do not output any ""
"" strings.

Here are some examples of inputs and expected outputs:
Input:'The country code associated with the country. Examples are CAD, USD, etc...'
Output:PROVIDED: CAD, USD +++ GENERATED: AFG, ALA, ALB, DZA, ASM, AND, AGO, AIA, ATA, ATG, ARG, ARM, ABW, AUS, AUT, AZE, BHS, BHR, BGD, BRB, BLR, BEL, 
BLZ, BEN, BMU, BTN, BOL, BES, BIH, BWA, BVT, BRA, IOT, BRN, BGR, BFA, BDI, CPV, KHM, CMR, CAN, CYM, CAF, TCD, 
CHL, CHN, CXR, CCK, COL, COM, COG, COD, COK, CRI, CIV, HRV, CUB, CUW, CYP, CZE, DNK, DJI, DMA, DOM, ECU, EGY, 
SLV, GNQ, ERI, EST, SWZ, ETH, FLK, FRO, FJI, FIN, FRA, GUF, PYF, ATF, GAB, GMB, GEO, DEU, GHA, GIB, GRC, GRL, 
GRD, GLP, GUM, GTM, GGY, GIN, GNB, GUY, HTI, HMD, VAT, HND, HKG, HUN, ISL, IND, IDN, IRN, IRQ, IRL, IMN, ISR, 
ITA, JAM, JPN, JEY, JOR, KAZ, KEN, KIR, PRK, KOR, KWT, KGZ, LAO, LVA, LBN, LSO, LBR, LBY, LIE, LTU, LUX, MAC, 
MDG, MWI, MYS, MDV, MLI, MLT, MHL, MTQ, MRT, MUS, MYT, MEX, FSM, MDA, MCO, MNG, MNE, MSR, MAR, MOZ, MMR, NAM, 
NRU, NPL, NLD, NCL, NZL, NIC, NER, NGA, NIU, NFK, MKD, MNP, NOR, OMN, PAK, PLW, PSE, PAN, PNG, PRY, PER, PHL, 
PCN, POL, PRT, PRI, QAT, REU, ROU, RUS, RWA, BLM, SHN, KNA, LCA, MAF, SPM, VCT, WSM, SMR, STP, SAU, SEN, SRB, 
SYC, SLE, SGP, SXM, SVK, SVN, SLB, SOM, ZAF, SGS, SSD, ESP, LKA, SDN, SUR, SJM, SWE, CHE, SYR, TWN, TJK, TZA, 
THA, TLS, TGO, TKL, TON, TTO, TUN, TUR, TKM, TCA, TUV, UGA, UKR, ARE, GBR, USA, UMI, URY, UZB, VUT, VEN, VNM, 
VGB, VIR, WLF, ESH, YEM, ZMB, ZWE
Input:'The numbers for the percent grades must be to one decimal place (such as 10.6).'
Output:PROVIDED: 10.6 +++ GENERATED: 0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0, 2.1, 
2.2, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8, 2.9, 3.0, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6, 3.7, 3.8, 3.9, 4.0, 4.1, 4.2, 4.3, 4.4, 
4.5, 4.6, 4.7, 4.8, 4.9, 5.0, 5.1, 5.2, 5.3, 10.0, 99.9, 100.0
Input:'The title of the book to be rated.'
Output:PROVIDED: None +++ GENERATED: To Kill a Mockingbird, 1984, Pride and Prejudice, The Great Gatsby, Moby-Dick, The Catcher in the Rye, Harry Potter 
and the Sorcerer's Stone, The Lord of the Rings, One Hundred Years of Solitude, Brave New World, Sapiens: A Brief 
History of Humankind, The Immortal Life of Henrietta Lacks, Thinking, Fast and Slow, The Wright Brothers, The Diary of 
a Young Girl, Educated, The Art of War, The 7 Habits of Highly Effective People, Freakonomics, Quiet: The Power of 
Introverts in a World That Can't Stop Talking, Dune, Ender's Game, Neuromancer
Input:'The value for the number of products to consume. It must be greater than 12 and less than 50.'
Output:PROVIDED: None +++ GENERATED: None
Input:'The number of bank accounts associated. Cannot be less than 0.'
Output:PROVIDED: None +++ GENERATED: None
Input:The [Spotify ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for the playlist.
Output:",None
playlist_id,0.2,256,"
Analyze the provided API parameter description and first estimate the parameter type. Then, according to the type, apply the following to determine restrictions on the parameter input:
If it is a number, determine if the description mentions minimum, maximum, or default possible values and output: ""min [minimum], max [maximum], default [default]"". 
If it's a string, word, or code, determine if the description mentions minimum or maximum possible character amounts or a default value, and output: ""minLength [minimum], maxLength [maximum], default [default]"". 
If it's an array or list, determine if the description mentions minimum or maximum possible list lengths or a default value, and output: ""minItems [minimum], maxItems [maximum], default [default]"".
If it's an object, determine if the description mentions minimum or maximum possible numbers of object properties or a default value, and output: ""minProperties [minimum], maxProperties [maximum], default [default]"".
If it is any other data type where there is a default value provided, output: ""min None, max None, default [default]"".
If you are unable to determine any minimum, maximum, or default restrictions, output ""None"". If you are able to determine only one either the minimum or maximum, output the undetermined value as ""None"".

Assume any ""
"" values in the input indicate either new lines or spaces. 

Here are some examples of inputs and expected outputs:

Input:'An idea for a project. This and 'rating' are required.'
Output:None
Input:'The maximum value is 50. If nothing is put in, default to 0.'
Output:min None, max 50, default 0
Input:'The timer counter. The value must be between 15.0 and 120.'
Output:min 15.0, max 120, default None
Input:'The input range. The smallest value possible is -120.8. The largest should be 179.652.'
Output:min -120.8, max 179.652, default None
Input:'The number of items to be investigated. The maximum is 9,999.99'
Output:min None, max 9999.99, default None
Input:'The name of the movie. The movie name cannot be shorter than 10 characters and longer than 20 characters.'
Output:minLength 10, maxLength 20, default None
Input:'The country code which can be 1-letter, 2-letter, or 3-letter.'
Output:minLength 1, maxLength 3, default None
Input:'A supplied language code that can either be 2-letter or 3-letter which is used to parse through a list of common phrases.'
Output:minLength 2, maxLength 3, default None
Input:'Search via county areas.'
Output:None
Input:'Identifies synonyms through word inputs.'
Output:None
Input:'After searching through a list of ISO country codes, input 2-letter or 3-letter codes to find their data.'
Output:minLength 2, maxLength 3, default None
Input:The [Spotify ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for the playlist.
Output:",None
playlist_id,0.2,256,"
Analyze the provided API parameter description and determine whether it clearly identifies the parameter's data type 
or formatting. 
The list of possible data types are as follows: string, number, integer, boolean, array, and object.
The list of format options are as follows: time, date, password, byte, binary, email, uuid, uri, url, hostname, ipv4, and ipv6. Use the types and formats available for the OpenAPI Specification. 
A list of collectionFormat types are as follows: csv, ssv, and pipes.
If the data type is an array, attempt to identify its item type. 
Output the answer as follows: ""type [type], items [item type], format [format], collectionFormat [collectionFormat]"". Output None when unable to determine any of the categories. 
For example, only output a non-None ""item type"" if the ""type"" is array.

Assume any ""
"" values in the input indicate either new lines or spaces. 

Here are some examples of inputs and expected outputs:

Input:'A space-separated list of percent grades corresponding to the student.'
Output:type array, items number, format None, collectionFormat ssv
Input:'This should contain the email of the sender.'
Output:type string, items None, format email, collectionFormat None
Input:'This value should be true if the assignment is available for regrade.'
Output:type boolean, items None, format None, collectionFormat None
Input:'A URL containing the website for evaluation.'
Output:type string, items None, format url, collectionFormat None
Input:'The date of the contest. The date must be within the last three months.'
Output:type string, items None, format date, collectionFormat None
Input:'The time that the project must be completed. Use Eastern Standard Timezone (EST).'
Output:type string, items None, format date-time, collectionFormat None
Input:'A list of region codes.'
Output:type array, items None, format None, collectionFormat None
Input:The [Spotify ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for the playlist.
Output:",None
playlist_id,0.2,256,"
Identify the API parameter object by the grouping of its ""name"" and ""description"". Analyze the parameter description and extract logical constraints
in the provided format. Evaluate each case and determine whether it is applicable. Strictly follow the format and make no inferences. Only consider constraints
that are strictly required. Interpret the description in the least constraining manner, and assume Case 1 unless the other cases are obvious:

Case 1: The description isn't definitive about parameter requirements. Output ""None"".
Case 2: The description states the parameter ""name"" is required. Output: ""REQUIRED: name"". 
Case 3: The description states that parameter ""name"" or another parameter ""name"" is required. Output: ""Or(name, name)""
Case 4: The description states that given a set of parameters name, name_2, . . . , name_n, zero or one can be present in the API call: Output: ""ZeroOrOne(name, name_2, ... name_n)""
Case 5: The description states that given a set of parameters name, name_2, . . . , name_n, exactly one must be present in the API call: Output: ""OnlyOne(name, name_2, ... name_n)""
Case 6: The description states that given a set of parameters name, name_2, . . . , name_n, all of them or none must be present in the API call: Output: ""AllOrNone(name, name_2, ... name_n)""
Case 7: The description states that there is a relational relationship between some parameters: Output: ""name >= name_2"", where the standard relational operators can be used
Case 8: The description states that there is an arithmetic relationship between the value of parameters: Output: ""name_1 + name_2 <= value"", where the standard arithmetic operators can be used
Case 9: The description states there is a conditional relationship between parameters: Output: ""IF name THEN name_2"", where the standard logical operators can be used
Case 10: The description states that there exists a complex relationship between parameters, you can combine rules from the grammar to express a statement: Output: ""IF name==value THEN OnlyOne(name_2 AND name_3, name_4 AND name_5);

The grammar for statements is succinctly defined as follows:

Model:
    Dependency*;
Dependency:
    RelationalDependency | ArithmeticDependency |
    ConditionalDependency | PredefinedDependency;
RelationalDependency:
    Param RelationalOperator Param;
ArithmeticDependency:
    Operation RelationalOperator DOUBLE;
Operation:
    Param OperationContinuation |
    '(' Operation ')' OperationContinuation?;
OperationContinuation:
    ArithmeticOperator (Param | Operation);
ConditionalDependency:
    'IF' Predicate 'THEN' Predicate;
Predicate:
    Clause ClauseContinuation?;
Clause:
    (Term | RelationalDependency | ArithmeticDependency
    | PredefinedDependency) | 'NOT'? '(' Predicate ')';
Term:
    'NOT'? (Param | ParamValueRelation);
Param:
    ID | '[' ID ']';
ParamValueRelation:
    Param '==' STRING('|'STRING)* |
    Param 'LIKE' PATTERN_STRING | Param '==' BOOLEAN |
    Param RelationalOperator DOUBLE;
ClauseContinuation:
    ('AND' | 'OR') Predicate;
PredefinedDependency:
    'NOT'? ('Or' | 'OnlyOne' | 'AllOrNone' |
    'ZeroOrOne') '(' Clause (',' Clause)+ ')';
RelationalOperator:
    '<' | '>' | '<=' | '>=' | '==' | '!=';
ArithmeticOperator:
    '+' | '-' | '*' | '/';

If there are multiple dependency statements, return each one on a new line. Do not include any other text. Do not create dependencies on expected API responses.
Assume any ""
"" values in the input indicate either new lines or spaces. 
Here are some examples of expected outputs:

Input:
name: text 
description: The text to be checked. This or 'data' is required.
Output:Or(text, data);
Input: 
     name: idea
     description: 'An idea for a project. This and 'rating' are required.'
Output:OnlyOne(idea AND rating);
Input:
      name: partID
      description: 'The ID of the part. If partModel is specified partID must be specified'
Output:IF partModel THEN partID;
Input:
       name: language 
       description: The language of the client, not required if the country-code is USA or CAN.
Output:IF country-code!='USA' OR country-code=='CAN' THEN language;
Input:
        name: cost
        description: The cost of the product, this - profit must be greater than 500.
Output:cost - profit > 500;
Input:The [Spotify ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for the playlist.
Output:",None
market,0.2,256,"
Analyze the provided API parameter description, and extract any example values for the parameter mentioned in the description. 
Then, generate a few additional example values that correspond to, or are in the same category as the provided values.
If there are no example values provided, simply generate values corresponding to the description, and always generate values when possible.  
If generating example values is not possible, return None. Consider the following cases: 

Case 1: The description contains example values USA, CAN, ZWE: Output: ""PROVIDED: USA, CAN, ZWE +++ GENERATED: BRA, FRA, GER ...""
Case 2: The description does not explicitly mention example values: Output: ""PROVIDED: None +++ GENERATED: BRA, FRA, GER, USA ...""
Case 3: The description does not explicitly mention example values, and it is not possible to generate example values: Output: ""None""

Assume any ""
"" values in the input represent spaces or new lines. Do not output any ""
"" strings.

Here are some examples of inputs and expected outputs:
Input:'The country code associated with the country. Examples are CAD, USD, etc...'
Output:PROVIDED: CAD, USD +++ GENERATED: AFG, ALA, ALB, DZA, ASM, AND, AGO, AIA, ATA, ATG, ARG, ARM, ABW, AUS, AUT, AZE, BHS, BHR, BGD, BRB, BLR, BEL, 
BLZ, BEN, BMU, BTN, BOL, BES, BIH, BWA, BVT, BRA, IOT, BRN, BGR, BFA, BDI, CPV, KHM, CMR, CAN, CYM, CAF, TCD, 
CHL, CHN, CXR, CCK, COL, COM, COG, COD, COK, CRI, CIV, HRV, CUB, CUW, CYP, CZE, DNK, DJI, DMA, DOM, ECU, EGY, 
SLV, GNQ, ERI, EST, SWZ, ETH, FLK, FRO, FJI, FIN, FRA, GUF, PYF, ATF, GAB, GMB, GEO, DEU, GHA, GIB, GRC, GRL, 
GRD, GLP, GUM, GTM, GGY, GIN, GNB, GUY, HTI, HMD, VAT, HND, HKG, HUN, ISL, IND, IDN, IRN, IRQ, IRL, IMN, ISR, 
ITA, JAM, JPN, JEY, JOR, KAZ, KEN, KIR, PRK, KOR, KWT, KGZ, LAO, LVA, LBN, LSO, LBR, LBY, LIE, LTU, LUX, MAC, 
MDG, MWI, MYS, MDV, MLI, MLT, MHL, MTQ, MRT, MUS, MYT, MEX, FSM, MDA, MCO, MNG, MNE, MSR, MAR, MOZ, MMR, NAM, 
NRU, NPL, NLD, NCL, NZL, NIC, NER, NGA, NIU, NFK, MKD, MNP, NOR, OMN, PAK, PLW, PSE, PAN, PNG, PRY, PER, PHL, 
PCN, POL, PRT, PRI, QAT, REU, ROU, RUS, RWA, BLM, SHN, KNA, LCA, MAF, SPM, VCT, WSM, SMR, STP, SAU, SEN, SRB, 
SYC, SLE, SGP, SXM, SVK, SVN, SLB, SOM, ZAF, SGS, SSD, ESP, LKA, SDN, SUR, SJM, SWE, CHE, SYR, TWN, TJK, TZA, 
THA, TLS, TGO, TKL, TON, TTO, TUN, TUR, TKM, TCA, TUV, UGA, UKR, ARE, GBR, USA, UMI, URY, UZB, VUT, VEN, VNM, 
VGB, VIR, WLF, ESH, YEM, ZMB, ZWE
Input:'The numbers for the percent grades must be to one decimal place (such as 10.6).'
Output:PROVIDED: 10.6 +++ GENERATED: 0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0, 2.1, 
2.2, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8, 2.9, 3.0, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6, 3.7, 3.8, 3.9, 4.0, 4.1, 4.2, 4.3, 4.4, 
4.5, 4.6, 4.7, 4.8, 4.9, 5.0, 5.1, 5.2, 5.3, 10.0, 99.9, 100.0
Input:'The title of the book to be rated.'
Output:PROVIDED: None +++ GENERATED: To Kill a Mockingbird, 1984, Pride and Prejudice, The Great Gatsby, Moby-Dick, The Catcher in the Rye, Harry Potter 
and the Sorcerer's Stone, The Lord of the Rings, One Hundred Years of Solitude, Brave New World, Sapiens: A Brief 
History of Humankind, The Immortal Life of Henrietta Lacks, Thinking, Fast and Slow, The Wright Brothers, The Diary of 
a Young Girl, Educated, The Art of War, The 7 Habits of Highly Effective People, Freakonomics, Quiet: The Power of 
Introverts in a World That Can't Stop Talking, Dune, Ender's Game, Neuromancer
Input:'The value for the number of products to consume. It must be greater than 12 and less than 50.'
Output:PROVIDED: None +++ GENERATED: None
Input:'The number of bank accounts associated. Cannot be less than 0.'
Output:PROVIDED: None +++ GENERATED: None
Input:An [ISO 3166-1 alpha-2 country code](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) or the string `from_token`. Provide this parameter if you want to apply [Track
Relinking](https://developer.spotify.com/documentation/general/guides/track-relinking-guide/). For episodes, if a valid user access token is specified in the request header, the country associated with the user account will take priority over this parameter.
*Note: If neither market or user country are provided, the episode is considered unavailable for the client.*
Output:",None
market,0.2,256,"
Analyze the provided API parameter description and first estimate the parameter type. Then, according to the type, apply the following to determine restrictions on the parameter input:
If it is a number, determine if the description mentions minimum, maximum, or default possible values and output: ""min [minimum], max [maximum], default [default]"". 
If it's a string, word, or code, determine if the description mentions minimum or maximum possible character amounts or a default value, and output: ""minLength [minimum], maxLength [maximum], default [default]"". 
If it's an array or list, determine if the description mentions minimum or maximum possible list lengths or a default value, and output: ""minItems [minimum], maxItems [maximum], default [default]"".
If it's an object, determine if the description mentions minimum or maximum possible numbers of object properties or a default value, and output: ""minProperties [minimum], maxProperties [maximum], default [default]"".
If it is any other data type where there is a default value provided, output: ""min None, max None, default [default]"".
If you are unable to determine any minimum, maximum, or default restrictions, output ""None"". If you are able to determine only one either the minimum or maximum, output the undetermined value as ""None"".

Assume any ""
"" values in the input indicate either new lines or spaces. 

Here are some examples of inputs and expected outputs:

Input:'An idea for a project. This and 'rating' are required.'
Output:None
Input:'The maximum value is 50. If nothing is put in, default to 0.'
Output:min None, max 50, default 0
Input:'The timer counter. The value must be between 15.0 and 120.'
Output:min 15.0, max 120, default None
Input:'The input range. The smallest value possible is -120.8. The largest should be 179.652.'
Output:min -120.8, max 179.652, default None
Input:'The number of items to be investigated. The maximum is 9,999.99'
Output:min None, max 9999.99, default None
Input:'The name of the movie. The movie name cannot be shorter than 10 characters and longer than 20 characters.'
Output:minLength 10, maxLength 20, default None
Input:'The country code which can be 1-letter, 2-letter, or 3-letter.'
Output:minLength 1, maxLength 3, default None
Input:'A supplied language code that can either be 2-letter or 3-letter which is used to parse through a list of common phrases.'
Output:minLength 2, maxLength 3, default None
Input:'Search via county areas.'
Output:None
Input:'Identifies synonyms through word inputs.'
Output:None
Input:'After searching through a list of ISO country codes, input 2-letter or 3-letter codes to find their data.'
Output:minLength 2, maxLength 3, default None
Input:An [ISO 3166-1 alpha-2 country code](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) or the string `from_token`. Provide this parameter if you want to apply [Track
Relinking](https://developer.spotify.com/documentation/general/guides/track-relinking-guide/). For episodes, if a valid user access token is specified in the request header, the country associated with the user account will take priority over this parameter.
*Note: If neither market or user country are provided, the episode is considered unavailable for the client.*
Output:",None
market,0.2,256,"
Analyze the provided API parameter description and determine whether it clearly identifies the parameter's data type 
or formatting. 
The list of possible data types are as follows: string, number, integer, boolean, array, and object.
The list of format options are as follows: time, date, password, byte, binary, email, uuid, uri, url, hostname, ipv4, and ipv6. Use the types and formats available for the OpenAPI Specification. 
A list of collectionFormat types are as follows: csv, ssv, and pipes.
If the data type is an array, attempt to identify its item type. 
Output the answer as follows: ""type [type], items [item type], format [format], collectionFormat [collectionFormat]"". Output None when unable to determine any of the categories. 
For example, only output a non-None ""item type"" if the ""type"" is array.

Assume any ""
"" values in the input indicate either new lines or spaces. 

Here are some examples of inputs and expected outputs:

Input:'A space-separated list of percent grades corresponding to the student.'
Output:type array, items number, format None, collectionFormat ssv
Input:'This should contain the email of the sender.'
Output:type string, items None, format email, collectionFormat None
Input:'This value should be true if the assignment is available for regrade.'
Output:type boolean, items None, format None, collectionFormat None
Input:'A URL containing the website for evaluation.'
Output:type string, items None, format url, collectionFormat None
Input:'The date of the contest. The date must be within the last three months.'
Output:type string, items None, format date, collectionFormat None
Input:'The time that the project must be completed. Use Eastern Standard Timezone (EST).'
Output:type string, items None, format date-time, collectionFormat None
Input:'A list of region codes.'
Output:type array, items None, format None, collectionFormat None
Input:An [ISO 3166-1 alpha-2 country code](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) or the string `from_token`. Provide this parameter if you want to apply [Track
Relinking](https://developer.spotify.com/documentation/general/guides/track-relinking-guide/). For episodes, if a valid user access token is specified in the request header, the country associated with the user account will take priority over this parameter.
*Note: If neither market or user country are provided, the episode is considered unavailable for the client.*
Output:",None
market,0.2,256,"
Identify the API parameter object by the grouping of its ""name"" and ""description"". Analyze the parameter description and extract logical constraints
in the provided format. Evaluate each case and determine whether it is applicable. Strictly follow the format and make no inferences. Only consider constraints
that are strictly required. Interpret the description in the least constraining manner, and assume Case 1 unless the other cases are obvious:

Case 1: The description isn't definitive about parameter requirements. Output ""None"".
Case 2: The description states the parameter ""name"" is required. Output: ""REQUIRED: name"". 
Case 3: The description states that parameter ""name"" or another parameter ""name"" is required. Output: ""Or(name, name)""
Case 4: The description states that given a set of parameters name, name_2, . . . , name_n, zero or one can be present in the API call: Output: ""ZeroOrOne(name, name_2, ... name_n)""
Case 5: The description states that given a set of parameters name, name_2, . . . , name_n, exactly one must be present in the API call: Output: ""OnlyOne(name, name_2, ... name_n)""
Case 6: The description states that given a set of parameters name, name_2, . . . , name_n, all of them or none must be present in the API call: Output: ""AllOrNone(name, name_2, ... name_n)""
Case 7: The description states that there is a relational relationship between some parameters: Output: ""name >= name_2"", where the standard relational operators can be used
Case 8: The description states that there is an arithmetic relationship between the value of parameters: Output: ""name_1 + name_2 <= value"", where the standard arithmetic operators can be used
Case 9: The description states there is a conditional relationship between parameters: Output: ""IF name THEN name_2"", where the standard logical operators can be used
Case 10: The description states that there exists a complex relationship between parameters, you can combine rules from the grammar to express a statement: Output: ""IF name==value THEN OnlyOne(name_2 AND name_3, name_4 AND name_5);

The grammar for statements is succinctly defined as follows:

Model:
    Dependency*;
Dependency:
    RelationalDependency | ArithmeticDependency |
    ConditionalDependency | PredefinedDependency;
RelationalDependency:
    Param RelationalOperator Param;
ArithmeticDependency:
    Operation RelationalOperator DOUBLE;
Operation:
    Param OperationContinuation |
    '(' Operation ')' OperationContinuation?;
OperationContinuation:
    ArithmeticOperator (Param | Operation);
ConditionalDependency:
    'IF' Predicate 'THEN' Predicate;
Predicate:
    Clause ClauseContinuation?;
Clause:
    (Term | RelationalDependency | ArithmeticDependency
    | PredefinedDependency) | 'NOT'? '(' Predicate ')';
Term:
    'NOT'? (Param | ParamValueRelation);
Param:
    ID | '[' ID ']';
ParamValueRelation:
    Param '==' STRING('|'STRING)* |
    Param 'LIKE' PATTERN_STRING | Param '==' BOOLEAN |
    Param RelationalOperator DOUBLE;
ClauseContinuation:
    ('AND' | 'OR') Predicate;
PredefinedDependency:
    'NOT'? ('Or' | 'OnlyOne' | 'AllOrNone' |
    'ZeroOrOne') '(' Clause (',' Clause)+ ')';
RelationalOperator:
    '<' | '>' | '<=' | '>=' | '==' | '!=';
ArithmeticOperator:
    '+' | '-' | '*' | '/';

If there are multiple dependency statements, return each one on a new line. Do not include any other text. Do not create dependencies on expected API responses.
Assume any ""
"" values in the input indicate either new lines or spaces. 
Here are some examples of expected outputs:

Input:
name: text 
description: The text to be checked. This or 'data' is required.
Output:Or(text, data);
Input: 
     name: idea
     description: 'An idea for a project. This and 'rating' are required.'
Output:OnlyOne(idea AND rating);
Input:
      name: partID
      description: 'The ID of the part. If partModel is specified partID must be specified'
Output:IF partModel THEN partID;
Input:
       name: language 
       description: The language of the client, not required if the country-code is USA or CAN.
Output:IF country-code!='USA' OR country-code=='CAN' THEN language;
Input:
        name: cost
        description: The cost of the product, this - profit must be greater than 500.
Output:cost - profit > 500;
Input:An [ISO 3166-1 alpha-2 country code](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) or the string `from_token`. Provide this parameter if you want to apply [Track
Relinking](https://developer.spotify.com/documentation/general/guides/track-relinking-guide/). For episodes, if a valid user access token is specified in the request header, the country associated with the user account will take priority over this parameter.
*Note: If neither market or user country are provided, the episode is considered unavailable for the client.*
Output:",None
fields,0.2,256,"
Analyze the provided API parameter description, and extract any example values for the parameter mentioned in the description. 
Then, generate a few additional example values that correspond to, or are in the same category as the provided values.
If there are no example values provided, simply generate values corresponding to the description, and always generate values when possible.  
If generating example values is not possible, return None. Consider the following cases: 

Case 1: The description contains example values USA, CAN, ZWE: Output: ""PROVIDED: USA, CAN, ZWE +++ GENERATED: BRA, FRA, GER ...""
Case 2: The description does not explicitly mention example values: Output: ""PROVIDED: None +++ GENERATED: BRA, FRA, GER, USA ...""
Case 3: The description does not explicitly mention example values, and it is not possible to generate example values: Output: ""None""

Assume any ""
"" values in the input represent spaces or new lines. Do not output any ""
"" strings.

Here are some examples of inputs and expected outputs:
Input:'The country code associated with the country. Examples are CAD, USD, etc...'
Output:PROVIDED: CAD, USD +++ GENERATED: AFG, ALA, ALB, DZA, ASM, AND, AGO, AIA, ATA, ATG, ARG, ARM, ABW, AUS, AUT, AZE, BHS, BHR, BGD, BRB, BLR, BEL, 
BLZ, BEN, BMU, BTN, BOL, BES, BIH, BWA, BVT, BRA, IOT, BRN, BGR, BFA, BDI, CPV, KHM, CMR, CAN, CYM, CAF, TCD, 
CHL, CHN, CXR, CCK, COL, COM, COG, COD, COK, CRI, CIV, HRV, CUB, CUW, CYP, CZE, DNK, DJI, DMA, DOM, ECU, EGY, 
SLV, GNQ, ERI, EST, SWZ, ETH, FLK, FRO, FJI, FIN, FRA, GUF, PYF, ATF, GAB, GMB, GEO, DEU, GHA, GIB, GRC, GRL, 
GRD, GLP, GUM, GTM, GGY, GIN, GNB, GUY, HTI, HMD, VAT, HND, HKG, HUN, ISL, IND, IDN, IRN, IRQ, IRL, IMN, ISR, 
ITA, JAM, JPN, JEY, JOR, KAZ, KEN, KIR, PRK, KOR, KWT, KGZ, LAO, LVA, LBN, LSO, LBR, LBY, LIE, LTU, LUX, MAC, 
MDG, MWI, MYS, MDV, MLI, MLT, MHL, MTQ, MRT, MUS, MYT, MEX, FSM, MDA, MCO, MNG, MNE, MSR, MAR, MOZ, MMR, NAM, 
NRU, NPL, NLD, NCL, NZL, NIC, NER, NGA, NIU, NFK, MKD, MNP, NOR, OMN, PAK, PLW, PSE, PAN, PNG, PRY, PER, PHL, 
PCN, POL, PRT, PRI, QAT, REU, ROU, RUS, RWA, BLM, SHN, KNA, LCA, MAF, SPM, VCT, WSM, SMR, STP, SAU, SEN, SRB, 
SYC, SLE, SGP, SXM, SVK, SVN, SLB, SOM, ZAF, SGS, SSD, ESP, LKA, SDN, SUR, SJM, SWE, CHE, SYR, TWN, TJK, TZA, 
THA, TLS, TGO, TKL, TON, TTO, TUN, TUR, TKM, TCA, TUV, UGA, UKR, ARE, GBR, USA, UMI, URY, UZB, VUT, VEN, VNM, 
VGB, VIR, WLF, ESH, YEM, ZMB, ZWE
Input:'The numbers for the percent grades must be to one decimal place (such as 10.6).'
Output:PROVIDED: 10.6 +++ GENERATED: 0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0, 2.1, 
2.2, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8, 2.9, 3.0, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6, 3.7, 3.8, 3.9, 4.0, 4.1, 4.2, 4.3, 4.4, 
4.5, 4.6, 4.7, 4.8, 4.9, 5.0, 5.1, 5.2, 5.3, 10.0, 99.9, 100.0
Input:'The title of the book to be rated.'
Output:PROVIDED: None +++ GENERATED: To Kill a Mockingbird, 1984, Pride and Prejudice, The Great Gatsby, Moby-Dick, The Catcher in the Rye, Harry Potter 
and the Sorcerer's Stone, The Lord of the Rings, One Hundred Years of Solitude, Brave New World, Sapiens: A Brief 
History of Humankind, The Immortal Life of Henrietta Lacks, Thinking, Fast and Slow, The Wright Brothers, The Diary of 
a Young Girl, Educated, The Art of War, The 7 Habits of Highly Effective People, Freakonomics, Quiet: The Power of 
Introverts in a World That Can't Stop Talking, Dune, Ender's Game, Neuromancer
Input:'The value for the number of products to consume. It must be greater than 12 and less than 50.'
Output:PROVIDED: None +++ GENERATED: None
Input:'The number of bank accounts associated. Cannot be less than 0.'
Output:PROVIDED: None +++ GENERATED: None
Input:Filters for the query: a comma-separated list of the fields to return. If omitted, all fields are returned. For example, to get just the playlist''s description and URI: `fields=description,uri`. A dot separator can be used to specify non-reoccurring fields, while parentheses can be used to specify reoccurring fields within objects. For example, to get just the added date and user ID of the adder: `fields=tracks.items(added_at,added_by.id)`. Use multiple parentheses to drill down into nested objects, for example: `fields=tracks.items(track(name,href,album(name,href)))`. Fields can be excluded by prefixing them with an exclamation mark, for example: `fields=tracks.items(track(name,href,album(!name,href)))`
Output:",None
fields,0.2,256,"
Analyze the provided API parameter description and first estimate the parameter type. Then, according to the type, apply the following to determine restrictions on the parameter input:
If it is a number, determine if the description mentions minimum, maximum, or default possible values and output: ""min [minimum], max [maximum], default [default]"". 
If it's a string, word, or code, determine if the description mentions minimum or maximum possible character amounts or a default value, and output: ""minLength [minimum], maxLength [maximum], default [default]"". 
If it's an array or list, determine if the description mentions minimum or maximum possible list lengths or a default value, and output: ""minItems [minimum], maxItems [maximum], default [default]"".
If it's an object, determine if the description mentions minimum or maximum possible numbers of object properties or a default value, and output: ""minProperties [minimum], maxProperties [maximum], default [default]"".
If it is any other data type where there is a default value provided, output: ""min None, max None, default [default]"".
If you are unable to determine any minimum, maximum, or default restrictions, output ""None"". If you are able to determine only one either the minimum or maximum, output the undetermined value as ""None"".

Assume any ""
"" values in the input indicate either new lines or spaces. 

Here are some examples of inputs and expected outputs:

Input:'An idea for a project. This and 'rating' are required.'
Output:None
Input:'The maximum value is 50. If nothing is put in, default to 0.'
Output:min None, max 50, default 0
Input:'The timer counter. The value must be between 15.0 and 120.'
Output:min 15.0, max 120, default None
Input:'The input range. The smallest value possible is -120.8. The largest should be 179.652.'
Output:min -120.8, max 179.652, default None
Input:'The number of items to be investigated. The maximum is 9,999.99'
Output:min None, max 9999.99, default None
Input:'The name of the movie. The movie name cannot be shorter than 10 characters and longer than 20 characters.'
Output:minLength 10, maxLength 20, default None
Input:'The country code which can be 1-letter, 2-letter, or 3-letter.'
Output:minLength 1, maxLength 3, default None
Input:'A supplied language code that can either be 2-letter or 3-letter which is used to parse through a list of common phrases.'
Output:minLength 2, maxLength 3, default None
Input:'Search via county areas.'
Output:None
Input:'Identifies synonyms through word inputs.'
Output:None
Input:'After searching through a list of ISO country codes, input 2-letter or 3-letter codes to find their data.'
Output:minLength 2, maxLength 3, default None
Input:Filters for the query: a comma-separated list of the fields to return. If omitted, all fields are returned. For example, to get just the playlist''s description and URI: `fields=description,uri`. A dot separator can be used to specify non-reoccurring fields, while parentheses can be used to specify reoccurring fields within objects. For example, to get just the added date and user ID of the adder: `fields=tracks.items(added_at,added_by.id)`. Use multiple parentheses to drill down into nested objects, for example: `fields=tracks.items(track(name,href,album(name,href)))`. Fields can be excluded by prefixing them with an exclamation mark, for example: `fields=tracks.items(track(name,href,album(!name,href)))`
Output:",None
fields,0.2,256,"
Analyze the provided API parameter description and determine whether it clearly identifies the parameter's data type 
or formatting. 
The list of possible data types are as follows: string, number, integer, boolean, array, and object.
The list of format options are as follows: time, date, password, byte, binary, email, uuid, uri, url, hostname, ipv4, and ipv6. Use the types and formats available for the OpenAPI Specification. 
A list of collectionFormat types are as follows: csv, ssv, and pipes.
If the data type is an array, attempt to identify its item type. 
Output the answer as follows: ""type [type], items [item type], format [format], collectionFormat [collectionFormat]"". Output None when unable to determine any of the categories. 
For example, only output a non-None ""item type"" if the ""type"" is array.

Assume any ""
"" values in the input indicate either new lines or spaces. 

Here are some examples of inputs and expected outputs:

Input:'A space-separated list of percent grades corresponding to the student.'
Output:type array, items number, format None, collectionFormat ssv
Input:'This should contain the email of the sender.'
Output:type string, items None, format email, collectionFormat None
Input:'This value should be true if the assignment is available for regrade.'
Output:type boolean, items None, format None, collectionFormat None
Input:'A URL containing the website for evaluation.'
Output:type string, items None, format url, collectionFormat None
Input:'The date of the contest. The date must be within the last three months.'
Output:type string, items None, format date, collectionFormat None
Input:'The time that the project must be completed. Use Eastern Standard Timezone (EST).'
Output:type string, items None, format date-time, collectionFormat None
Input:'A list of region codes.'
Output:type array, items None, format None, collectionFormat None
Input:Filters for the query: a comma-separated list of the fields to return. If omitted, all fields are returned. For example, to get just the playlist''s description and URI: `fields=description,uri`. A dot separator can be used to specify non-reoccurring fields, while parentheses can be used to specify reoccurring fields within objects. For example, to get just the added date and user ID of the adder: `fields=tracks.items(added_at,added_by.id)`. Use multiple parentheses to drill down into nested objects, for example: `fields=tracks.items(track(name,href,album(name,href)))`. Fields can be excluded by prefixing them with an exclamation mark, for example: `fields=tracks.items(track(name,href,album(!name,href)))`
Output:",None
fields,0.2,256,"
Identify the API parameter object by the grouping of its ""name"" and ""description"". Analyze the parameter description and extract logical constraints
in the provided format. Evaluate each case and determine whether it is applicable. Strictly follow the format and make no inferences. Only consider constraints
that are strictly required. Interpret the description in the least constraining manner, and assume Case 1 unless the other cases are obvious:

Case 1: The description isn't definitive about parameter requirements. Output ""None"".
Case 2: The description states the parameter ""name"" is required. Output: ""REQUIRED: name"". 
Case 3: The description states that parameter ""name"" or another parameter ""name"" is required. Output: ""Or(name, name)""
Case 4: The description states that given a set of parameters name, name_2, . . . , name_n, zero or one can be present in the API call: Output: ""ZeroOrOne(name, name_2, ... name_n)""
Case 5: The description states that given a set of parameters name, name_2, . . . , name_n, exactly one must be present in the API call: Output: ""OnlyOne(name, name_2, ... name_n)""
Case 6: The description states that given a set of parameters name, name_2, . . . , name_n, all of them or none must be present in the API call: Output: ""AllOrNone(name, name_2, ... name_n)""
Case 7: The description states that there is a relational relationship between some parameters: Output: ""name >= name_2"", where the standard relational operators can be used
Case 8: The description states that there is an arithmetic relationship between the value of parameters: Output: ""name_1 + name_2 <= value"", where the standard arithmetic operators can be used
Case 9: The description states there is a conditional relationship between parameters: Output: ""IF name THEN name_2"", where the standard logical operators can be used
Case 10: The description states that there exists a complex relationship between parameters, you can combine rules from the grammar to express a statement: Output: ""IF name==value THEN OnlyOne(name_2 AND name_3, name_4 AND name_5);

The grammar for statements is succinctly defined as follows:

Model:
    Dependency*;
Dependency:
    RelationalDependency | ArithmeticDependency |
    ConditionalDependency | PredefinedDependency;
RelationalDependency:
    Param RelationalOperator Param;
ArithmeticDependency:
    Operation RelationalOperator DOUBLE;
Operation:
    Param OperationContinuation |
    '(' Operation ')' OperationContinuation?;
OperationContinuation:
    ArithmeticOperator (Param | Operation);
ConditionalDependency:
    'IF' Predicate 'THEN' Predicate;
Predicate:
    Clause ClauseContinuation?;
Clause:
    (Term | RelationalDependency | ArithmeticDependency
    | PredefinedDependency) | 'NOT'? '(' Predicate ')';
Term:
    'NOT'? (Param | ParamValueRelation);
Param:
    ID | '[' ID ']';
ParamValueRelation:
    Param '==' STRING('|'STRING)* |
    Param 'LIKE' PATTERN_STRING | Param '==' BOOLEAN |
    Param RelationalOperator DOUBLE;
ClauseContinuation:
    ('AND' | 'OR') Predicate;
PredefinedDependency:
    'NOT'? ('Or' | 'OnlyOne' | 'AllOrNone' |
    'ZeroOrOne') '(' Clause (',' Clause)+ ')';
RelationalOperator:
    '<' | '>' | '<=' | '>=' | '==' | '!=';
ArithmeticOperator:
    '+' | '-' | '*' | '/';

If there are multiple dependency statements, return each one on a new line. Do not include any other text. Do not create dependencies on expected API responses.
Assume any ""
"" values in the input indicate either new lines or spaces. 
Here are some examples of expected outputs:

Input:
name: text 
description: The text to be checked. This or 'data' is required.
Output:Or(text, data);
Input: 
     name: idea
     description: 'An idea for a project. This and 'rating' are required.'
Output:OnlyOne(idea AND rating);
Input:
      name: partID
      description: 'The ID of the part. If partModel is specified partID must be specified'
Output:IF partModel THEN partID;
Input:
       name: language 
       description: The language of the client, not required if the country-code is USA or CAN.
Output:IF country-code!='USA' OR country-code=='CAN' THEN language;
Input:
        name: cost
        description: The cost of the product, this - profit must be greater than 500.
Output:cost - profit > 500;
Input:Filters for the query: a comma-separated list of the fields to return. If omitted, all fields are returned. For example, to get just the playlist''s description and URI: `fields=description,uri`. A dot separator can be used to specify non-reoccurring fields, while parentheses can be used to specify reoccurring fields within objects. For example, to get just the added date and user ID of the adder: `fields=tracks.items(added_at,added_by.id)`. Use multiple parentheses to drill down into nested objects, for example: `fields=tracks.items(track(name,href,album(name,href)))`. Fields can be excluded by prefixing them with an exclamation mark, for example: `fields=tracks.items(track(name,href,album(!name,href)))`
Output:",None
additional_types,0.2,256,"
Analyze the provided API parameter description, and extract any example values for the parameter mentioned in the description. 
Then, generate a few additional example values that correspond to, or are in the same category as the provided values.
If there are no example values provided, simply generate values corresponding to the description, and always generate values when possible.  
If generating example values is not possible, return None. Consider the following cases: 

Case 1: The description contains example values USA, CAN, ZWE: Output: ""PROVIDED: USA, CAN, ZWE +++ GENERATED: BRA, FRA, GER ...""
Case 2: The description does not explicitly mention example values: Output: ""PROVIDED: None +++ GENERATED: BRA, FRA, GER, USA ...""
Case 3: The description does not explicitly mention example values, and it is not possible to generate example values: Output: ""None""

Assume any ""
"" values in the input represent spaces or new lines. Do not output any ""
"" strings.

Here are some examples of inputs and expected outputs:
Input:'The country code associated with the country. Examples are CAD, USD, etc...'
Output:PROVIDED: CAD, USD +++ GENERATED: AFG, ALA, ALB, DZA, ASM, AND, AGO, AIA, ATA, ATG, ARG, ARM, ABW, AUS, AUT, AZE, BHS, BHR, BGD, BRB, BLR, BEL, 
BLZ, BEN, BMU, BTN, BOL, BES, BIH, BWA, BVT, BRA, IOT, BRN, BGR, BFA, BDI, CPV, KHM, CMR, CAN, CYM, CAF, TCD, 
CHL, CHN, CXR, CCK, COL, COM, COG, COD, COK, CRI, CIV, HRV, CUB, CUW, CYP, CZE, DNK, DJI, DMA, DOM, ECU, EGY, 
SLV, GNQ, ERI, EST, SWZ, ETH, FLK, FRO, FJI, FIN, FRA, GUF, PYF, ATF, GAB, GMB, GEO, DEU, GHA, GIB, GRC, GRL, 
GRD, GLP, GUM, GTM, GGY, GIN, GNB, GUY, HTI, HMD, VAT, HND, HKG, HUN, ISL, IND, IDN, IRN, IRQ, IRL, IMN, ISR, 
ITA, JAM, JPN, JEY, JOR, KAZ, KEN, KIR, PRK, KOR, KWT, KGZ, LAO, LVA, LBN, LSO, LBR, LBY, LIE, LTU, LUX, MAC, 
MDG, MWI, MYS, MDV, MLI, MLT, MHL, MTQ, MRT, MUS, MYT, MEX, FSM, MDA, MCO, MNG, MNE, MSR, MAR, MOZ, MMR, NAM, 
NRU, NPL, NLD, NCL, NZL, NIC, NER, NGA, NIU, NFK, MKD, MNP, NOR, OMN, PAK, PLW, PSE, PAN, PNG, PRY, PER, PHL, 
PCN, POL, PRT, PRI, QAT, REU, ROU, RUS, RWA, BLM, SHN, KNA, LCA, MAF, SPM, VCT, WSM, SMR, STP, SAU, SEN, SRB, 
SYC, SLE, SGP, SXM, SVK, SVN, SLB, SOM, ZAF, SGS, SSD, ESP, LKA, SDN, SUR, SJM, SWE, CHE, SYR, TWN, TJK, TZA, 
THA, TLS, TGO, TKL, TON, TTO, TUN, TUR, TKM, TCA, TUV, UGA, UKR, ARE, GBR, USA, UMI, URY, UZB, VUT, VEN, VNM, 
VGB, VIR, WLF, ESH, YEM, ZMB, ZWE
Input:'The numbers for the percent grades must be to one decimal place (such as 10.6).'
Output:PROVIDED: 10.6 +++ GENERATED: 0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0, 2.1, 
2.2, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8, 2.9, 3.0, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6, 3.7, 3.8, 3.9, 4.0, 4.1, 4.2, 4.3, 4.4, 
4.5, 4.6, 4.7, 4.8, 4.9, 5.0, 5.1, 5.2, 5.3, 10.0, 99.9, 100.0
Input:'The title of the book to be rated.'
Output:PROVIDED: None +++ GENERATED: To Kill a Mockingbird, 1984, Pride and Prejudice, The Great Gatsby, Moby-Dick, The Catcher in the Rye, Harry Potter 
and the Sorcerer's Stone, The Lord of the Rings, One Hundred Years of Solitude, Brave New World, Sapiens: A Brief 
History of Humankind, The Immortal Life of Henrietta Lacks, Thinking, Fast and Slow, The Wright Brothers, The Diary of 
a Young Girl, Educated, The Art of War, The 7 Habits of Highly Effective People, Freakonomics, Quiet: The Power of 
Introverts in a World That Can't Stop Talking, Dune, Ender's Game, Neuromancer
Input:'The value for the number of products to consume. It must be greater than 12 and less than 50.'
Output:PROVIDED: None +++ GENERATED: None
Input:'The number of bank accounts associated. Cannot be less than 0.'
Output:PROVIDED: None +++ GENERATED: None
Input:A comma-separated list of item types that your client supports besides the default `track` type. Valid types are: `track` and `episode`. **Note** : This parameter was introduced to allow existing clients to maintain their current behaviour and might be deprecated in the future. In addition to providing this parameter, make sure that your client properly handles cases of new types in the future by checking against the `type` field of each object.
Output:",None
additional_types,0.2,256,"
Analyze the provided API parameter description and first estimate the parameter type. Then, according to the type, apply the following to determine restrictions on the parameter input:
If it is a number, determine if the description mentions minimum, maximum, or default possible values and output: ""min [minimum], max [maximum], default [default]"". 
If it's a string, word, or code, determine if the description mentions minimum or maximum possible character amounts or a default value, and output: ""minLength [minimum], maxLength [maximum], default [default]"". 
If it's an array or list, determine if the description mentions minimum or maximum possible list lengths or a default value, and output: ""minItems [minimum], maxItems [maximum], default [default]"".
If it's an object, determine if the description mentions minimum or maximum possible numbers of object properties or a default value, and output: ""minProperties [minimum], maxProperties [maximum], default [default]"".
If it is any other data type where there is a default value provided, output: ""min None, max None, default [default]"".
If you are unable to determine any minimum, maximum, or default restrictions, output ""None"". If you are able to determine only one either the minimum or maximum, output the undetermined value as ""None"".

Assume any ""
"" values in the input indicate either new lines or spaces. 

Here are some examples of inputs and expected outputs:

Input:'An idea for a project. This and 'rating' are required.'
Output:None
Input:'The maximum value is 50. If nothing is put in, default to 0.'
Output:min None, max 50, default 0
Input:'The timer counter. The value must be between 15.0 and 120.'
Output:min 15.0, max 120, default None
Input:'The input range. The smallest value possible is -120.8. The largest should be 179.652.'
Output:min -120.8, max 179.652, default None
Input:'The number of items to be investigated. The maximum is 9,999.99'
Output:min None, max 9999.99, default None
Input:'The name of the movie. The movie name cannot be shorter than 10 characters and longer than 20 characters.'
Output:minLength 10, maxLength 20, default None
Input:'The country code which can be 1-letter, 2-letter, or 3-letter.'
Output:minLength 1, maxLength 3, default None
Input:'A supplied language code that can either be 2-letter or 3-letter which is used to parse through a list of common phrases.'
Output:minLength 2, maxLength 3, default None
Input:'Search via county areas.'
Output:None
Input:'Identifies synonyms through word inputs.'
Output:None
Input:'After searching through a list of ISO country codes, input 2-letter or 3-letter codes to find their data.'
Output:minLength 2, maxLength 3, default None
Input:A comma-separated list of item types that your client supports besides the default `track` type. Valid types are: `track` and `episode`. **Note** : This parameter was introduced to allow existing clients to maintain their current behaviour and might be deprecated in the future. In addition to providing this parameter, make sure that your client properly handles cases of new types in the future by checking against the `type` field of each object.
Output:",None
additional_types,0.2,256,"
Analyze the provided API parameter description and determine whether it clearly identifies the parameter's data type 
or formatting. 
The list of possible data types are as follows: string, number, integer, boolean, array, and object.
The list of format options are as follows: time, date, password, byte, binary, email, uuid, uri, url, hostname, ipv4, and ipv6. Use the types and formats available for the OpenAPI Specification. 
A list of collectionFormat types are as follows: csv, ssv, and pipes.
If the data type is an array, attempt to identify its item type. 
Output the answer as follows: ""type [type], items [item type], format [format], collectionFormat [collectionFormat]"". Output None when unable to determine any of the categories. 
For example, only output a non-None ""item type"" if the ""type"" is array.

Assume any ""
"" values in the input indicate either new lines or spaces. 

Here are some examples of inputs and expected outputs:

Input:'A space-separated list of percent grades corresponding to the student.'
Output:type array, items number, format None, collectionFormat ssv
Input:'This should contain the email of the sender.'
Output:type string, items None, format email, collectionFormat None
Input:'This value should be true if the assignment is available for regrade.'
Output:type boolean, items None, format None, collectionFormat None
Input:'A URL containing the website for evaluation.'
Output:type string, items None, format url, collectionFormat None
Input:'The date of the contest. The date must be within the last three months.'
Output:type string, items None, format date, collectionFormat None
Input:'The time that the project must be completed. Use Eastern Standard Timezone (EST).'
Output:type string, items None, format date-time, collectionFormat None
Input:'A list of region codes.'
Output:type array, items None, format None, collectionFormat None
Input:A comma-separated list of item types that your client supports besides the default `track` type. Valid types are: `track` and `episode`. **Note** : This parameter was introduced to allow existing clients to maintain their current behaviour and might be deprecated in the future. In addition to providing this parameter, make sure that your client properly handles cases of new types in the future by checking against the `type` field of each object.
Output:",None
additional_types,0.2,256,"
Identify the API parameter object by the grouping of its ""name"" and ""description"". Analyze the parameter description and extract logical constraints
in the provided format. Evaluate each case and determine whether it is applicable. Strictly follow the format and make no inferences. Only consider constraints
that are strictly required. Interpret the description in the least constraining manner, and assume Case 1 unless the other cases are obvious:

Case 1: The description isn't definitive about parameter requirements. Output ""None"".
Case 2: The description states the parameter ""name"" is required. Output: ""REQUIRED: name"". 
Case 3: The description states that parameter ""name"" or another parameter ""name"" is required. Output: ""Or(name, name)""
Case 4: The description states that given a set of parameters name, name_2, . . . , name_n, zero or one can be present in the API call: Output: ""ZeroOrOne(name, name_2, ... name_n)""
Case 5: The description states that given a set of parameters name, name_2, . . . , name_n, exactly one must be present in the API call: Output: ""OnlyOne(name, name_2, ... name_n)""
Case 6: The description states that given a set of parameters name, name_2, . . . , name_n, all of them or none must be present in the API call: Output: ""AllOrNone(name, name_2, ... name_n)""
Case 7: The description states that there is a relational relationship between some parameters: Output: ""name >= name_2"", where the standard relational operators can be used
Case 8: The description states that there is an arithmetic relationship between the value of parameters: Output: ""name_1 + name_2 <= value"", where the standard arithmetic operators can be used
Case 9: The description states there is a conditional relationship between parameters: Output: ""IF name THEN name_2"", where the standard logical operators can be used
Case 10: The description states that there exists a complex relationship between parameters, you can combine rules from the grammar to express a statement: Output: ""IF name==value THEN OnlyOne(name_2 AND name_3, name_4 AND name_5);

The grammar for statements is succinctly defined as follows:

Model:
    Dependency*;
Dependency:
    RelationalDependency | ArithmeticDependency |
    ConditionalDependency | PredefinedDependency;
RelationalDependency:
    Param RelationalOperator Param;
ArithmeticDependency:
    Operation RelationalOperator DOUBLE;
Operation:
    Param OperationContinuation |
    '(' Operation ')' OperationContinuation?;
OperationContinuation:
    ArithmeticOperator (Param | Operation);
ConditionalDependency:
    'IF' Predicate 'THEN' Predicate;
Predicate:
    Clause ClauseContinuation?;
Clause:
    (Term | RelationalDependency | ArithmeticDependency
    | PredefinedDependency) | 'NOT'? '(' Predicate ')';
Term:
    'NOT'? (Param | ParamValueRelation);
Param:
    ID | '[' ID ']';
ParamValueRelation:
    Param '==' STRING('|'STRING)* |
    Param 'LIKE' PATTERN_STRING | Param '==' BOOLEAN |
    Param RelationalOperator DOUBLE;
ClauseContinuation:
    ('AND' | 'OR') Predicate;
PredefinedDependency:
    'NOT'? ('Or' | 'OnlyOne' | 'AllOrNone' |
    'ZeroOrOne') '(' Clause (',' Clause)+ ')';
RelationalOperator:
    '<' | '>' | '<=' | '>=' | '==' | '!=';
ArithmeticOperator:
    '+' | '-' | '*' | '/';

If there are multiple dependency statements, return each one on a new line. Do not include any other text. Do not create dependencies on expected API responses.
Assume any ""
"" values in the input indicate either new lines or spaces. 
Here are some examples of expected outputs:

Input:
name: text 
description: The text to be checked. This or 'data' is required.
Output:Or(text, data);
Input: 
     name: idea
     description: 'An idea for a project. This and 'rating' are required.'
Output:OnlyOne(idea AND rating);
Input:
      name: partID
      description: 'The ID of the part. If partModel is specified partID must be specified'
Output:IF partModel THEN partID;
Input:
       name: language 
       description: The language of the client, not required if the country-code is USA or CAN.
Output:IF country-code!='USA' OR country-code=='CAN' THEN language;
Input:
        name: cost
        description: The cost of the product, this - profit must be greater than 500.
Output:cost - profit > 500;
Input:A comma-separated list of item types that your client supports besides the default `track` type. Valid types are: `track` and `episode`. **Note** : This parameter was introduced to allow existing clients to maintain their current behaviour and might be deprecated in the future. In addition to providing this parameter, make sure that your client properly handles cases of new types in the future by checking against the `type` field of each object.
Output:",None
playlist_id,0.2,256,"
Analyze the provided API parameter description, and extract any example values for the parameter mentioned in the description. 
Then, generate a few additional example values that correspond to, or are in the same category as the provided values.
If there are no example values provided, simply generate values corresponding to the description, and always generate values when possible.  
If generating example values is not possible, return None. Consider the following cases: 

Case 1: The description contains example values USA, CAN, ZWE: Output: ""PROVIDED: USA, CAN, ZWE +++ GENERATED: BRA, FRA, GER ...""
Case 2: The description does not explicitly mention example values: Output: ""PROVIDED: None +++ GENERATED: BRA, FRA, GER, USA ...""
Case 3: The description does not explicitly mention example values, and it is not possible to generate example values: Output: ""None""

Assume any ""
"" values in the input represent spaces or new lines. Do not output any ""
"" strings.

Here are some examples of inputs and expected outputs:
Input:'The country code associated with the country. Examples are CAD, USD, etc...'
Output:PROVIDED: CAD, USD +++ GENERATED: AFG, ALA, ALB, DZA, ASM, AND, AGO, AIA, ATA, ATG, ARG, ARM, ABW, AUS, AUT, AZE, BHS, BHR, BGD, BRB, BLR, BEL, 
BLZ, BEN, BMU, BTN, BOL, BES, BIH, BWA, BVT, BRA, IOT, BRN, BGR, BFA, BDI, CPV, KHM, CMR, CAN, CYM, CAF, TCD, 
CHL, CHN, CXR, CCK, COL, COM, COG, COD, COK, CRI, CIV, HRV, CUB, CUW, CYP, CZE, DNK, DJI, DMA, DOM, ECU, EGY, 
SLV, GNQ, ERI, EST, SWZ, ETH, FLK, FRO, FJI, FIN, FRA, GUF, PYF, ATF, GAB, GMB, GEO, DEU, GHA, GIB, GRC, GRL, 
GRD, GLP, GUM, GTM, GGY, GIN, GNB, GUY, HTI, HMD, VAT, HND, HKG, HUN, ISL, IND, IDN, IRN, IRQ, IRL, IMN, ISR, 
ITA, JAM, JPN, JEY, JOR, KAZ, KEN, KIR, PRK, KOR, KWT, KGZ, LAO, LVA, LBN, LSO, LBR, LBY, LIE, LTU, LUX, MAC, 
MDG, MWI, MYS, MDV, MLI, MLT, MHL, MTQ, MRT, MUS, MYT, MEX, FSM, MDA, MCO, MNG, MNE, MSR, MAR, MOZ, MMR, NAM, 
NRU, NPL, NLD, NCL, NZL, NIC, NER, NGA, NIU, NFK, MKD, MNP, NOR, OMN, PAK, PLW, PSE, PAN, PNG, PRY, PER, PHL, 
PCN, POL, PRT, PRI, QAT, REU, ROU, RUS, RWA, BLM, SHN, KNA, LCA, MAF, SPM, VCT, WSM, SMR, STP, SAU, SEN, SRB, 
SYC, SLE, SGP, SXM, SVK, SVN, SLB, SOM, ZAF, SGS, SSD, ESP, LKA, SDN, SUR, SJM, SWE, CHE, SYR, TWN, TJK, TZA, 
THA, TLS, TGO, TKL, TON, TTO, TUN, TUR, TKM, TCA, TUV, UGA, UKR, ARE, GBR, USA, UMI, URY, UZB, VUT, VEN, VNM, 
VGB, VIR, WLF, ESH, YEM, ZMB, ZWE
Input:'The numbers for the percent grades must be to one decimal place (such as 10.6).'
Output:PROVIDED: 10.6 +++ GENERATED: 0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0, 2.1, 
2.2, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8, 2.9, 3.0, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6, 3.7, 3.8, 3.9, 4.0, 4.1, 4.2, 4.3, 4.4, 
4.5, 4.6, 4.7, 4.8, 4.9, 5.0, 5.1, 5.2, 5.3, 10.0, 99.9, 100.0
Input:'The title of the book to be rated.'
Output:PROVIDED: None +++ GENERATED: To Kill a Mockingbird, 1984, Pride and Prejudice, The Great Gatsby, Moby-Dick, The Catcher in the Rye, Harry Potter 
and the Sorcerer's Stone, The Lord of the Rings, One Hundred Years of Solitude, Brave New World, Sapiens: A Brief 
History of Humankind, The Immortal Life of Henrietta Lacks, Thinking, Fast and Slow, The Wright Brothers, The Diary of 
a Young Girl, Educated, The Art of War, The 7 Habits of Highly Effective People, Freakonomics, Quiet: The Power of 
Introverts in a World That Can't Stop Talking, Dune, Ender's Game, Neuromancer
Input:'The value for the number of products to consume. It must be greater than 12 and less than 50.'
Output:PROVIDED: None +++ GENERATED: None
Input:'The number of bank accounts associated. Cannot be less than 0.'
Output:PROVIDED: None +++ GENERATED: None
Input:The [Spotify ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for the playlist.
Output:",None
playlist_id,0.2,256,"
Analyze the provided API parameter description and first estimate the parameter type. Then, according to the type, apply the following to determine restrictions on the parameter input:
If it is a number, determine if the description mentions minimum, maximum, or default possible values and output: ""min [minimum], max [maximum], default [default]"". 
If it's a string, word, or code, determine if the description mentions minimum or maximum possible character amounts or a default value, and output: ""minLength [minimum], maxLength [maximum], default [default]"". 
If it's an array or list, determine if the description mentions minimum or maximum possible list lengths or a default value, and output: ""minItems [minimum], maxItems [maximum], default [default]"".
If it's an object, determine if the description mentions minimum or maximum possible numbers of object properties or a default value, and output: ""minProperties [minimum], maxProperties [maximum], default [default]"".
If it is any other data type where there is a default value provided, output: ""min None, max None, default [default]"".
If you are unable to determine any minimum, maximum, or default restrictions, output ""None"". If you are able to determine only one either the minimum or maximum, output the undetermined value as ""None"".

Assume any ""
"" values in the input indicate either new lines or spaces. 

Here are some examples of inputs and expected outputs:

Input:'An idea for a project. This and 'rating' are required.'
Output:None
Input:'The maximum value is 50. If nothing is put in, default to 0.'
Output:min None, max 50, default 0
Input:'The timer counter. The value must be between 15.0 and 120.'
Output:min 15.0, max 120, default None
Input:'The input range. The smallest value possible is -120.8. The largest should be 179.652.'
Output:min -120.8, max 179.652, default None
Input:'The number of items to be investigated. The maximum is 9,999.99'
Output:min None, max 9999.99, default None
Input:'The name of the movie. The movie name cannot be shorter than 10 characters and longer than 20 characters.'
Output:minLength 10, maxLength 20, default None
Input:'The country code which can be 1-letter, 2-letter, or 3-letter.'
Output:minLength 1, maxLength 3, default None
Input:'A supplied language code that can either be 2-letter or 3-letter which is used to parse through a list of common phrases.'
Output:minLength 2, maxLength 3, default None
Input:'Search via county areas.'
Output:None
Input:'Identifies synonyms through word inputs.'
Output:None
Input:'After searching through a list of ISO country codes, input 2-letter or 3-letter codes to find their data.'
Output:minLength 2, maxLength 3, default None
Input:The [Spotify ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for the playlist.
Output:",None
playlist_id,0.2,256,"
Analyze the provided API parameter description and determine whether it clearly identifies the parameter's data type 
or formatting. 
The list of possible data types are as follows: string, number, integer, boolean, array, and object.
The list of format options are as follows: time, date, password, byte, binary, email, uuid, uri, url, hostname, ipv4, and ipv6. Use the types and formats available for the OpenAPI Specification. 
A list of collectionFormat types are as follows: csv, ssv, and pipes.
If the data type is an array, attempt to identify its item type. 
Output the answer as follows: ""type [type], items [item type], format [format], collectionFormat [collectionFormat]"". Output None when unable to determine any of the categories. 
For example, only output a non-None ""item type"" if the ""type"" is array.

Assume any ""
"" values in the input indicate either new lines or spaces. 

Here are some examples of inputs and expected outputs:

Input:'A space-separated list of percent grades corresponding to the student.'
Output:type array, items number, format None, collectionFormat ssv
Input:'This should contain the email of the sender.'
Output:type string, items None, format email, collectionFormat None
Input:'This value should be true if the assignment is available for regrade.'
Output:type boolean, items None, format None, collectionFormat None
Input:'A URL containing the website for evaluation.'
Output:type string, items None, format url, collectionFormat None
Input:'The date of the contest. The date must be within the last three months.'
Output:type string, items None, format date, collectionFormat None
Input:'The time that the project must be completed. Use Eastern Standard Timezone (EST).'
Output:type string, items None, format date-time, collectionFormat None
Input:'A list of region codes.'
Output:type array, items None, format None, collectionFormat None
Input:The [Spotify ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for the playlist.
Output:",None
playlist_id,0.2,256,"
Identify the API parameter object by the grouping of its ""name"" and ""description"". Analyze the parameter description and extract logical constraints
in the provided format. Evaluate each case and determine whether it is applicable. Strictly follow the format and make no inferences. Only consider constraints
that are strictly required. Interpret the description in the least constraining manner, and assume Case 1 unless the other cases are obvious:

Case 1: The description isn't definitive about parameter requirements. Output ""None"".
Case 2: The description states the parameter ""name"" is required. Output: ""REQUIRED: name"". 
Case 3: The description states that parameter ""name"" or another parameter ""name"" is required. Output: ""Or(name, name)""
Case 4: The description states that given a set of parameters name, name_2, . . . , name_n, zero or one can be present in the API call: Output: ""ZeroOrOne(name, name_2, ... name_n)""
Case 5: The description states that given a set of parameters name, name_2, . . . , name_n, exactly one must be present in the API call: Output: ""OnlyOne(name, name_2, ... name_n)""
Case 6: The description states that given a set of parameters name, name_2, . . . , name_n, all of them or none must be present in the API call: Output: ""AllOrNone(name, name_2, ... name_n)""
Case 7: The description states that there is a relational relationship between some parameters: Output: ""name >= name_2"", where the standard relational operators can be used
Case 8: The description states that there is an arithmetic relationship between the value of parameters: Output: ""name_1 + name_2 <= value"", where the standard arithmetic operators can be used
Case 9: The description states there is a conditional relationship between parameters: Output: ""IF name THEN name_2"", where the standard logical operators can be used
Case 10: The description states that there exists a complex relationship between parameters, you can combine rules from the grammar to express a statement: Output: ""IF name==value THEN OnlyOne(name_2 AND name_3, name_4 AND name_5);

The grammar for statements is succinctly defined as follows:

Model:
    Dependency*;
Dependency:
    RelationalDependency | ArithmeticDependency |
    ConditionalDependency | PredefinedDependency;
RelationalDependency:
    Param RelationalOperator Param;
ArithmeticDependency:
    Operation RelationalOperator DOUBLE;
Operation:
    Param OperationContinuation |
    '(' Operation ')' OperationContinuation?;
OperationContinuation:
    ArithmeticOperator (Param | Operation);
ConditionalDependency:
    'IF' Predicate 'THEN' Predicate;
Predicate:
    Clause ClauseContinuation?;
Clause:
    (Term | RelationalDependency | ArithmeticDependency
    | PredefinedDependency) | 'NOT'? '(' Predicate ')';
Term:
    'NOT'? (Param | ParamValueRelation);
Param:
    ID | '[' ID ']';
ParamValueRelation:
    Param '==' STRING('|'STRING)* |
    Param 'LIKE' PATTERN_STRING | Param '==' BOOLEAN |
    Param RelationalOperator DOUBLE;
ClauseContinuation:
    ('AND' | 'OR') Predicate;
PredefinedDependency:
    'NOT'? ('Or' | 'OnlyOne' | 'AllOrNone' |
    'ZeroOrOne') '(' Clause (',' Clause)+ ')';
RelationalOperator:
    '<' | '>' | '<=' | '>=' | '==' | '!=';
ArithmeticOperator:
    '+' | '-' | '*' | '/';

If there are multiple dependency statements, return each one on a new line. Do not include any other text. Do not create dependencies on expected API responses.
Assume any ""
"" values in the input indicate either new lines or spaces. 
Here are some examples of expected outputs:

Input:
name: text 
description: The text to be checked. This or 'data' is required.
Output:Or(text, data);
Input: 
     name: idea
     description: 'An idea for a project. This and 'rating' are required.'
Output:OnlyOne(idea AND rating);
Input:
      name: partID
      description: 'The ID of the part. If partModel is specified partID must be specified'
Output:IF partModel THEN partID;
Input:
       name: language 
       description: The language of the client, not required if the country-code is USA or CAN.
Output:IF country-code!='USA' OR country-code=='CAN' THEN language;
Input:
        name: cost
        description: The cost of the product, this - profit must be greater than 500.
Output:cost - profit > 500;
Input:The [Spotify ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for the playlist.
Output:",None
collaborative,0.2,256,"
Analyze the provided API parameter description, and extract any example values for the parameter mentioned in the description. 
Then, generate a few additional example values that correspond to, or are in the same category as the provided values.
If there are no example values provided, simply generate values corresponding to the description, and always generate values when possible.  
If generating example values is not possible, return None. Consider the following cases: 

Case 1: The description contains example values USA, CAN, ZWE: Output: ""PROVIDED: USA, CAN, ZWE +++ GENERATED: BRA, FRA, GER ...""
Case 2: The description does not explicitly mention example values: Output: ""PROVIDED: None +++ GENERATED: BRA, FRA, GER, USA ...""
Case 3: The description does not explicitly mention example values, and it is not possible to generate example values: Output: ""None""

Assume any ""
"" values in the input represent spaces or new lines. Do not output any ""
"" strings.

Here are some examples of inputs and expected outputs:
Input:'The country code associated with the country. Examples are CAD, USD, etc...'
Output:PROVIDED: CAD, USD +++ GENERATED: AFG, ALA, ALB, DZA, ASM, AND, AGO, AIA, ATA, ATG, ARG, ARM, ABW, AUS, AUT, AZE, BHS, BHR, BGD, BRB, BLR, BEL, 
BLZ, BEN, BMU, BTN, BOL, BES, BIH, BWA, BVT, BRA, IOT, BRN, BGR, BFA, BDI, CPV, KHM, CMR, CAN, CYM, CAF, TCD, 
CHL, CHN, CXR, CCK, COL, COM, COG, COD, COK, CRI, CIV, HRV, CUB, CUW, CYP, CZE, DNK, DJI, DMA, DOM, ECU, EGY, 
SLV, GNQ, ERI, EST, SWZ, ETH, FLK, FRO, FJI, FIN, FRA, GUF, PYF, ATF, GAB, GMB, GEO, DEU, GHA, GIB, GRC, GRL, 
GRD, GLP, GUM, GTM, GGY, GIN, GNB, GUY, HTI, HMD, VAT, HND, HKG, HUN, ISL, IND, IDN, IRN, IRQ, IRL, IMN, ISR, 
ITA, JAM, JPN, JEY, JOR, KAZ, KEN, KIR, PRK, KOR, KWT, KGZ, LAO, LVA, LBN, LSO, LBR, LBY, LIE, LTU, LUX, MAC, 
MDG, MWI, MYS, MDV, MLI, MLT, MHL, MTQ, MRT, MUS, MYT, MEX, FSM, MDA, MCO, MNG, MNE, MSR, MAR, MOZ, MMR, NAM, 
NRU, NPL, NLD, NCL, NZL, NIC, NER, NGA, NIU, NFK, MKD, MNP, NOR, OMN, PAK, PLW, PSE, PAN, PNG, PRY, PER, PHL, 
PCN, POL, PRT, PRI, QAT, REU, ROU, RUS, RWA, BLM, SHN, KNA, LCA, MAF, SPM, VCT, WSM, SMR, STP, SAU, SEN, SRB, 
SYC, SLE, SGP, SXM, SVK, SVN, SLB, SOM, ZAF, SGS, SSD, ESP, LKA, SDN, SUR, SJM, SWE, CHE, SYR, TWN, TJK, TZA, 
THA, TLS, TGO, TKL, TON, TTO, TUN, TUR, TKM, TCA, TUV, UGA, UKR, ARE, GBR, USA, UMI, URY, UZB, VUT, VEN, VNM, 
VGB, VIR, WLF, ESH, YEM, ZMB, ZWE
Input:'The numbers for the percent grades must be to one decimal place (such as 10.6).'
Output:PROVIDED: 10.6 +++ GENERATED: 0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0, 2.1, 
2.2, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8, 2.9, 3.0, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6, 3.7, 3.8, 3.9, 4.0, 4.1, 4.2, 4.3, 4.4, 
4.5, 4.6, 4.7, 4.8, 4.9, 5.0, 5.1, 5.2, 5.3, 10.0, 99.9, 100.0
Input:'The title of the book to be rated.'
Output:PROVIDED: None +++ GENERATED: To Kill a Mockingbird, 1984, Pride and Prejudice, The Great Gatsby, Moby-Dick, The Catcher in the Rye, Harry Potter 
and the Sorcerer's Stone, The Lord of the Rings, One Hundred Years of Solitude, Brave New World, Sapiens: A Brief 
History of Humankind, The Immortal Life of Henrietta Lacks, Thinking, Fast and Slow, The Wright Brothers, The Diary of 
a Young Girl, Educated, The Art of War, The 7 Habits of Highly Effective People, Freakonomics, Quiet: The Power of 
Introverts in a World That Can't Stop Talking, Dune, Ender's Game, Neuromancer
Input:'The value for the number of products to consume. It must be greater than 12 and less than 50.'
Output:PROVIDED: None +++ GENERATED: None
Input:'The number of bank accounts associated. Cannot be less than 0.'
Output:PROVIDED: None +++ GENERATED: None
Input:If `true` , the playlist will become collaborative and other users will be able to modify the playlist in their Spotify client. *Note: You can only set `collaborative` to `true` on non-public playlists.*
Output:",None
collaborative,0.2,256,"
Analyze the provided API parameter description and first estimate the parameter type. Then, according to the type, apply the following to determine restrictions on the parameter input:
If it is a number, determine if the description mentions minimum, maximum, or default possible values and output: ""min [minimum], max [maximum], default [default]"". 
If it's a string, word, or code, determine if the description mentions minimum or maximum possible character amounts or a default value, and output: ""minLength [minimum], maxLength [maximum], default [default]"". 
If it's an array or list, determine if the description mentions minimum or maximum possible list lengths or a default value, and output: ""minItems [minimum], maxItems [maximum], default [default]"".
If it's an object, determine if the description mentions minimum or maximum possible numbers of object properties or a default value, and output: ""minProperties [minimum], maxProperties [maximum], default [default]"".
If it is any other data type where there is a default value provided, output: ""min None, max None, default [default]"".
If you are unable to determine any minimum, maximum, or default restrictions, output ""None"". If you are able to determine only one either the minimum or maximum, output the undetermined value as ""None"".

Assume any ""
"" values in the input indicate either new lines or spaces. 

Here are some examples of inputs and expected outputs:

Input:'An idea for a project. This and 'rating' are required.'
Output:None
Input:'The maximum value is 50. If nothing is put in, default to 0.'
Output:min None, max 50, default 0
Input:'The timer counter. The value must be between 15.0 and 120.'
Output:min 15.0, max 120, default None
Input:'The input range. The smallest value possible is -120.8. The largest should be 179.652.'
Output:min -120.8, max 179.652, default None
Input:'The number of items to be investigated. The maximum is 9,999.99'
Output:min None, max 9999.99, default None
Input:'The name of the movie. The movie name cannot be shorter than 10 characters and longer than 20 characters.'
Output:minLength 10, maxLength 20, default None
Input:'The country code which can be 1-letter, 2-letter, or 3-letter.'
Output:minLength 1, maxLength 3, default None
Input:'A supplied language code that can either be 2-letter or 3-letter which is used to parse through a list of common phrases.'
Output:minLength 2, maxLength 3, default None
Input:'Search via county areas.'
Output:None
Input:'Identifies synonyms through word inputs.'
Output:None
Input:'After searching through a list of ISO country codes, input 2-letter or 3-letter codes to find their data.'
Output:minLength 2, maxLength 3, default None
Input:If `true` , the playlist will become collaborative and other users will be able to modify the playlist in their Spotify client. *Note: You can only set `collaborative` to `true` on non-public playlists.*
Output:",None
collaborative,0.2,256,"
Analyze the provided API parameter description and determine whether it clearly identifies the parameter's data type 
or formatting. 
The list of possible data types are as follows: string, number, integer, boolean, array, and object.
The list of format options are as follows: time, date, password, byte, binary, email, uuid, uri, url, hostname, ipv4, and ipv6. Use the types and formats available for the OpenAPI Specification. 
A list of collectionFormat types are as follows: csv, ssv, and pipes.
If the data type is an array, attempt to identify its item type. 
Output the answer as follows: ""type [type], items [item type], format [format], collectionFormat [collectionFormat]"". Output None when unable to determine any of the categories. 
For example, only output a non-None ""item type"" if the ""type"" is array.

Assume any ""
"" values in the input indicate either new lines or spaces. 

Here are some examples of inputs and expected outputs:

Input:'A space-separated list of percent grades corresponding to the student.'
Output:type array, items number, format None, collectionFormat ssv
Input:'This should contain the email of the sender.'
Output:type string, items None, format email, collectionFormat None
Input:'This value should be true if the assignment is available for regrade.'
Output:type boolean, items None, format None, collectionFormat None
Input:'A URL containing the website for evaluation.'
Output:type string, items None, format url, collectionFormat None
Input:'The date of the contest. The date must be within the last three months.'
Output:type string, items None, format date, collectionFormat None
Input:'The time that the project must be completed. Use Eastern Standard Timezone (EST).'
Output:type string, items None, format date-time, collectionFormat None
Input:'A list of region codes.'
Output:type array, items None, format None, collectionFormat None
Input:If `true` , the playlist will become collaborative and other users will be able to modify the playlist in their Spotify client. *Note: You can only set `collaborative` to `true` on non-public playlists.*
Output:",None
collaborative,0.2,256,"
Identify the API parameter object by the grouping of its ""name"" and ""description"". Analyze the parameter description and extract logical constraints
in the provided format. Evaluate each case and determine whether it is applicable. Strictly follow the format and make no inferences. Only consider constraints
that are strictly required. Interpret the description in the least constraining manner, and assume Case 1 unless the other cases are obvious:

Case 1: The description isn't definitive about parameter requirements. Output ""None"".
Case 2: The description states the parameter ""name"" is required. Output: ""REQUIRED: name"". 
Case 3: The description states that parameter ""name"" or another parameter ""name"" is required. Output: ""Or(name, name)""
Case 4: The description states that given a set of parameters name, name_2, . . . , name_n, zero or one can be present in the API call: Output: ""ZeroOrOne(name, name_2, ... name_n)""
Case 5: The description states that given a set of parameters name, name_2, . . . , name_n, exactly one must be present in the API call: Output: ""OnlyOne(name, name_2, ... name_n)""
Case 6: The description states that given a set of parameters name, name_2, . . . , name_n, all of them or none must be present in the API call: Output: ""AllOrNone(name, name_2, ... name_n)""
Case 7: The description states that there is a relational relationship between some parameters: Output: ""name >= name_2"", where the standard relational operators can be used
Case 8: The description states that there is an arithmetic relationship between the value of parameters: Output: ""name_1 + name_2 <= value"", where the standard arithmetic operators can be used
Case 9: The description states there is a conditional relationship between parameters: Output: ""IF name THEN name_2"", where the standard logical operators can be used
Case 10: The description states that there exists a complex relationship between parameters, you can combine rules from the grammar to express a statement: Output: ""IF name==value THEN OnlyOne(name_2 AND name_3, name_4 AND name_5);

The grammar for statements is succinctly defined as follows:

Model:
    Dependency*;
Dependency:
    RelationalDependency | ArithmeticDependency |
    ConditionalDependency | PredefinedDependency;
RelationalDependency:
    Param RelationalOperator Param;
ArithmeticDependency:
    Operation RelationalOperator DOUBLE;
Operation:
    Param OperationContinuation |
    '(' Operation ')' OperationContinuation?;
OperationContinuation:
    ArithmeticOperator (Param | Operation);
ConditionalDependency:
    'IF' Predicate 'THEN' Predicate;
Predicate:
    Clause ClauseContinuation?;
Clause:
    (Term | RelationalDependency | ArithmeticDependency
    | PredefinedDependency) | 'NOT'? '(' Predicate ')';
Term:
    'NOT'? (Param | ParamValueRelation);
Param:
    ID | '[' ID ']';
ParamValueRelation:
    Param '==' STRING('|'STRING)* |
    Param 'LIKE' PATTERN_STRING | Param '==' BOOLEAN |
    Param RelationalOperator DOUBLE;
ClauseContinuation:
    ('AND' | 'OR') Predicate;
PredefinedDependency:
    'NOT'? ('Or' | 'OnlyOne' | 'AllOrNone' |
    'ZeroOrOne') '(' Clause (',' Clause)+ ')';
RelationalOperator:
    '<' | '>' | '<=' | '>=' | '==' | '!=';
ArithmeticOperator:
    '+' | '-' | '*' | '/';

If there are multiple dependency statements, return each one on a new line. Do not include any other text. Do not create dependencies on expected API responses.
Assume any ""
"" values in the input indicate either new lines or spaces. 
Here are some examples of expected outputs:

Input:
name: text 
description: The text to be checked. This or 'data' is required.
Output:Or(text, data);
Input: 
     name: idea
     description: 'An idea for a project. This and 'rating' are required.'
Output:OnlyOne(idea AND rating);
Input:
      name: partID
      description: 'The ID of the part. If partModel is specified partID must be specified'
Output:IF partModel THEN partID;
Input:
       name: language 
       description: The language of the client, not required if the country-code is USA or CAN.
Output:IF country-code!='USA' OR country-code=='CAN' THEN language;
Input:
        name: cost
        description: The cost of the product, this - profit must be greater than 500.
Output:cost - profit > 500;
Input:If `true` , the playlist will become collaborative and other users will be able to modify the playlist in their Spotify client. *Note: You can only set `collaborative` to `true` on non-public playlists.*
Output:",None
description,0.2,256,"
Analyze the provided API parameter description, and extract any example values for the parameter mentioned in the description. 
Then, generate a few additional example values that correspond to, or are in the same category as the provided values.
If there are no example values provided, simply generate values corresponding to the description, and always generate values when possible.  
If generating example values is not possible, return None. Consider the following cases: 

Case 1: The description contains example values USA, CAN, ZWE: Output: ""PROVIDED: USA, CAN, ZWE +++ GENERATED: BRA, FRA, GER ...""
Case 2: The description does not explicitly mention example values: Output: ""PROVIDED: None +++ GENERATED: BRA, FRA, GER, USA ...""
Case 3: The description does not explicitly mention example values, and it is not possible to generate example values: Output: ""None""

Assume any ""
"" values in the input represent spaces or new lines. Do not output any ""
"" strings.

Here are some examples of inputs and expected outputs:
Input:'The country code associated with the country. Examples are CAD, USD, etc...'
Output:PROVIDED: CAD, USD +++ GENERATED: AFG, ALA, ALB, DZA, ASM, AND, AGO, AIA, ATA, ATG, ARG, ARM, ABW, AUS, AUT, AZE, BHS, BHR, BGD, BRB, BLR, BEL, 
BLZ, BEN, BMU, BTN, BOL, BES, BIH, BWA, BVT, BRA, IOT, BRN, BGR, BFA, BDI, CPV, KHM, CMR, CAN, CYM, CAF, TCD, 
CHL, CHN, CXR, CCK, COL, COM, COG, COD, COK, CRI, CIV, HRV, CUB, CUW, CYP, CZE, DNK, DJI, DMA, DOM, ECU, EGY, 
SLV, GNQ, ERI, EST, SWZ, ETH, FLK, FRO, FJI, FIN, FRA, GUF, PYF, ATF, GAB, GMB, GEO, DEU, GHA, GIB, GRC, GRL, 
GRD, GLP, GUM, GTM, GGY, GIN, GNB, GUY, HTI, HMD, VAT, HND, HKG, HUN, ISL, IND, IDN, IRN, IRQ, IRL, IMN, ISR, 
ITA, JAM, JPN, JEY, JOR, KAZ, KEN, KIR, PRK, KOR, KWT, KGZ, LAO, LVA, LBN, LSO, LBR, LBY, LIE, LTU, LUX, MAC, 
MDG, MWI, MYS, MDV, MLI, MLT, MHL, MTQ, MRT, MUS, MYT, MEX, FSM, MDA, MCO, MNG, MNE, MSR, MAR, MOZ, MMR, NAM, 
NRU, NPL, NLD, NCL, NZL, NIC, NER, NGA, NIU, NFK, MKD, MNP, NOR, OMN, PAK, PLW, PSE, PAN, PNG, PRY, PER, PHL, 
PCN, POL, PRT, PRI, QAT, REU, ROU, RUS, RWA, BLM, SHN, KNA, LCA, MAF, SPM, VCT, WSM, SMR, STP, SAU, SEN, SRB, 
SYC, SLE, SGP, SXM, SVK, SVN, SLB, SOM, ZAF, SGS, SSD, ESP, LKA, SDN, SUR, SJM, SWE, CHE, SYR, TWN, TJK, TZA, 
THA, TLS, TGO, TKL, TON, TTO, TUN, TUR, TKM, TCA, TUV, UGA, UKR, ARE, GBR, USA, UMI, URY, UZB, VUT, VEN, VNM, 
VGB, VIR, WLF, ESH, YEM, ZMB, ZWE
Input:'The numbers for the percent grades must be to one decimal place (such as 10.6).'
Output:PROVIDED: 10.6 +++ GENERATED: 0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0, 2.1, 
2.2, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8, 2.9, 3.0, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6, 3.7, 3.8, 3.9, 4.0, 4.1, 4.2, 4.3, 4.4, 
4.5, 4.6, 4.7, 4.8, 4.9, 5.0, 5.1, 5.2, 5.3, 10.0, 99.9, 100.0
Input:'The title of the book to be rated.'
Output:PROVIDED: None +++ GENERATED: To Kill a Mockingbird, 1984, Pride and Prejudice, The Great Gatsby, Moby-Dick, The Catcher in the Rye, Harry Potter 
and the Sorcerer's Stone, The Lord of the Rings, One Hundred Years of Solitude, Brave New World, Sapiens: A Brief 
History of Humankind, The Immortal Life of Henrietta Lacks, Thinking, Fast and Slow, The Wright Brothers, The Diary of 
a Young Girl, Educated, The Art of War, The 7 Habits of Highly Effective People, Freakonomics, Quiet: The Power of 
Introverts in a World That Can't Stop Talking, Dune, Ender's Game, Neuromancer
Input:'The value for the number of products to consume. It must be greater than 12 and less than 50.'
Output:PROVIDED: None +++ GENERATED: None
Input:'The number of bank accounts associated. Cannot be less than 0.'
Output:PROVIDED: None +++ GENERATED: None
Input:Value for playlist description as displayed in Spotify Clients and in the Web API.
Output:",None
description,0.2,256,"
Analyze the provided API parameter description and first estimate the parameter type. Then, according to the type, apply the following to determine restrictions on the parameter input:
If it is a number, determine if the description mentions minimum, maximum, or default possible values and output: ""min [minimum], max [maximum], default [default]"". 
If it's a string, word, or code, determine if the description mentions minimum or maximum possible character amounts or a default value, and output: ""minLength [minimum], maxLength [maximum], default [default]"". 
If it's an array or list, determine if the description mentions minimum or maximum possible list lengths or a default value, and output: ""minItems [minimum], maxItems [maximum], default [default]"".
If it's an object, determine if the description mentions minimum or maximum possible numbers of object properties or a default value, and output: ""minProperties [minimum], maxProperties [maximum], default [default]"".
If it is any other data type where there is a default value provided, output: ""min None, max None, default [default]"".
If you are unable to determine any minimum, maximum, or default restrictions, output ""None"". If you are able to determine only one either the minimum or maximum, output the undetermined value as ""None"".

Assume any ""
"" values in the input indicate either new lines or spaces. 

Here are some examples of inputs and expected outputs:

Input:'An idea for a project. This and 'rating' are required.'
Output:None
Input:'The maximum value is 50. If nothing is put in, default to 0.'
Output:min None, max 50, default 0
Input:'The timer counter. The value must be between 15.0 and 120.'
Output:min 15.0, max 120, default None
Input:'The input range. The smallest value possible is -120.8. The largest should be 179.652.'
Output:min -120.8, max 179.652, default None
Input:'The number of items to be investigated. The maximum is 9,999.99'
Output:min None, max 9999.99, default None
Input:'The name of the movie. The movie name cannot be shorter than 10 characters and longer than 20 characters.'
Output:minLength 10, maxLength 20, default None
Input:'The country code which can be 1-letter, 2-letter, or 3-letter.'
Output:minLength 1, maxLength 3, default None
Input:'A supplied language code that can either be 2-letter or 3-letter which is used to parse through a list of common phrases.'
Output:minLength 2, maxLength 3, default None
Input:'Search via county areas.'
Output:None
Input:'Identifies synonyms through word inputs.'
Output:None
Input:'After searching through a list of ISO country codes, input 2-letter or 3-letter codes to find their data.'
Output:minLength 2, maxLength 3, default None
Input:Value for playlist description as displayed in Spotify Clients and in the Web API.
Output:",None
description,0.2,256,"
Analyze the provided API parameter description and determine whether it clearly identifies the parameter's data type 
or formatting. 
The list of possible data types are as follows: string, number, integer, boolean, array, and object.
The list of format options are as follows: time, date, password, byte, binary, email, uuid, uri, url, hostname, ipv4, and ipv6. Use the types and formats available for the OpenAPI Specification. 
A list of collectionFormat types are as follows: csv, ssv, and pipes.
If the data type is an array, attempt to identify its item type. 
Output the answer as follows: ""type [type], items [item type], format [format], collectionFormat [collectionFormat]"". Output None when unable to determine any of the categories. 
For example, only output a non-None ""item type"" if the ""type"" is array.

Assume any ""
"" values in the input indicate either new lines or spaces. 

Here are some examples of inputs and expected outputs:

Input:'A space-separated list of percent grades corresponding to the student.'
Output:type array, items number, format None, collectionFormat ssv
Input:'This should contain the email of the sender.'
Output:type string, items None, format email, collectionFormat None
Input:'This value should be true if the assignment is available for regrade.'
Output:type boolean, items None, format None, collectionFormat None
Input:'A URL containing the website for evaluation.'
Output:type string, items None, format url, collectionFormat None
Input:'The date of the contest. The date must be within the last three months.'
Output:type string, items None, format date, collectionFormat None
Input:'The time that the project must be completed. Use Eastern Standard Timezone (EST).'
Output:type string, items None, format date-time, collectionFormat None
Input:'A list of region codes.'
Output:type array, items None, format None, collectionFormat None
Input:Value for playlist description as displayed in Spotify Clients and in the Web API.
Output:",None
description,0.2,256,"
Identify the API parameter object by the grouping of its ""name"" and ""description"". Analyze the parameter description and extract logical constraints
in the provided format. Evaluate each case and determine whether it is applicable. Strictly follow the format and make no inferences. Only consider constraints
that are strictly required. Interpret the description in the least constraining manner, and assume Case 1 unless the other cases are obvious:

Case 1: The description isn't definitive about parameter requirements. Output ""None"".
Case 2: The description states the parameter ""name"" is required. Output: ""REQUIRED: name"". 
Case 3: The description states that parameter ""name"" or another parameter ""name"" is required. Output: ""Or(name, name)""
Case 4: The description states that given a set of parameters name, name_2, . . . , name_n, zero or one can be present in the API call: Output: ""ZeroOrOne(name, name_2, ... name_n)""
Case 5: The description states that given a set of parameters name, name_2, . . . , name_n, exactly one must be present in the API call: Output: ""OnlyOne(name, name_2, ... name_n)""
Case 6: The description states that given a set of parameters name, name_2, . . . , name_n, all of them or none must be present in the API call: Output: ""AllOrNone(name, name_2, ... name_n)""
Case 7: The description states that there is a relational relationship between some parameters: Output: ""name >= name_2"", where the standard relational operators can be used
Case 8: The description states that there is an arithmetic relationship between the value of parameters: Output: ""name_1 + name_2 <= value"", where the standard arithmetic operators can be used
Case 9: The description states there is a conditional relationship between parameters: Output: ""IF name THEN name_2"", where the standard logical operators can be used
Case 10: The description states that there exists a complex relationship between parameters, you can combine rules from the grammar to express a statement: Output: ""IF name==value THEN OnlyOne(name_2 AND name_3, name_4 AND name_5);

The grammar for statements is succinctly defined as follows:

Model:
    Dependency*;
Dependency:
    RelationalDependency | ArithmeticDependency |
    ConditionalDependency | PredefinedDependency;
RelationalDependency:
    Param RelationalOperator Param;
ArithmeticDependency:
    Operation RelationalOperator DOUBLE;
Operation:
    Param OperationContinuation |
    '(' Operation ')' OperationContinuation?;
OperationContinuation:
    ArithmeticOperator (Param | Operation);
ConditionalDependency:
    'IF' Predicate 'THEN' Predicate;
Predicate:
    Clause ClauseContinuation?;
Clause:
    (Term | RelationalDependency | ArithmeticDependency
    | PredefinedDependency) | 'NOT'? '(' Predicate ')';
Term:
    'NOT'? (Param | ParamValueRelation);
Param:
    ID | '[' ID ']';
ParamValueRelation:
    Param '==' STRING('|'STRING)* |
    Param 'LIKE' PATTERN_STRING | Param '==' BOOLEAN |
    Param RelationalOperator DOUBLE;
ClauseContinuation:
    ('AND' | 'OR') Predicate;
PredefinedDependency:
    'NOT'? ('Or' | 'OnlyOne' | 'AllOrNone' |
    'ZeroOrOne') '(' Clause (',' Clause)+ ')';
RelationalOperator:
    '<' | '>' | '<=' | '>=' | '==' | '!=';
ArithmeticOperator:
    '+' | '-' | '*' | '/';

If there are multiple dependency statements, return each one on a new line. Do not include any other text. Do not create dependencies on expected API responses.
Assume any ""
"" values in the input indicate either new lines or spaces. 
Here are some examples of expected outputs:

Input:
name: text 
description: The text to be checked. This or 'data' is required.
Output:Or(text, data);
Input: 
     name: idea
     description: 'An idea for a project. This and 'rating' are required.'
Output:OnlyOne(idea AND rating);
Input:
      name: partID
      description: 'The ID of the part. If partModel is specified partID must be specified'
Output:IF partModel THEN partID;
Input:
       name: language 
       description: The language of the client, not required if the country-code is USA or CAN.
Output:IF country-code!='USA' OR country-code=='CAN' THEN language;
Input:
        name: cost
        description: The cost of the product, this - profit must be greater than 500.
Output:cost - profit > 500;
Input:Value for playlist description as displayed in Spotify Clients and in the Web API.
Output:",None
name,0.2,256,"
Analyze the provided API parameter description, and extract any example values for the parameter mentioned in the description. 
Then, generate a few additional example values that correspond to, or are in the same category as the provided values.
If there are no example values provided, simply generate values corresponding to the description, and always generate values when possible.  
If generating example values is not possible, return None. Consider the following cases: 

Case 1: The description contains example values USA, CAN, ZWE: Output: ""PROVIDED: USA, CAN, ZWE +++ GENERATED: BRA, FRA, GER ...""
Case 2: The description does not explicitly mention example values: Output: ""PROVIDED: None +++ GENERATED: BRA, FRA, GER, USA ...""
Case 3: The description does not explicitly mention example values, and it is not possible to generate example values: Output: ""None""

Assume any ""
"" values in the input represent spaces or new lines. Do not output any ""
"" strings.

Here are some examples of inputs and expected outputs:
Input:'The country code associated with the country. Examples are CAD, USD, etc...'
Output:PROVIDED: CAD, USD +++ GENERATED: AFG, ALA, ALB, DZA, ASM, AND, AGO, AIA, ATA, ATG, ARG, ARM, ABW, AUS, AUT, AZE, BHS, BHR, BGD, BRB, BLR, BEL, 
BLZ, BEN, BMU, BTN, BOL, BES, BIH, BWA, BVT, BRA, IOT, BRN, BGR, BFA, BDI, CPV, KHM, CMR, CAN, CYM, CAF, TCD, 
CHL, CHN, CXR, CCK, COL, COM, COG, COD, COK, CRI, CIV, HRV, CUB, CUW, CYP, CZE, DNK, DJI, DMA, DOM, ECU, EGY, 
SLV, GNQ, ERI, EST, SWZ, ETH, FLK, FRO, FJI, FIN, FRA, GUF, PYF, ATF, GAB, GMB, GEO, DEU, GHA, GIB, GRC, GRL, 
GRD, GLP, GUM, GTM, GGY, GIN, GNB, GUY, HTI, HMD, VAT, HND, HKG, HUN, ISL, IND, IDN, IRN, IRQ, IRL, IMN, ISR, 
ITA, JAM, JPN, JEY, JOR, KAZ, KEN, KIR, PRK, KOR, KWT, KGZ, LAO, LVA, LBN, LSO, LBR, LBY, LIE, LTU, LUX, MAC, 
MDG, MWI, MYS, MDV, MLI, MLT, MHL, MTQ, MRT, MUS, MYT, MEX, FSM, MDA, MCO, MNG, MNE, MSR, MAR, MOZ, MMR, NAM, 
NRU, NPL, NLD, NCL, NZL, NIC, NER, NGA, NIU, NFK, MKD, MNP, NOR, OMN, PAK, PLW, PSE, PAN, PNG, PRY, PER, PHL, 
PCN, POL, PRT, PRI, QAT, REU, ROU, RUS, RWA, BLM, SHN, KNA, LCA, MAF, SPM, VCT, WSM, SMR, STP, SAU, SEN, SRB, 
SYC, SLE, SGP, SXM, SVK, SVN, SLB, SOM, ZAF, SGS, SSD, ESP, LKA, SDN, SUR, SJM, SWE, CHE, SYR, TWN, TJK, TZA, 
THA, TLS, TGO, TKL, TON, TTO, TUN, TUR, TKM, TCA, TUV, UGA, UKR, ARE, GBR, USA, UMI, URY, UZB, VUT, VEN, VNM, 
VGB, VIR, WLF, ESH, YEM, ZMB, ZWE
Input:'The numbers for the percent grades must be to one decimal place (such as 10.6).'
Output:PROVIDED: 10.6 +++ GENERATED: 0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0, 2.1, 
2.2, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8, 2.9, 3.0, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6, 3.7, 3.8, 3.9, 4.0, 4.1, 4.2, 4.3, 4.4, 
4.5, 4.6, 4.7, 4.8, 4.9, 5.0, 5.1, 5.2, 5.3, 10.0, 99.9, 100.0
Input:'The title of the book to be rated.'
Output:PROVIDED: None +++ GENERATED: To Kill a Mockingbird, 1984, Pride and Prejudice, The Great Gatsby, Moby-Dick, The Catcher in the Rye, Harry Potter 
and the Sorcerer's Stone, The Lord of the Rings, One Hundred Years of Solitude, Brave New World, Sapiens: A Brief 
History of Humankind, The Immortal Life of Henrietta Lacks, Thinking, Fast and Slow, The Wright Brothers, The Diary of 
a Young Girl, Educated, The Art of War, The 7 Habits of Highly Effective People, Freakonomics, Quiet: The Power of 
Introverts in a World That Can't Stop Talking, Dune, Ender's Game, Neuromancer
Input:'The value for the number of products to consume. It must be greater than 12 and less than 50.'
Output:PROVIDED: None +++ GENERATED: None
Input:'The number of bank accounts associated. Cannot be less than 0.'
Output:PROVIDED: None +++ GENERATED: None
Input:The new name for the playlist, for example `""My New Playlist Title""`
Output:",None
name,0.2,256,"
Analyze the provided API parameter description and first estimate the parameter type. Then, according to the type, apply the following to determine restrictions on the parameter input:
If it is a number, determine if the description mentions minimum, maximum, or default possible values and output: ""min [minimum], max [maximum], default [default]"". 
If it's a string, word, or code, determine if the description mentions minimum or maximum possible character amounts or a default value, and output: ""minLength [minimum], maxLength [maximum], default [default]"". 
If it's an array or list, determine if the description mentions minimum or maximum possible list lengths or a default value, and output: ""minItems [minimum], maxItems [maximum], default [default]"".
If it's an object, determine if the description mentions minimum or maximum possible numbers of object properties or a default value, and output: ""minProperties [minimum], maxProperties [maximum], default [default]"".
If it is any other data type where there is a default value provided, output: ""min None, max None, default [default]"".
If you are unable to determine any minimum, maximum, or default restrictions, output ""None"". If you are able to determine only one either the minimum or maximum, output the undetermined value as ""None"".

Assume any ""
"" values in the input indicate either new lines or spaces. 

Here are some examples of inputs and expected outputs:

Input:'An idea for a project. This and 'rating' are required.'
Output:None
Input:'The maximum value is 50. If nothing is put in, default to 0.'
Output:min None, max 50, default 0
Input:'The timer counter. The value must be between 15.0 and 120.'
Output:min 15.0, max 120, default None
Input:'The input range. The smallest value possible is -120.8. The largest should be 179.652.'
Output:min -120.8, max 179.652, default None
Input:'The number of items to be investigated. The maximum is 9,999.99'
Output:min None, max 9999.99, default None
Input:'The name of the movie. The movie name cannot be shorter than 10 characters and longer than 20 characters.'
Output:minLength 10, maxLength 20, default None
Input:'The country code which can be 1-letter, 2-letter, or 3-letter.'
Output:minLength 1, maxLength 3, default None
Input:'A supplied language code that can either be 2-letter or 3-letter which is used to parse through a list of common phrases.'
Output:minLength 2, maxLength 3, default None
Input:'Search via county areas.'
Output:None
Input:'Identifies synonyms through word inputs.'
Output:None
Input:'After searching through a list of ISO country codes, input 2-letter or 3-letter codes to find their data.'
Output:minLength 2, maxLength 3, default None
Input:The new name for the playlist, for example `""My New Playlist Title""`
Output:","min None, max None, default ""My"
name,0.2,256,"
Analyze the provided API parameter description and determine whether it clearly identifies the parameter's data type 
or formatting. 
The list of possible data types are as follows: string, number, integer, boolean, array, and object.
The list of format options are as follows: time, date, password, byte, binary, email, uuid, uri, url, hostname, ipv4, and ipv6. Use the types and formats available for the OpenAPI Specification. 
A list of collectionFormat types are as follows: csv, ssv, and pipes.
If the data type is an array, attempt to identify its item type. 
Output the answer as follows: ""type [type], items [item type], format [format], collectionFormat [collectionFormat]"". Output None when unable to determine any of the categories. 
For example, only output a non-None ""item type"" if the ""type"" is array.

Assume any ""
"" values in the input indicate either new lines or spaces. 

Here are some examples of inputs and expected outputs:

Input:'A space-separated list of percent grades corresponding to the student.'
Output:type array, items number, format None, collectionFormat ssv
Input:'This should contain the email of the sender.'
Output:type string, items None, format email, collectionFormat None
Input:'This value should be true if the assignment is available for regrade.'
Output:type boolean, items None, format None, collectionFormat None
Input:'A URL containing the website for evaluation.'
Output:type string, items None, format url, collectionFormat None
Input:'The date of the contest. The date must be within the last three months.'
Output:type string, items None, format date, collectionFormat None
Input:'The time that the project must be completed. Use Eastern Standard Timezone (EST).'
Output:type string, items None, format date-time, collectionFormat None
Input:'A list of region codes.'
Output:type array, items None, format None, collectionFormat None
Input:The new name for the playlist, for example `""My New Playlist Title""`
Output:",None
name,0.2,256,"
Identify the API parameter object by the grouping of its ""name"" and ""description"". Analyze the parameter description and extract logical constraints
in the provided format. Evaluate each case and determine whether it is applicable. Strictly follow the format and make no inferences. Only consider constraints
that are strictly required. Interpret the description in the least constraining manner, and assume Case 1 unless the other cases are obvious:

Case 1: The description isn't definitive about parameter requirements. Output ""None"".
Case 2: The description states the parameter ""name"" is required. Output: ""REQUIRED: name"". 
Case 3: The description states that parameter ""name"" or another parameter ""name"" is required. Output: ""Or(name, name)""
Case 4: The description states that given a set of parameters name, name_2, . . . , name_n, zero or one can be present in the API call: Output: ""ZeroOrOne(name, name_2, ... name_n)""
Case 5: The description states that given a set of parameters name, name_2, . . . , name_n, exactly one must be present in the API call: Output: ""OnlyOne(name, name_2, ... name_n)""
Case 6: The description states that given a set of parameters name, name_2, . . . , name_n, all of them or none must be present in the API call: Output: ""AllOrNone(name, name_2, ... name_n)""
Case 7: The description states that there is a relational relationship between some parameters: Output: ""name >= name_2"", where the standard relational operators can be used
Case 8: The description states that there is an arithmetic relationship between the value of parameters: Output: ""name_1 + name_2 <= value"", where the standard arithmetic operators can be used
Case 9: The description states there is a conditional relationship between parameters: Output: ""IF name THEN name_2"", where the standard logical operators can be used
Case 10: The description states that there exists a complex relationship between parameters, you can combine rules from the grammar to express a statement: Output: ""IF name==value THEN OnlyOne(name_2 AND name_3, name_4 AND name_5);

The grammar for statements is succinctly defined as follows:

Model:
    Dependency*;
Dependency:
    RelationalDependency | ArithmeticDependency |
    ConditionalDependency | PredefinedDependency;
RelationalDependency:
    Param RelationalOperator Param;
ArithmeticDependency:
    Operation RelationalOperator DOUBLE;
Operation:
    Param OperationContinuation |
    '(' Operation ')' OperationContinuation?;
OperationContinuation:
    ArithmeticOperator (Param | Operation);
ConditionalDependency:
    'IF' Predicate 'THEN' Predicate;
Predicate:
    Clause ClauseContinuation?;
Clause:
    (Term | RelationalDependency | ArithmeticDependency
    | PredefinedDependency) | 'NOT'? '(' Predicate ')';
Term:
    'NOT'? (Param | ParamValueRelation);
Param:
    ID | '[' ID ']';
ParamValueRelation:
    Param '==' STRING('|'STRING)* |
    Param 'LIKE' PATTERN_STRING | Param '==' BOOLEAN |
    Param RelationalOperator DOUBLE;
ClauseContinuation:
    ('AND' | 'OR') Predicate;
PredefinedDependency:
    'NOT'? ('Or' | 'OnlyOne' | 'AllOrNone' |
    'ZeroOrOne') '(' Clause (',' Clause)+ ')';
RelationalOperator:
    '<' | '>' | '<=' | '>=' | '==' | '!=';
ArithmeticOperator:
    '+' | '-' | '*' | '/';

If there are multiple dependency statements, return each one on a new line. Do not include any other text. Do not create dependencies on expected API responses.
Assume any ""
"" values in the input indicate either new lines or spaces. 
Here are some examples of expected outputs:

Input:
name: text 
description: The text to be checked. This or 'data' is required.
Output:Or(text, data);
Input: 
     name: idea
     description: 'An idea for a project. This and 'rating' are required.'
Output:OnlyOne(idea AND rating);
Input:
      name: partID
      description: 'The ID of the part. If partModel is specified partID must be specified'
Output:IF partModel THEN partID;
Input:
       name: language 
       description: The language of the client, not required if the country-code is USA or CAN.
Output:IF country-code!='USA' OR country-code=='CAN' THEN language;
Input:
        name: cost
        description: The cost of the product, this - profit must be greater than 500.
Output:cost - profit > 500;
Input:The new name for the playlist, for example `""My New Playlist Title""`
Output:",None
public,0.2,256,"
Analyze the provided API parameter description, and extract any example values for the parameter mentioned in the description. 
Then, generate a few additional example values that correspond to, or are in the same category as the provided values.
If there are no example values provided, simply generate values corresponding to the description, and always generate values when possible.  
If generating example values is not possible, return None. Consider the following cases: 

Case 1: The description contains example values USA, CAN, ZWE: Output: ""PROVIDED: USA, CAN, ZWE +++ GENERATED: BRA, FRA, GER ...""
Case 2: The description does not explicitly mention example values: Output: ""PROVIDED: None +++ GENERATED: BRA, FRA, GER, USA ...""
Case 3: The description does not explicitly mention example values, and it is not possible to generate example values: Output: ""None""

Assume any ""
"" values in the input represent spaces or new lines. Do not output any ""
"" strings.

Here are some examples of inputs and expected outputs:
Input:'The country code associated with the country. Examples are CAD, USD, etc...'
Output:PROVIDED: CAD, USD +++ GENERATED: AFG, ALA, ALB, DZA, ASM, AND, AGO, AIA, ATA, ATG, ARG, ARM, ABW, AUS, AUT, AZE, BHS, BHR, BGD, BRB, BLR, BEL, 
BLZ, BEN, BMU, BTN, BOL, BES, BIH, BWA, BVT, BRA, IOT, BRN, BGR, BFA, BDI, CPV, KHM, CMR, CAN, CYM, CAF, TCD, 
CHL, CHN, CXR, CCK, COL, COM, COG, COD, COK, CRI, CIV, HRV, CUB, CUW, CYP, CZE, DNK, DJI, DMA, DOM, ECU, EGY, 
SLV, GNQ, ERI, EST, SWZ, ETH, FLK, FRO, FJI, FIN, FRA, GUF, PYF, ATF, GAB, GMB, GEO, DEU, GHA, GIB, GRC, GRL, 
GRD, GLP, GUM, GTM, GGY, GIN, GNB, GUY, HTI, HMD, VAT, HND, HKG, HUN, ISL, IND, IDN, IRN, IRQ, IRL, IMN, ISR, 
ITA, JAM, JPN, JEY, JOR, KAZ, KEN, KIR, PRK, KOR, KWT, KGZ, LAO, LVA, LBN, LSO, LBR, LBY, LIE, LTU, LUX, MAC, 
MDG, MWI, MYS, MDV, MLI, MLT, MHL, MTQ, MRT, MUS, MYT, MEX, FSM, MDA, MCO, MNG, MNE, MSR, MAR, MOZ, MMR, NAM, 
NRU, NPL, NLD, NCL, NZL, NIC, NER, NGA, NIU, NFK, MKD, MNP, NOR, OMN, PAK, PLW, PSE, PAN, PNG, PRY, PER, PHL, 
PCN, POL, PRT, PRI, QAT, REU, ROU, RUS, RWA, BLM, SHN, KNA, LCA, MAF, SPM, VCT, WSM, SMR, STP, SAU, SEN, SRB, 
SYC, SLE, SGP, SXM, SVK, SVN, SLB, SOM, ZAF, SGS, SSD, ESP, LKA, SDN, SUR, SJM, SWE, CHE, SYR, TWN, TJK, TZA, 
THA, TLS, TGO, TKL, TON, TTO, TUN, TUR, TKM, TCA, TUV, UGA, UKR, ARE, GBR, USA, UMI, URY, UZB, VUT, VEN, VNM, 
VGB, VIR, WLF, ESH, YEM, ZMB, ZWE
Input:'The numbers for the percent grades must be to one decimal place (such as 10.6).'
Output:PROVIDED: 10.6 +++ GENERATED: 0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0, 2.1, 
2.2, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8, 2.9, 3.0, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6, 3.7, 3.8, 3.9, 4.0, 4.1, 4.2, 4.3, 4.4, 
4.5, 4.6, 4.7, 4.8, 4.9, 5.0, 5.1, 5.2, 5.3, 10.0, 99.9, 100.0
Input:'The title of the book to be rated.'
Output:PROVIDED: None +++ GENERATED: To Kill a Mockingbird, 1984, Pride and Prejudice, The Great Gatsby, Moby-Dick, The Catcher in the Rye, Harry Potter 
and the Sorcerer's Stone, The Lord of the Rings, One Hundred Years of Solitude, Brave New World, Sapiens: A Brief 
History of Humankind, The Immortal Life of Henrietta Lacks, Thinking, Fast and Slow, The Wright Brothers, The Diary of 
a Young Girl, Educated, The Art of War, The 7 Habits of Highly Effective People, Freakonomics, Quiet: The Power of 
Introverts in a World That Can't Stop Talking, Dune, Ender's Game, Neuromancer
Input:'The value for the number of products to consume. It must be greater than 12 and less than 50.'
Output:PROVIDED: None +++ GENERATED: None
Input:'The number of bank accounts associated. Cannot be less than 0.'
Output:PROVIDED: None +++ GENERATED: None
Input:If `true` the playlist will be public, if `false` it will be private.
Output:",None
public,0.2,256,"
Analyze the provided API parameter description and first estimate the parameter type. Then, according to the type, apply the following to determine restrictions on the parameter input:
If it is a number, determine if the description mentions minimum, maximum, or default possible values and output: ""min [minimum], max [maximum], default [default]"". 
If it's a string, word, or code, determine if the description mentions minimum or maximum possible character amounts or a default value, and output: ""minLength [minimum], maxLength [maximum], default [default]"". 
If it's an array or list, determine if the description mentions minimum or maximum possible list lengths or a default value, and output: ""minItems [minimum], maxItems [maximum], default [default]"".
If it's an object, determine if the description mentions minimum or maximum possible numbers of object properties or a default value, and output: ""minProperties [minimum], maxProperties [maximum], default [default]"".
If it is any other data type where there is a default value provided, output: ""min None, max None, default [default]"".
If you are unable to determine any minimum, maximum, or default restrictions, output ""None"". If you are able to determine only one either the minimum or maximum, output the undetermined value as ""None"".

Assume any ""
"" values in the input indicate either new lines or spaces. 

Here are some examples of inputs and expected outputs:

Input:'An idea for a project. This and 'rating' are required.'
Output:None
Input:'The maximum value is 50. If nothing is put in, default to 0.'
Output:min None, max 50, default 0
Input:'The timer counter. The value must be between 15.0 and 120.'
Output:min 15.0, max 120, default None
Input:'The input range. The smallest value possible is -120.8. The largest should be 179.652.'
Output:min -120.8, max 179.652, default None
Input:'The number of items to be investigated. The maximum is 9,999.99'
Output:min None, max 9999.99, default None
Input:'The name of the movie. The movie name cannot be shorter than 10 characters and longer than 20 characters.'
Output:minLength 10, maxLength 20, default None
Input:'The country code which can be 1-letter, 2-letter, or 3-letter.'
Output:minLength 1, maxLength 3, default None
Input:'A supplied language code that can either be 2-letter or 3-letter which is used to parse through a list of common phrases.'
Output:minLength 2, maxLength 3, default None
Input:'Search via county areas.'
Output:None
Input:'Identifies synonyms through word inputs.'
Output:None
Input:'After searching through a list of ISO country codes, input 2-letter or 3-letter codes to find their data.'
Output:minLength 2, maxLength 3, default None
Input:If `true` the playlist will be public, if `false` it will be private.
Output:",None
public,0.2,256,"
Analyze the provided API parameter description and determine whether it clearly identifies the parameter's data type 
or formatting. 
The list of possible data types are as follows: string, number, integer, boolean, array, and object.
The list of format options are as follows: time, date, password, byte, binary, email, uuid, uri, url, hostname, ipv4, and ipv6. Use the types and formats available for the OpenAPI Specification. 
A list of collectionFormat types are as follows: csv, ssv, and pipes.
If the data type is an array, attempt to identify its item type. 
Output the answer as follows: ""type [type], items [item type], format [format], collectionFormat [collectionFormat]"". Output None when unable to determine any of the categories. 
For example, only output a non-None ""item type"" if the ""type"" is array.

Assume any ""
"" values in the input indicate either new lines or spaces. 

Here are some examples of inputs and expected outputs:

Input:'A space-separated list of percent grades corresponding to the student.'
Output:type array, items number, format None, collectionFormat ssv
Input:'This should contain the email of the sender.'
Output:type string, items None, format email, collectionFormat None
Input:'This value should be true if the assignment is available for regrade.'
Output:type boolean, items None, format None, collectionFormat None
Input:'A URL containing the website for evaluation.'
Output:type string, items None, format url, collectionFormat None
Input:'The date of the contest. The date must be within the last three months.'
Output:type string, items None, format date, collectionFormat None
Input:'The time that the project must be completed. Use Eastern Standard Timezone (EST).'
Output:type string, items None, format date-time, collectionFormat None
Input:'A list of region codes.'
Output:type array, items None, format None, collectionFormat None
Input:If `true` the playlist will be public, if `false` it will be private.
Output:",None
public,0.2,256,"
Identify the API parameter object by the grouping of its ""name"" and ""description"". Analyze the parameter description and extract logical constraints
in the provided format. Evaluate each case and determine whether it is applicable. Strictly follow the format and make no inferences. Only consider constraints
that are strictly required. Interpret the description in the least constraining manner, and assume Case 1 unless the other cases are obvious:

Case 1: The description isn't definitive about parameter requirements. Output ""None"".
Case 2: The description states the parameter ""name"" is required. Output: ""REQUIRED: name"". 
Case 3: The description states that parameter ""name"" or another parameter ""name"" is required. Output: ""Or(name, name)""
Case 4: The description states that given a set of parameters name, name_2, . . . , name_n, zero or one can be present in the API call: Output: ""ZeroOrOne(name, name_2, ... name_n)""
Case 5: The description states that given a set of parameters name, name_2, . . . , name_n, exactly one must be present in the API call: Output: ""OnlyOne(name, name_2, ... name_n)""
Case 6: The description states that given a set of parameters name, name_2, . . . , name_n, all of them or none must be present in the API call: Output: ""AllOrNone(name, name_2, ... name_n)""
Case 7: The description states that there is a relational relationship between some parameters: Output: ""name >= name_2"", where the standard relational operators can be used
Case 8: The description states that there is an arithmetic relationship between the value of parameters: Output: ""name_1 + name_2 <= value"", where the standard arithmetic operators can be used
Case 9: The description states there is a conditional relationship between parameters: Output: ""IF name THEN name_2"", where the standard logical operators can be used
Case 10: The description states that there exists a complex relationship between parameters, you can combine rules from the grammar to express a statement: Output: ""IF name==value THEN OnlyOne(name_2 AND name_3, name_4 AND name_5);

The grammar for statements is succinctly defined as follows:

Model:
    Dependency*;
Dependency:
    RelationalDependency | ArithmeticDependency |
    ConditionalDependency | PredefinedDependency;
RelationalDependency:
    Param RelationalOperator Param;
ArithmeticDependency:
    Operation RelationalOperator DOUBLE;
Operation:
    Param OperationContinuation |
    '(' Operation ')' OperationContinuation?;
OperationContinuation:
    ArithmeticOperator (Param | Operation);
ConditionalDependency:
    'IF' Predicate 'THEN' Predicate;
Predicate:
    Clause ClauseContinuation?;
Clause:
    (Term | RelationalDependency | ArithmeticDependency
    | PredefinedDependency) | 'NOT'? '(' Predicate ')';
Term:
    'NOT'? (Param | ParamValueRelation);
Param:
    ID | '[' ID ']';
ParamValueRelation:
    Param '==' STRING('|'STRING)* |
    Param 'LIKE' PATTERN_STRING | Param '==' BOOLEAN |
    Param RelationalOperator DOUBLE;
ClauseContinuation:
    ('AND' | 'OR') Predicate;
PredefinedDependency:
    'NOT'? ('Or' | 'OnlyOne' | 'AllOrNone' |
    'ZeroOrOne') '(' Clause (',' Clause)+ ')';
RelationalOperator:
    '<' | '>' | '<=' | '>=' | '==' | '!=';
ArithmeticOperator:
    '+' | '-' | '*' | '/';

If there are multiple dependency statements, return each one on a new line. Do not include any other text. Do not create dependencies on expected API responses.
Assume any ""
"" values in the input indicate either new lines or spaces. 
Here are some examples of expected outputs:

Input:
name: text 
description: The text to be checked. This or 'data' is required.
Output:Or(text, data);
Input: 
     name: idea
     description: 'An idea for a project. This and 'rating' are required.'
Output:OnlyOne(idea AND rating);
Input:
      name: partID
      description: 'The ID of the part. If partModel is specified partID must be specified'
Output:IF partModel THEN partID;
Input:
       name: language 
       description: The language of the client, not required if the country-code is USA or CAN.
Output:IF country-code!='USA' OR country-code=='CAN' THEN language;
Input:
        name: cost
        description: The cost of the product, this - profit must be greater than 500.
Output:cost - profit > 500;
Input:If `true` the playlist will be public, if `false` it will be private.
Output:",None
playlist_id,0.2,256,"
Analyze the provided API parameter description, and extract any example values for the parameter mentioned in the description. 
Then, generate a few additional example values that correspond to, or are in the same category as the provided values.
If there are no example values provided, simply generate values corresponding to the description, and always generate values when possible.  
If generating example values is not possible, return None. Consider the following cases: 

Case 1: The description contains example values USA, CAN, ZWE: Output: ""PROVIDED: USA, CAN, ZWE +++ GENERATED: BRA, FRA, GER ...""
Case 2: The description does not explicitly mention example values: Output: ""PROVIDED: None +++ GENERATED: BRA, FRA, GER, USA ...""
Case 3: The description does not explicitly mention example values, and it is not possible to generate example values: Output: ""None""

Assume any ""
"" values in the input represent spaces or new lines. Do not output any ""
"" strings.

Here are some examples of inputs and expected outputs:
Input:'The country code associated with the country. Examples are CAD, USD, etc...'
Output:PROVIDED: CAD, USD +++ GENERATED: AFG, ALA, ALB, DZA, ASM, AND, AGO, AIA, ATA, ATG, ARG, ARM, ABW, AUS, AUT, AZE, BHS, BHR, BGD, BRB, BLR, BEL, 
BLZ, BEN, BMU, BTN, BOL, BES, BIH, BWA, BVT, BRA, IOT, BRN, BGR, BFA, BDI, CPV, KHM, CMR, CAN, CYM, CAF, TCD, 
CHL, CHN, CXR, CCK, COL, COM, COG, COD, COK, CRI, CIV, HRV, CUB, CUW, CYP, CZE, DNK, DJI, DMA, DOM, ECU, EGY, 
SLV, GNQ, ERI, EST, SWZ, ETH, FLK, FRO, FJI, FIN, FRA, GUF, PYF, ATF, GAB, GMB, GEO, DEU, GHA, GIB, GRC, GRL, 
GRD, GLP, GUM, GTM, GGY, GIN, GNB, GUY, HTI, HMD, VAT, HND, HKG, HUN, ISL, IND, IDN, IRN, IRQ, IRL, IMN, ISR, 
ITA, JAM, JPN, JEY, JOR, KAZ, KEN, KIR, PRK, KOR, KWT, KGZ, LAO, LVA, LBN, LSO, LBR, LBY, LIE, LTU, LUX, MAC, 
MDG, MWI, MYS, MDV, MLI, MLT, MHL, MTQ, MRT, MUS, MYT, MEX, FSM, MDA, MCO, MNG, MNE, MSR, MAR, MOZ, MMR, NAM, 
NRU, NPL, NLD, NCL, NZL, NIC, NER, NGA, NIU, NFK, MKD, MNP, NOR, OMN, PAK, PLW, PSE, PAN, PNG, PRY, PER, PHL, 
PCN, POL, PRT, PRI, QAT, REU, ROU, RUS, RWA, BLM, SHN, KNA, LCA, MAF, SPM, VCT, WSM, SMR, STP, SAU, SEN, SRB, 
SYC, SLE, SGP, SXM, SVK, SVN, SLB, SOM, ZAF, SGS, SSD, ESP, LKA, SDN, SUR, SJM, SWE, CHE, SYR, TWN, TJK, TZA, 
THA, TLS, TGO, TKL, TON, TTO, TUN, TUR, TKM, TCA, TUV, UGA, UKR, ARE, GBR, USA, UMI, URY, UZB, VUT, VEN, VNM, 
VGB, VIR, WLF, ESH, YEM, ZMB, ZWE
Input:'The numbers for the percent grades must be to one decimal place (such as 10.6).'
Output:PROVIDED: 10.6 +++ GENERATED: 0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0, 2.1, 
2.2, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8, 2.9, 3.0, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6, 3.7, 3.8, 3.9, 4.0, 4.1, 4.2, 4.3, 4.4, 
4.5, 4.6, 4.7, 4.8, 4.9, 5.0, 5.1, 5.2, 5.3, 10.0, 99.9, 100.0
Input:'The title of the book to be rated.'
Output:PROVIDED: None +++ GENERATED: To Kill a Mockingbird, 1984, Pride and Prejudice, The Great Gatsby, Moby-Dick, The Catcher in the Rye, Harry Potter 
and the Sorcerer's Stone, The Lord of the Rings, One Hundred Years of Solitude, Brave New World, Sapiens: A Brief 
History of Humankind, The Immortal Life of Henrietta Lacks, Thinking, Fast and Slow, The Wright Brothers, The Diary of 
a Young Girl, Educated, The Art of War, The 7 Habits of Highly Effective People, Freakonomics, Quiet: The Power of 
Introverts in a World That Can't Stop Talking, Dune, Ender's Game, Neuromancer
Input:'The value for the number of products to consume. It must be greater than 12 and less than 50.'
Output:PROVIDED: None +++ GENERATED: None
Input:'The number of bank accounts associated. Cannot be less than 0.'
Output:PROVIDED: None +++ GENERATED: None
Input:The [Spotify ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for the playlist.
Output:",None
playlist_id,0.2,256,"
Analyze the provided API parameter description and first estimate the parameter type. Then, according to the type, apply the following to determine restrictions on the parameter input:
If it is a number, determine if the description mentions minimum, maximum, or default possible values and output: ""min [minimum], max [maximum], default [default]"". 
If it's a string, word, or code, determine if the description mentions minimum or maximum possible character amounts or a default value, and output: ""minLength [minimum], maxLength [maximum], default [default]"". 
If it's an array or list, determine if the description mentions minimum or maximum possible list lengths or a default value, and output: ""minItems [minimum], maxItems [maximum], default [default]"".
If it's an object, determine if the description mentions minimum or maximum possible numbers of object properties or a default value, and output: ""minProperties [minimum], maxProperties [maximum], default [default]"".
If it is any other data type where there is a default value provided, output: ""min None, max None, default [default]"".
If you are unable to determine any minimum, maximum, or default restrictions, output ""None"". If you are able to determine only one either the minimum or maximum, output the undetermined value as ""None"".

Assume any ""
"" values in the input indicate either new lines or spaces. 

Here are some examples of inputs and expected outputs:

Input:'An idea for a project. This and 'rating' are required.'
Output:None
Input:'The maximum value is 50. If nothing is put in, default to 0.'
Output:min None, max 50, default 0
Input:'The timer counter. The value must be between 15.0 and 120.'
Output:min 15.0, max 120, default None
Input:'The input range. The smallest value possible is -120.8. The largest should be 179.652.'
Output:min -120.8, max 179.652, default None
Input:'The number of items to be investigated. The maximum is 9,999.99'
Output:min None, max 9999.99, default None
Input:'The name of the movie. The movie name cannot be shorter than 10 characters and longer than 20 characters.'
Output:minLength 10, maxLength 20, default None
Input:'The country code which can be 1-letter, 2-letter, or 3-letter.'
Output:minLength 1, maxLength 3, default None
Input:'A supplied language code that can either be 2-letter or 3-letter which is used to parse through a list of common phrases.'
Output:minLength 2, maxLength 3, default None
Input:'Search via county areas.'
Output:None
Input:'Identifies synonyms through word inputs.'
Output:None
Input:'After searching through a list of ISO country codes, input 2-letter or 3-letter codes to find their data.'
Output:minLength 2, maxLength 3, default None
Input:The [Spotify ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for the playlist.
Output:",None
playlist_id,0.2,256,"
Analyze the provided API parameter description and determine whether it clearly identifies the parameter's data type 
or formatting. 
The list of possible data types are as follows: string, number, integer, boolean, array, and object.
The list of format options are as follows: time, date, password, byte, binary, email, uuid, uri, url, hostname, ipv4, and ipv6. Use the types and formats available for the OpenAPI Specification. 
A list of collectionFormat types are as follows: csv, ssv, and pipes.
If the data type is an array, attempt to identify its item type. 
Output the answer as follows: ""type [type], items [item type], format [format], collectionFormat [collectionFormat]"". Output None when unable to determine any of the categories. 
For example, only output a non-None ""item type"" if the ""type"" is array.

Assume any ""
"" values in the input indicate either new lines or spaces. 

Here are some examples of inputs and expected outputs:

Input:'A space-separated list of percent grades corresponding to the student.'
Output:type array, items number, format None, collectionFormat ssv
Input:'This should contain the email of the sender.'
Output:type string, items None, format email, collectionFormat None
Input:'This value should be true if the assignment is available for regrade.'
Output:type boolean, items None, format None, collectionFormat None
Input:'A URL containing the website for evaluation.'
Output:type string, items None, format url, collectionFormat None
Input:'The date of the contest. The date must be within the last three months.'
Output:type string, items None, format date, collectionFormat None
Input:'The time that the project must be completed. Use Eastern Standard Timezone (EST).'
Output:type string, items None, format date-time, collectionFormat None
Input:'A list of region codes.'
Output:type array, items None, format None, collectionFormat None
Input:The [Spotify ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for the playlist.
Output:",None
playlist_id,0.2,256,"
Identify the API parameter object by the grouping of its ""name"" and ""description"". Analyze the parameter description and extract logical constraints
in the provided format. Evaluate each case and determine whether it is applicable. Strictly follow the format and make no inferences. Only consider constraints
that are strictly required. Interpret the description in the least constraining manner, and assume Case 1 unless the other cases are obvious:

Case 1: The description isn't definitive about parameter requirements. Output ""None"".
Case 2: The description states the parameter ""name"" is required. Output: ""REQUIRED: name"". 
Case 3: The description states that parameter ""name"" or another parameter ""name"" is required. Output: ""Or(name, name)""
Case 4: The description states that given a set of parameters name, name_2, . . . , name_n, zero or one can be present in the API call: Output: ""ZeroOrOne(name, name_2, ... name_n)""
Case 5: The description states that given a set of parameters name, name_2, . . . , name_n, exactly one must be present in the API call: Output: ""OnlyOne(name, name_2, ... name_n)""
Case 6: The description states that given a set of parameters name, name_2, . . . , name_n, all of them or none must be present in the API call: Output: ""AllOrNone(name, name_2, ... name_n)""
Case 7: The description states that there is a relational relationship between some parameters: Output: ""name >= name_2"", where the standard relational operators can be used
Case 8: The description states that there is an arithmetic relationship between the value of parameters: Output: ""name_1 + name_2 <= value"", where the standard arithmetic operators can be used
Case 9: The description states there is a conditional relationship between parameters: Output: ""IF name THEN name_2"", where the standard logical operators can be used
Case 10: The description states that there exists a complex relationship between parameters, you can combine rules from the grammar to express a statement: Output: ""IF name==value THEN OnlyOne(name_2 AND name_3, name_4 AND name_5);

The grammar for statements is succinctly defined as follows:

Model:
    Dependency*;
Dependency:
    RelationalDependency | ArithmeticDependency |
    ConditionalDependency | PredefinedDependency;
RelationalDependency:
    Param RelationalOperator Param;
ArithmeticDependency:
    Operation RelationalOperator DOUBLE;
Operation:
    Param OperationContinuation |
    '(' Operation ')' OperationContinuation?;
OperationContinuation:
    ArithmeticOperator (Param | Operation);
ConditionalDependency:
    'IF' Predicate 'THEN' Predicate;
Predicate:
    Clause ClauseContinuation?;
Clause:
    (Term | RelationalDependency | ArithmeticDependency
    | PredefinedDependency) | 'NOT'? '(' Predicate ')';
Term:
    'NOT'? (Param | ParamValueRelation);
Param:
    ID | '[' ID ']';
ParamValueRelation:
    Param '==' STRING('|'STRING)* |
    Param 'LIKE' PATTERN_STRING | Param '==' BOOLEAN |
    Param RelationalOperator DOUBLE;
ClauseContinuation:
    ('AND' | 'OR') Predicate;
PredefinedDependency:
    'NOT'? ('Or' | 'OnlyOne' | 'AllOrNone' |
    'ZeroOrOne') '(' Clause (',' Clause)+ ')';
RelationalOperator:
    '<' | '>' | '<=' | '>=' | '==' | '!=';
ArithmeticOperator:
    '+' | '-' | '*' | '/';

If there are multiple dependency statements, return each one on a new line. Do not include any other text. Do not create dependencies on expected API responses.
Assume any ""
"" values in the input indicate either new lines or spaces. 
Here are some examples of expected outputs:

Input:
name: text 
description: The text to be checked. This or 'data' is required.
Output:Or(text, data);
Input: 
     name: idea
     description: 'An idea for a project. This and 'rating' are required.'
Output:OnlyOne(idea AND rating);
Input:
      name: partID
      description: 'The ID of the part. If partModel is specified partID must be specified'
Output:IF partModel THEN partID;
Input:
       name: language 
       description: The language of the client, not required if the country-code is USA or CAN.
Output:IF country-code!='USA' OR country-code=='CAN' THEN language;
Input:
        name: cost
        description: The cost of the product, this - profit must be greater than 500.
Output:cost - profit > 500;
Input:The [Spotify ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for the playlist.
Output:",None
playlist_id,0.2,256,"
Analyze the provided API parameter description, and extract any example values for the parameter mentioned in the description. 
Then, generate a few additional example values that correspond to, or are in the same category as the provided values.
If there are no example values provided, simply generate values corresponding to the description, and always generate values when possible.  
If generating example values is not possible, return None. Consider the following cases: 

Case 1: The description contains example values USA, CAN, ZWE: Output: ""PROVIDED: USA, CAN, ZWE +++ GENERATED: BRA, FRA, GER ...""
Case 2: The description does not explicitly mention example values: Output: ""PROVIDED: None +++ GENERATED: BRA, FRA, GER, USA ...""
Case 3: The description does not explicitly mention example values, and it is not possible to generate example values: Output: ""None""

Assume any ""
"" values in the input represent spaces or new lines. Do not output any ""
"" strings.

Here are some examples of inputs and expected outputs:
Input:'The country code associated with the country. Examples are CAD, USD, etc...'
Output:PROVIDED: CAD, USD +++ GENERATED: AFG, ALA, ALB, DZA, ASM, AND, AGO, AIA, ATA, ATG, ARG, ARM, ABW, AUS, AUT, AZE, BHS, BHR, BGD, BRB, BLR, BEL, 
BLZ, BEN, BMU, BTN, BOL, BES, BIH, BWA, BVT, BRA, IOT, BRN, BGR, BFA, BDI, CPV, KHM, CMR, CAN, CYM, CAF, TCD, 
CHL, CHN, CXR, CCK, COL, COM, COG, COD, COK, CRI, CIV, HRV, CUB, CUW, CYP, CZE, DNK, DJI, DMA, DOM, ECU, EGY, 
SLV, GNQ, ERI, EST, SWZ, ETH, FLK, FRO, FJI, FIN, FRA, GUF, PYF, ATF, GAB, GMB, GEO, DEU, GHA, GIB, GRC, GRL, 
GRD, GLP, GUM, GTM, GGY, GIN, GNB, GUY, HTI, HMD, VAT, HND, HKG, HUN, ISL, IND, IDN, IRN, IRQ, IRL, IMN, ISR, 
ITA, JAM, JPN, JEY, JOR, KAZ, KEN, KIR, PRK, KOR, KWT, KGZ, LAO, LVA, LBN, LSO, LBR, LBY, LIE, LTU, LUX, MAC, 
MDG, MWI, MYS, MDV, MLI, MLT, MHL, MTQ, MRT, MUS, MYT, MEX, FSM, MDA, MCO, MNG, MNE, MSR, MAR, MOZ, MMR, NAM, 
NRU, NPL, NLD, NCL, NZL, NIC, NER, NGA, NIU, NFK, MKD, MNP, NOR, OMN, PAK, PLW, PSE, PAN, PNG, PRY, PER, PHL, 
PCN, POL, PRT, PRI, QAT, REU, ROU, RUS, RWA, BLM, SHN, KNA, LCA, MAF, SPM, VCT, WSM, SMR, STP, SAU, SEN, SRB, 
SYC, SLE, SGP, SXM, SVK, SVN, SLB, SOM, ZAF, SGS, SSD, ESP, LKA, SDN, SUR, SJM, SWE, CHE, SYR, TWN, TJK, TZA, 
THA, TLS, TGO, TKL, TON, TTO, TUN, TUR, TKM, TCA, TUV, UGA, UKR, ARE, GBR, USA, UMI, URY, UZB, VUT, VEN, VNM, 
VGB, VIR, WLF, ESH, YEM, ZMB, ZWE
Input:'The numbers for the percent grades must be to one decimal place (such as 10.6).'
Output:PROVIDED: 10.6 +++ GENERATED: 0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0, 2.1, 
2.2, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8, 2.9, 3.0, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6, 3.7, 3.8, 3.9, 4.0, 4.1, 4.2, 4.3, 4.4, 
4.5, 4.6, 4.7, 4.8, 4.9, 5.0, 5.1, 5.2, 5.3, 10.0, 99.9, 100.0
Input:'The title of the book to be rated.'
Output:PROVIDED: None +++ GENERATED: To Kill a Mockingbird, 1984, Pride and Prejudice, The Great Gatsby, Moby-Dick, The Catcher in the Rye, Harry Potter 
and the Sorcerer's Stone, The Lord of the Rings, One Hundred Years of Solitude, Brave New World, Sapiens: A Brief 
History of Humankind, The Immortal Life of Henrietta Lacks, Thinking, Fast and Slow, The Wright Brothers, The Diary of 
a Young Girl, Educated, The Art of War, The 7 Habits of Highly Effective People, Freakonomics, Quiet: The Power of 
Introverts in a World That Can't Stop Talking, Dune, Ender's Game, Neuromancer
Input:'The value for the number of products to consume. It must be greater than 12 and less than 50.'
Output:PROVIDED: None +++ GENERATED: None
Input:'The number of bank accounts associated. Cannot be less than 0.'
Output:PROVIDED: None +++ GENERATED: None
Input:The [Spotify ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)
Output:",None
playlist_id,0.2,256,"
Analyze the provided API parameter description and first estimate the parameter type. Then, according to the type, apply the following to determine restrictions on the parameter input:
If it is a number, determine if the description mentions minimum, maximum, or default possible values and output: ""min [minimum], max [maximum], default [default]"". 
If it's a string, word, or code, determine if the description mentions minimum or maximum possible character amounts or a default value, and output: ""minLength [minimum], maxLength [maximum], default [default]"". 
If it's an array or list, determine if the description mentions minimum or maximum possible list lengths or a default value, and output: ""minItems [minimum], maxItems [maximum], default [default]"".
If it's an object, determine if the description mentions minimum or maximum possible numbers of object properties or a default value, and output: ""minProperties [minimum], maxProperties [maximum], default [default]"".
If it is any other data type where there is a default value provided, output: ""min None, max None, default [default]"".
If you are unable to determine any minimum, maximum, or default restrictions, output ""None"". If you are able to determine only one either the minimum or maximum, output the undetermined value as ""None"".

Assume any ""
"" values in the input indicate either new lines or spaces. 

Here are some examples of inputs and expected outputs:

Input:'An idea for a project. This and 'rating' are required.'
Output:None
Input:'The maximum value is 50. If nothing is put in, default to 0.'
Output:min None, max 50, default 0
Input:'The timer counter. The value must be between 15.0 and 120.'
Output:min 15.0, max 120, default None
Input:'The input range. The smallest value possible is -120.8. The largest should be 179.652.'
Output:min -120.8, max 179.652, default None
Input:'The number of items to be investigated. The maximum is 9,999.99'
Output:min None, max 9999.99, default None
Input:'The name of the movie. The movie name cannot be shorter than 10 characters and longer than 20 characters.'
Output:minLength 10, maxLength 20, default None
Input:'The country code which can be 1-letter, 2-letter, or 3-letter.'
Output:minLength 1, maxLength 3, default None
Input:'A supplied language code that can either be 2-letter or 3-letter which is used to parse through a list of common phrases.'
Output:minLength 2, maxLength 3, default None
Input:'Search via county areas.'
Output:None
Input:'Identifies synonyms through word inputs.'
Output:None
Input:'After searching through a list of ISO country codes, input 2-letter or 3-letter codes to find their data.'
Output:minLength 2, maxLength 3, default None
Input:The [Spotify ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)
Output:",None
playlist_id,0.2,256,"
Analyze the provided API parameter description and determine whether it clearly identifies the parameter's data type 
or formatting. 
The list of possible data types are as follows: string, number, integer, boolean, array, and object.
The list of format options are as follows: time, date, password, byte, binary, email, uuid, uri, url, hostname, ipv4, and ipv6. Use the types and formats available for the OpenAPI Specification. 
A list of collectionFormat types are as follows: csv, ssv, and pipes.
If the data type is an array, attempt to identify its item type. 
Output the answer as follows: ""type [type], items [item type], format [format], collectionFormat [collectionFormat]"". Output None when unable to determine any of the categories. 
For example, only output a non-None ""item type"" if the ""type"" is array.

Assume any ""
"" values in the input indicate either new lines or spaces. 

Here are some examples of inputs and expected outputs:

Input:'A space-separated list of percent grades corresponding to the student.'
Output:type array, items number, format None, collectionFormat ssv
Input:'This should contain the email of the sender.'
Output:type string, items None, format email, collectionFormat None
Input:'This value should be true if the assignment is available for regrade.'
Output:type boolean, items None, format None, collectionFormat None
Input:'A URL containing the website for evaluation.'
Output:type string, items None, format url, collectionFormat None
Input:'The date of the contest. The date must be within the last three months.'
Output:type string, items None, format date, collectionFormat None
Input:'The time that the project must be completed. Use Eastern Standard Timezone (EST).'
Output:type string, items None, format date-time, collectionFormat None
Input:'A list of region codes.'
Output:type array, items None, format None, collectionFormat None
Input:The [Spotify ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)
Output:",None
playlist_id,0.2,256,"
Identify the API parameter object by the grouping of its ""name"" and ""description"". Analyze the parameter description and extract logical constraints
in the provided format. Evaluate each case and determine whether it is applicable. Strictly follow the format and make no inferences. Only consider constraints
that are strictly required. Interpret the description in the least constraining manner, and assume Case 1 unless the other cases are obvious:

Case 1: The description isn't definitive about parameter requirements. Output ""None"".
Case 2: The description states the parameter ""name"" is required. Output: ""REQUIRED: name"". 
Case 3: The description states that parameter ""name"" or another parameter ""name"" is required. Output: ""Or(name, name)""
Case 4: The description states that given a set of parameters name, name_2, . . . , name_n, zero or one can be present in the API call: Output: ""ZeroOrOne(name, name_2, ... name_n)""
Case 5: The description states that given a set of parameters name, name_2, . . . , name_n, exactly one must be present in the API call: Output: ""OnlyOne(name, name_2, ... name_n)""
Case 6: The description states that given a set of parameters name, name_2, . . . , name_n, all of them or none must be present in the API call: Output: ""AllOrNone(name, name_2, ... name_n)""
Case 7: The description states that there is a relational relationship between some parameters: Output: ""name >= name_2"", where the standard relational operators can be used
Case 8: The description states that there is an arithmetic relationship between the value of parameters: Output: ""name_1 + name_2 <= value"", where the standard arithmetic operators can be used
Case 9: The description states there is a conditional relationship between parameters: Output: ""IF name THEN name_2"", where the standard logical operators can be used
Case 10: The description states that there exists a complex relationship between parameters, you can combine rules from the grammar to express a statement: Output: ""IF name==value THEN OnlyOne(name_2 AND name_3, name_4 AND name_5);

The grammar for statements is succinctly defined as follows:

Model:
    Dependency*;
Dependency:
    RelationalDependency | ArithmeticDependency |
    ConditionalDependency | PredefinedDependency;
RelationalDependency:
    Param RelationalOperator Param;
ArithmeticDependency:
    Operation RelationalOperator DOUBLE;
Operation:
    Param OperationContinuation |
    '(' Operation ')' OperationContinuation?;
OperationContinuation:
    ArithmeticOperator (Param | Operation);
ConditionalDependency:
    'IF' Predicate 'THEN' Predicate;
Predicate:
    Clause ClauseContinuation?;
Clause:
    (Term | RelationalDependency | ArithmeticDependency
    | PredefinedDependency) | 'NOT'? '(' Predicate ')';
Term:
    'NOT'? (Param | ParamValueRelation);
Param:
    ID | '[' ID ']';
ParamValueRelation:
    Param '==' STRING('|'STRING)* |
    Param 'LIKE' PATTERN_STRING | Param '==' BOOLEAN |
    Param RelationalOperator DOUBLE;
ClauseContinuation:
    ('AND' | 'OR') Predicate;
PredefinedDependency:
    'NOT'? ('Or' | 'OnlyOne' | 'AllOrNone' |
    'ZeroOrOne') '(' Clause (',' Clause)+ ')';
RelationalOperator:
    '<' | '>' | '<=' | '>=' | '==' | '!=';
ArithmeticOperator:
    '+' | '-' | '*' | '/';

If there are multiple dependency statements, return each one on a new line. Do not include any other text. Do not create dependencies on expected API responses.
Assume any ""
"" values in the input indicate either new lines or spaces. 
Here are some examples of expected outputs:

Input:
name: text 
description: The text to be checked. This or 'data' is required.
Output:Or(text, data);
Input: 
     name: idea
     description: 'An idea for a project. This and 'rating' are required.'
Output:OnlyOne(idea AND rating);
Input:
      name: partID
      description: 'The ID of the part. If partModel is specified partID must be specified'
Output:IF partModel THEN partID;
Input:
       name: language 
       description: The language of the client, not required if the country-code is USA or CAN.
Output:IF country-code!='USA' OR country-code=='CAN' THEN language;
Input:
        name: cost
        description: The cost of the product, this - profit must be greater than 500.
Output:cost - profit > 500;
Input:The [Spotify ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)
Output:",None
snapshot_id,0.2,256,"
Analyze the provided API parameter description, and extract any example values for the parameter mentioned in the description. 
Then, generate a few additional example values that correspond to, or are in the same category as the provided values.
If there are no example values provided, simply generate values corresponding to the description, and always generate values when possible.  
If generating example values is not possible, return None. Consider the following cases: 

Case 1: The description contains example values USA, CAN, ZWE: Output: ""PROVIDED: USA, CAN, ZWE +++ GENERATED: BRA, FRA, GER ...""
Case 2: The description does not explicitly mention example values: Output: ""PROVIDED: None +++ GENERATED: BRA, FRA, GER, USA ...""
Case 3: The description does not explicitly mention example values, and it is not possible to generate example values: Output: ""None""

Assume any ""
"" values in the input represent spaces or new lines. Do not output any ""
"" strings.

Here are some examples of inputs and expected outputs:
Input:'The country code associated with the country. Examples are CAD, USD, etc...'
Output:PROVIDED: CAD, USD +++ GENERATED: AFG, ALA, ALB, DZA, ASM, AND, AGO, AIA, ATA, ATG, ARG, ARM, ABW, AUS, AUT, AZE, BHS, BHR, BGD, BRB, BLR, BEL, 
BLZ, BEN, BMU, BTN, BOL, BES, BIH, BWA, BVT, BRA, IOT, BRN, BGR, BFA, BDI, CPV, KHM, CMR, CAN, CYM, CAF, TCD, 
CHL, CHN, CXR, CCK, COL, COM, COG, COD, COK, CRI, CIV, HRV, CUB, CUW, CYP, CZE, DNK, DJI, DMA, DOM, ECU, EGY, 
SLV, GNQ, ERI, EST, SWZ, ETH, FLK, FRO, FJI, FIN, FRA, GUF, PYF, ATF, GAB, GMB, GEO, DEU, GHA, GIB, GRC, GRL, 
GRD, GLP, GUM, GTM, GGY, GIN, GNB, GUY, HTI, HMD, VAT, HND, HKG, HUN, ISL, IND, IDN, IRN, IRQ, IRL, IMN, ISR, 
ITA, JAM, JPN, JEY, JOR, KAZ, KEN, KIR, PRK, KOR, KWT, KGZ, LAO, LVA, LBN, LSO, LBR, LBY, LIE, LTU, LUX, MAC, 
MDG, MWI, MYS, MDV, MLI, MLT, MHL, MTQ, MRT, MUS, MYT, MEX, FSM, MDA, MCO, MNG, MNE, MSR, MAR, MOZ, MMR, NAM, 
NRU, NPL, NLD, NCL, NZL, NIC, NER, NGA, NIU, NFK, MKD, MNP, NOR, OMN, PAK, PLW, PSE, PAN, PNG, PRY, PER, PHL, 
PCN, POL, PRT, PRI, QAT, REU, ROU, RUS, RWA, BLM, SHN, KNA, LCA, MAF, SPM, VCT, WSM, SMR, STP, SAU, SEN, SRB, 
SYC, SLE, SGP, SXM, SVK, SVN, SLB, SOM, ZAF, SGS, SSD, ESP, LKA, SDN, SUR, SJM, SWE, CHE, SYR, TWN, TJK, TZA, 
THA, TLS, TGO, TKL, TON, TTO, TUN, TUR, TKM, TCA, TUV, UGA, UKR, ARE, GBR, USA, UMI, URY, UZB, VUT, VEN, VNM, 
VGB, VIR, WLF, ESH, YEM, ZMB, ZWE
Input:'The numbers for the percent grades must be to one decimal place (such as 10.6).'
Output:PROVIDED: 10.6 +++ GENERATED: 0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0, 2.1, 
2.2, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8, 2.9, 3.0, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6, 3.7, 3.8, 3.9, 4.0, 4.1, 4.2, 4.3, 4.4, 
4.5, 4.6, 4.7, 4.8, 4.9, 5.0, 5.1, 5.2, 5.3, 10.0, 99.9, 100.0
Input:'The title of the book to be rated.'
Output:PROVIDED: None +++ GENERATED: To Kill a Mockingbird, 1984, Pride and Prejudice, The Great Gatsby, Moby-Dick, The Catcher in the Rye, Harry Potter 
and the Sorcerer's Stone, The Lord of the Rings, One Hundred Years of Solitude, Brave New World, Sapiens: A Brief 
History of Humankind, The Immortal Life of Henrietta Lacks, Thinking, Fast and Slow, The Wright Brothers, The Diary of 
a Young Girl, Educated, The Art of War, The 7 Habits of Highly Effective People, Freakonomics, Quiet: The Power of 
Introverts in a World That Can't Stop Talking, Dune, Ender's Game, Neuromancer
Input:'The value for the number of products to consume. It must be greater than 12 and less than 50.'
Output:PROVIDED: None +++ GENERATED: None
Input:'The number of bank accounts associated. Cannot be less than 0.'
Output:PROVIDED: None +++ GENERATED: None
Input:The playlist's snapshot ID against which you want to make the changes. The API will validate that the specified items exist and in the specified positions and make the changes, even if more recent changes have been made to the playlist.
Output:",None
snapshot_id,0.2,256,"
Analyze the provided API parameter description and first estimate the parameter type. Then, according to the type, apply the following to determine restrictions on the parameter input:
If it is a number, determine if the description mentions minimum, maximum, or default possible values and output: ""min [minimum], max [maximum], default [default]"". 
If it's a string, word, or code, determine if the description mentions minimum or maximum possible character amounts or a default value, and output: ""minLength [minimum], maxLength [maximum], default [default]"". 
If it's an array or list, determine if the description mentions minimum or maximum possible list lengths or a default value, and output: ""minItems [minimum], maxItems [maximum], default [default]"".
If it's an object, determine if the description mentions minimum or maximum possible numbers of object properties or a default value, and output: ""minProperties [minimum], maxProperties [maximum], default [default]"".
If it is any other data type where there is a default value provided, output: ""min None, max None, default [default]"".
If you are unable to determine any minimum, maximum, or default restrictions, output ""None"". If you are able to determine only one either the minimum or maximum, output the undetermined value as ""None"".

Assume any ""
"" values in the input indicate either new lines or spaces. 

Here are some examples of inputs and expected outputs:

Input:'An idea for a project. This and 'rating' are required.'
Output:None
Input:'The maximum value is 50. If nothing is put in, default to 0.'
Output:min None, max 50, default 0
Input:'The timer counter. The value must be between 15.0 and 120.'
Output:min 15.0, max 120, default None
Input:'The input range. The smallest value possible is -120.8. The largest should be 179.652.'
Output:min -120.8, max 179.652, default None
Input:'The number of items to be investigated. The maximum is 9,999.99'
Output:min None, max 9999.99, default None
Input:'The name of the movie. The movie name cannot be shorter than 10 characters and longer than 20 characters.'
Output:minLength 10, maxLength 20, default None
Input:'The country code which can be 1-letter, 2-letter, or 3-letter.'
Output:minLength 1, maxLength 3, default None
Input:'A supplied language code that can either be 2-letter or 3-letter which is used to parse through a list of common phrases.'
Output:minLength 2, maxLength 3, default None
Input:'Search via county areas.'
Output:None
Input:'Identifies synonyms through word inputs.'
Output:None
Input:'After searching through a list of ISO country codes, input 2-letter or 3-letter codes to find their data.'
Output:minLength 2, maxLength 3, default None
Input:The playlist's snapshot ID against which you want to make the changes. The API will validate that the specified items exist and in the specified positions and make the changes, even if more recent changes have been made to the playlist.
Output:",None
snapshot_id,0.2,256,"
Analyze the provided API parameter description and determine whether it clearly identifies the parameter's data type 
or formatting. 
The list of possible data types are as follows: string, number, integer, boolean, array, and object.
The list of format options are as follows: time, date, password, byte, binary, email, uuid, uri, url, hostname, ipv4, and ipv6. Use the types and formats available for the OpenAPI Specification. 
A list of collectionFormat types are as follows: csv, ssv, and pipes.
If the data type is an array, attempt to identify its item type. 
Output the answer as follows: ""type [type], items [item type], format [format], collectionFormat [collectionFormat]"". Output None when unable to determine any of the categories. 
For example, only output a non-None ""item type"" if the ""type"" is array.

Assume any ""
"" values in the input indicate either new lines or spaces. 

Here are some examples of inputs and expected outputs:

Input:'A space-separated list of percent grades corresponding to the student.'
Output:type array, items number, format None, collectionFormat ssv
Input:'This should contain the email of the sender.'
Output:type string, items None, format email, collectionFormat None
Input:'This value should be true if the assignment is available for regrade.'
Output:type boolean, items None, format None, collectionFormat None
Input:'A URL containing the website for evaluation.'
Output:type string, items None, format url, collectionFormat None
Input:'The date of the contest. The date must be within the last three months.'
Output:type string, items None, format date, collectionFormat None
Input:'The time that the project must be completed. Use Eastern Standard Timezone (EST).'
Output:type string, items None, format date-time, collectionFormat None
Input:'A list of region codes.'
Output:type array, items None, format None, collectionFormat None
Input:The playlist's snapshot ID against which you want to make the changes. The API will validate that the specified items exist and in the specified positions and make the changes, even if more recent changes have been made to the playlist.
Output:",None
snapshot_id,0.2,256,"
Identify the API parameter object by the grouping of its ""name"" and ""description"". Analyze the parameter description and extract logical constraints
in the provided format. Evaluate each case and determine whether it is applicable. Strictly follow the format and make no inferences. Only consider constraints
that are strictly required. Interpret the description in the least constraining manner, and assume Case 1 unless the other cases are obvious:

Case 1: The description isn't definitive about parameter requirements. Output ""None"".
Case 2: The description states the parameter ""name"" is required. Output: ""REQUIRED: name"". 
Case 3: The description states that parameter ""name"" or another parameter ""name"" is required. Output: ""Or(name, name)""
Case 4: The description states that given a set of parameters name, name_2, . . . , name_n, zero or one can be present in the API call: Output: ""ZeroOrOne(name, name_2, ... name_n)""
Case 5: The description states that given a set of parameters name, name_2, . . . , name_n, exactly one must be present in the API call: Output: ""OnlyOne(name, name_2, ... name_n)""
Case 6: The description states that given a set of parameters name, name_2, . . . , name_n, all of them or none must be present in the API call: Output: ""AllOrNone(name, name_2, ... name_n)""
Case 7: The description states that there is a relational relationship between some parameters: Output: ""name >= name_2"", where the standard relational operators can be used
Case 8: The description states that there is an arithmetic relationship between the value of parameters: Output: ""name_1 + name_2 <= value"", where the standard arithmetic operators can be used
Case 9: The description states there is a conditional relationship between parameters: Output: ""IF name THEN name_2"", where the standard logical operators can be used
Case 10: The description states that there exists a complex relationship between parameters, you can combine rules from the grammar to express a statement: Output: ""IF name==value THEN OnlyOne(name_2 AND name_3, name_4 AND name_5);

The grammar for statements is succinctly defined as follows:

Model:
    Dependency*;
Dependency:
    RelationalDependency | ArithmeticDependency |
    ConditionalDependency | PredefinedDependency;
RelationalDependency:
    Param RelationalOperator Param;
ArithmeticDependency:
    Operation RelationalOperator DOUBLE;
Operation:
    Param OperationContinuation |
    '(' Operation ')' OperationContinuation?;
OperationContinuation:
    ArithmeticOperator (Param | Operation);
ConditionalDependency:
    'IF' Predicate 'THEN' Predicate;
Predicate:
    Clause ClauseContinuation?;
Clause:
    (Term | RelationalDependency | ArithmeticDependency
    | PredefinedDependency) | 'NOT'? '(' Predicate ')';
Term:
    'NOT'? (Param | ParamValueRelation);
Param:
    ID | '[' ID ']';
ParamValueRelation:
    Param '==' STRING('|'STRING)* |
    Param 'LIKE' PATTERN_STRING | Param '==' BOOLEAN |
    Param RelationalOperator DOUBLE;
ClauseContinuation:
    ('AND' | 'OR') Predicate;
PredefinedDependency:
    'NOT'? ('Or' | 'OnlyOne' | 'AllOrNone' |
    'ZeroOrOne') '(' Clause (',' Clause)+ ')';
RelationalOperator:
    '<' | '>' | '<=' | '>=' | '==' | '!=';
ArithmeticOperator:
    '+' | '-' | '*' | '/';

If there are multiple dependency statements, return each one on a new line. Do not include any other text. Do not create dependencies on expected API responses.
Assume any ""
"" values in the input indicate either new lines or spaces. 
Here are some examples of expected outputs:

Input:
name: text 
description: The text to be checked. This or 'data' is required.
Output:Or(text, data);
Input: 
     name: idea
     description: 'An idea for a project. This and 'rating' are required.'
Output:OnlyOne(idea AND rating);
Input:
      name: partID
      description: 'The ID of the part. If partModel is specified partID must be specified'
Output:IF partModel THEN partID;
Input:
       name: language 
       description: The language of the client, not required if the country-code is USA or CAN.
Output:IF country-code!='USA' OR country-code=='CAN' THEN language;
Input:
        name: cost
        description: The cost of the product, this - profit must be greater than 500.
Output:cost - profit > 500;
Input:The playlist's snapshot ID against which you want to make the changes. The API will validate that the specified items exist and in the specified positions and make the changes, even if more recent changes have been made to the playlist.
Output:",None
tracks,0.2,256,"
Analyze the provided API parameter description, and extract any example values for the parameter mentioned in the description. 
Then, generate a few additional example values that correspond to, or are in the same category as the provided values.
If there are no example values provided, simply generate values corresponding to the description, and always generate values when possible.  
If generating example values is not possible, return None. Consider the following cases: 

Case 1: The description contains example values USA, CAN, ZWE: Output: ""PROVIDED: USA, CAN, ZWE +++ GENERATED: BRA, FRA, GER ...""
Case 2: The description does not explicitly mention example values: Output: ""PROVIDED: None +++ GENERATED: BRA, FRA, GER, USA ...""
Case 3: The description does not explicitly mention example values, and it is not possible to generate example values: Output: ""None""

Assume any ""
"" values in the input represent spaces or new lines. Do not output any ""
"" strings.

Here are some examples of inputs and expected outputs:
Input:'The country code associated with the country. Examples are CAD, USD, etc...'
Output:PROVIDED: CAD, USD +++ GENERATED: AFG, ALA, ALB, DZA, ASM, AND, AGO, AIA, ATA, ATG, ARG, ARM, ABW, AUS, AUT, AZE, BHS, BHR, BGD, BRB, BLR, BEL, 
BLZ, BEN, BMU, BTN, BOL, BES, BIH, BWA, BVT, BRA, IOT, BRN, BGR, BFA, BDI, CPV, KHM, CMR, CAN, CYM, CAF, TCD, 
CHL, CHN, CXR, CCK, COL, COM, COG, COD, COK, CRI, CIV, HRV, CUB, CUW, CYP, CZE, DNK, DJI, DMA, DOM, ECU, EGY, 
SLV, GNQ, ERI, EST, SWZ, ETH, FLK, FRO, FJI, FIN, FRA, GUF, PYF, ATF, GAB, GMB, GEO, DEU, GHA, GIB, GRC, GRL, 
GRD, GLP, GUM, GTM, GGY, GIN, GNB, GUY, HTI, HMD, VAT, HND, HKG, HUN, ISL, IND, IDN, IRN, IRQ, IRL, IMN, ISR, 
ITA, JAM, JPN, JEY, JOR, KAZ, KEN, KIR, PRK, KOR, KWT, KGZ, LAO, LVA, LBN, LSO, LBR, LBY, LIE, LTU, LUX, MAC, 
MDG, MWI, MYS, MDV, MLI, MLT, MHL, MTQ, MRT, MUS, MYT, MEX, FSM, MDA, MCO, MNG, MNE, MSR, MAR, MOZ, MMR, NAM, 
NRU, NPL, NLD, NCL, NZL, NIC, NER, NGA, NIU, NFK, MKD, MNP, NOR, OMN, PAK, PLW, PSE, PAN, PNG, PRY, PER, PHL, 
PCN, POL, PRT, PRI, QAT, REU, ROU, RUS, RWA, BLM, SHN, KNA, LCA, MAF, SPM, VCT, WSM, SMR, STP, SAU, SEN, SRB, 
SYC, SLE, SGP, SXM, SVK, SVN, SLB, SOM, ZAF, SGS, SSD, ESP, LKA, SDN, SUR, SJM, SWE, CHE, SYR, TWN, TJK, TZA, 
THA, TLS, TGO, TKL, TON, TTO, TUN, TUR, TKM, TCA, TUV, UGA, UKR, ARE, GBR, USA, UMI, URY, UZB, VUT, VEN, VNM, 
VGB, VIR, WLF, ESH, YEM, ZMB, ZWE
Input:'The numbers for the percent grades must be to one decimal place (such as 10.6).'
Output:PROVIDED: 10.6 +++ GENERATED: 0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0, 2.1, 
2.2, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8, 2.9, 3.0, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6, 3.7, 3.8, 3.9, 4.0, 4.1, 4.2, 4.3, 4.4, 
4.5, 4.6, 4.7, 4.8, 4.9, 5.0, 5.1, 5.2, 5.3, 10.0, 99.9, 100.0
Input:'The title of the book to be rated.'
Output:PROVIDED: None +++ GENERATED: To Kill a Mockingbird, 1984, Pride and Prejudice, The Great Gatsby, Moby-Dick, The Catcher in the Rye, Harry Potter 
and the Sorcerer's Stone, The Lord of the Rings, One Hundred Years of Solitude, Brave New World, Sapiens: A Brief 
History of Humankind, The Immortal Life of Henrietta Lacks, Thinking, Fast and Slow, The Wright Brothers, The Diary of 
a Young Girl, Educated, The Art of War, The 7 Habits of Highly Effective People, Freakonomics, Quiet: The Power of 
Introverts in a World That Can't Stop Talking, Dune, Ender's Game, Neuromancer
Input:'The value for the number of products to consume. It must be greater than 12 and less than 50.'
Output:PROVIDED: None +++ GENERATED: None
Input:'The number of bank accounts associated. Cannot be less than 0.'
Output:PROVIDED: None +++ GENERATED: None
Input:An array of objects containing [Spotify URIs](https://developer.spotify.com/spotify-documentation/web-api/#spotify-uris-and-ids) of the tracks or episodes to remove. For example: `{ ""tracks"": [{ ""uri"": ""spotify:track:4iV5W9uYEdYUVa79Axb7Rh"" },{ ""uri"": ""spotify:track:1301WleyT98MSxVHPZCA6M"" }] }`. A maximum of 100 objects can be sent at once.
Output:",None
tracks,0.2,256,"
Analyze the provided API parameter description and first estimate the parameter type. Then, according to the type, apply the following to determine restrictions on the parameter input:
If it is a number, determine if the description mentions minimum, maximum, or default possible values and output: ""min [minimum], max [maximum], default [default]"". 
If it's a string, word, or code, determine if the description mentions minimum or maximum possible character amounts or a default value, and output: ""minLength [minimum], maxLength [maximum], default [default]"". 
If it's an array or list, determine if the description mentions minimum or maximum possible list lengths or a default value, and output: ""minItems [minimum], maxItems [maximum], default [default]"".
If it's an object, determine if the description mentions minimum or maximum possible numbers of object properties or a default value, and output: ""minProperties [minimum], maxProperties [maximum], default [default]"".
If it is any other data type where there is a default value provided, output: ""min None, max None, default [default]"".
If you are unable to determine any minimum, maximum, or default restrictions, output ""None"". If you are able to determine only one either the minimum or maximum, output the undetermined value as ""None"".

Assume any ""
"" values in the input indicate either new lines or spaces. 

Here are some examples of inputs and expected outputs:

Input:'An idea for a project. This and 'rating' are required.'
Output:None
Input:'The maximum value is 50. If nothing is put in, default to 0.'
Output:min None, max 50, default 0
Input:'The timer counter. The value must be between 15.0 and 120.'
Output:min 15.0, max 120, default None
Input:'The input range. The smallest value possible is -120.8. The largest should be 179.652.'
Output:min -120.8, max 179.652, default None
Input:'The number of items to be investigated. The maximum is 9,999.99'
Output:min None, max 9999.99, default None
Input:'The name of the movie. The movie name cannot be shorter than 10 characters and longer than 20 characters.'
Output:minLength 10, maxLength 20, default None
Input:'The country code which can be 1-letter, 2-letter, or 3-letter.'
Output:minLength 1, maxLength 3, default None
Input:'A supplied language code that can either be 2-letter or 3-letter which is used to parse through a list of common phrases.'
Output:minLength 2, maxLength 3, default None
Input:'Search via county areas.'
Output:None
Input:'Identifies synonyms through word inputs.'
Output:None
Input:'After searching through a list of ISO country codes, input 2-letter or 3-letter codes to find their data.'
Output:minLength 2, maxLength 3, default None
Input:An array of objects containing [Spotify URIs](https://developer.spotify.com/spotify-documentation/web-api/#spotify-uris-and-ids) of the tracks or episodes to remove. For example: `{ ""tracks"": [{ ""uri"": ""spotify:track:4iV5W9uYEdYUVa79Axb7Rh"" },{ ""uri"": ""spotify:track:1301WleyT98MSxVHPZCA6M"" }] }`. A maximum of 100 objects can be sent at once.
Output:","minItems None, maxItems 100, default None"
tracks,0.2,256,"
Analyze the provided API parameter description and determine whether it clearly identifies the parameter's data type 
or formatting. 
The list of possible data types are as follows: string, number, integer, boolean, array, and object.
The list of format options are as follows: time, date, password, byte, binary, email, uuid, uri, url, hostname, ipv4, and ipv6. Use the types and formats available for the OpenAPI Specification. 
A list of collectionFormat types are as follows: csv, ssv, and pipes.
If the data type is an array, attempt to identify its item type. 
Output the answer as follows: ""type [type], items [item type], format [format], collectionFormat [collectionFormat]"". Output None when unable to determine any of the categories. 
For example, only output a non-None ""item type"" if the ""type"" is array.

Assume any ""
"" values in the input indicate either new lines or spaces. 

Here are some examples of inputs and expected outputs:

Input:'A space-separated list of percent grades corresponding to the student.'
Output:type array, items number, format None, collectionFormat ssv
Input:'This should contain the email of the sender.'
Output:type string, items None, format email, collectionFormat None
Input:'This value should be true if the assignment is available for regrade.'
Output:type boolean, items None, format None, collectionFormat None
Input:'A URL containing the website for evaluation.'
Output:type string, items None, format url, collectionFormat None
Input:'The date of the contest. The date must be within the last three months.'
Output:type string, items None, format date, collectionFormat None
Input:'The time that the project must be completed. Use Eastern Standard Timezone (EST).'
Output:type string, items None, format date-time, collectionFormat None
Input:'A list of region codes.'
Output:type array, items None, format None, collectionFormat None
Input:An array of objects containing [Spotify URIs](https://developer.spotify.com/spotify-documentation/web-api/#spotify-uris-and-ids) of the tracks or episodes to remove. For example: `{ ""tracks"": [{ ""uri"": ""spotify:track:4iV5W9uYEdYUVa79Axb7Rh"" },{ ""uri"": ""spotify:track:1301WleyT98MSxVHPZCA6M"" }] }`. A maximum of 100 objects can be sent at once.
Output:",None
tracks,0.2,256,"
Identify the API parameter object by the grouping of its ""name"" and ""description"". Analyze the parameter description and extract logical constraints
in the provided format. Evaluate each case and determine whether it is applicable. Strictly follow the format and make no inferences. Only consider constraints
that are strictly required. Interpret the description in the least constraining manner, and assume Case 1 unless the other cases are obvious:

Case 1: The description isn't definitive about parameter requirements. Output ""None"".
Case 2: The description states the parameter ""name"" is required. Output: ""REQUIRED: name"". 
Case 3: The description states that parameter ""name"" or another parameter ""name"" is required. Output: ""Or(name, name)""
Case 4: The description states that given a set of parameters name, name_2, . . . , name_n, zero or one can be present in the API call: Output: ""ZeroOrOne(name, name_2, ... name_n)""
Case 5: The description states that given a set of parameters name, name_2, . . . , name_n, exactly one must be present in the API call: Output: ""OnlyOne(name, name_2, ... name_n)""
Case 6: The description states that given a set of parameters name, name_2, . . . , name_n, all of them or none must be present in the API call: Output: ""AllOrNone(name, name_2, ... name_n)""
Case 7: The description states that there is a relational relationship between some parameters: Output: ""name >= name_2"", where the standard relational operators can be used
Case 8: The description states that there is an arithmetic relationship between the value of parameters: Output: ""name_1 + name_2 <= value"", where the standard arithmetic operators can be used
Case 9: The description states there is a conditional relationship between parameters: Output: ""IF name THEN name_2"", where the standard logical operators can be used
Case 10: The description states that there exists a complex relationship between parameters, you can combine rules from the grammar to express a statement: Output: ""IF name==value THEN OnlyOne(name_2 AND name_3, name_4 AND name_5);

The grammar for statements is succinctly defined as follows:

Model:
    Dependency*;
Dependency:
    RelationalDependency | ArithmeticDependency |
    ConditionalDependency | PredefinedDependency;
RelationalDependency:
    Param RelationalOperator Param;
ArithmeticDependency:
    Operation RelationalOperator DOUBLE;
Operation:
    Param OperationContinuation |
    '(' Operation ')' OperationContinuation?;
OperationContinuation:
    ArithmeticOperator (Param | Operation);
ConditionalDependency:
    'IF' Predicate 'THEN' Predicate;
Predicate:
    Clause ClauseContinuation?;
Clause:
    (Term | RelationalDependency | ArithmeticDependency
    | PredefinedDependency) | 'NOT'? '(' Predicate ')';
Term:
    'NOT'? (Param | ParamValueRelation);
Param:
    ID | '[' ID ']';
ParamValueRelation:
    Param '==' STRING('|'STRING)* |
    Param 'LIKE' PATTERN_STRING | Param '==' BOOLEAN |
    Param RelationalOperator DOUBLE;
ClauseContinuation:
    ('AND' | 'OR') Predicate;
PredefinedDependency:
    'NOT'? ('Or' | 'OnlyOne' | 'AllOrNone' |
    'ZeroOrOne') '(' Clause (',' Clause)+ ')';
RelationalOperator:
    '<' | '>' | '<=' | '>=' | '==' | '!=';
ArithmeticOperator:
    '+' | '-' | '*' | '/';

If there are multiple dependency statements, return each one on a new line. Do not include any other text. Do not create dependencies on expected API responses.
Assume any ""
"" values in the input indicate either new lines or spaces. 
Here are some examples of expected outputs:

Input:
name: text 
description: The text to be checked. This or 'data' is required.
Output:Or(text, data);
Input: 
     name: idea
     description: 'An idea for a project. This and 'rating' are required.'
Output:OnlyOne(idea AND rating);
Input:
      name: partID
      description: 'The ID of the part. If partModel is specified partID must be specified'
Output:IF partModel THEN partID;
Input:
       name: language 
       description: The language of the client, not required if the country-code is USA or CAN.
Output:IF country-code!='USA' OR country-code=='CAN' THEN language;
Input:
        name: cost
        description: The cost of the product, this - profit must be greater than 500.
Output:cost - profit > 500;
Input:An array of objects containing [Spotify URIs](https://developer.spotify.com/spotify-documentation/web-api/#spotify-uris-and-ids) of the tracks or episodes to remove. For example: `{ ""tracks"": [{ ""uri"": ""spotify:track:4iV5W9uYEdYUVa79Axb7Rh"" },{ ""uri"": ""spotify:track:1301WleyT98MSxVHPZCA6M"" }] }`. A maximum of 100 objects can be sent at once.
Output:",None
playlist_id,0.2,256,"
Analyze the provided API parameter description, and extract any example values for the parameter mentioned in the description. 
Then, generate a few additional example values that correspond to, or are in the same category as the provided values.
If there are no example values provided, simply generate values corresponding to the description, and always generate values when possible.  
If generating example values is not possible, return None. Consider the following cases: 

Case 1: The description contains example values USA, CAN, ZWE: Output: ""PROVIDED: USA, CAN, ZWE +++ GENERATED: BRA, FRA, GER ...""
Case 2: The description does not explicitly mention example values: Output: ""PROVIDED: None +++ GENERATED: BRA, FRA, GER, USA ...""
Case 3: The description does not explicitly mention example values, and it is not possible to generate example values: Output: ""None""

Assume any ""
"" values in the input represent spaces or new lines. Do not output any ""
"" strings.

Here are some examples of inputs and expected outputs:
Input:'The country code associated with the country. Examples are CAD, USD, etc...'
Output:PROVIDED: CAD, USD +++ GENERATED: AFG, ALA, ALB, DZA, ASM, AND, AGO, AIA, ATA, ATG, ARG, ARM, ABW, AUS, AUT, AZE, BHS, BHR, BGD, BRB, BLR, BEL, 
BLZ, BEN, BMU, BTN, BOL, BES, BIH, BWA, BVT, BRA, IOT, BRN, BGR, BFA, BDI, CPV, KHM, CMR, CAN, CYM, CAF, TCD, 
CHL, CHN, CXR, CCK, COL, COM, COG, COD, COK, CRI, CIV, HRV, CUB, CUW, CYP, CZE, DNK, DJI, DMA, DOM, ECU, EGY, 
SLV, GNQ, ERI, EST, SWZ, ETH, FLK, FRO, FJI, FIN, FRA, GUF, PYF, ATF, GAB, GMB, GEO, DEU, GHA, GIB, GRC, GRL, 
GRD, GLP, GUM, GTM, GGY, GIN, GNB, GUY, HTI, HMD, VAT, HND, HKG, HUN, ISL, IND, IDN, IRN, IRQ, IRL, IMN, ISR, 
ITA, JAM, JPN, JEY, JOR, KAZ, KEN, KIR, PRK, KOR, KWT, KGZ, LAO, LVA, LBN, LSO, LBR, LBY, LIE, LTU, LUX, MAC, 
MDG, MWI, MYS, MDV, MLI, MLT, MHL, MTQ, MRT, MUS, MYT, MEX, FSM, MDA, MCO, MNG, MNE, MSR, MAR, MOZ, MMR, NAM, 
NRU, NPL, NLD, NCL, NZL, NIC, NER, NGA, NIU, NFK, MKD, MNP, NOR, OMN, PAK, PLW, PSE, PAN, PNG, PRY, PER, PHL, 
PCN, POL, PRT, PRI, QAT, REU, ROU, RUS, RWA, BLM, SHN, KNA, LCA, MAF, SPM, VCT, WSM, SMR, STP, SAU, SEN, SRB, 
SYC, SLE, SGP, SXM, SVK, SVN, SLB, SOM, ZAF, SGS, SSD, ESP, LKA, SDN, SUR, SJM, SWE, CHE, SYR, TWN, TJK, TZA, 
THA, TLS, TGO, TKL, TON, TTO, TUN, TUR, TKM, TCA, TUV, UGA, UKR, ARE, GBR, USA, UMI, URY, UZB, VUT, VEN, VNM, 
VGB, VIR, WLF, ESH, YEM, ZMB, ZWE
Input:'The numbers for the percent grades must be to one decimal place (such as 10.6).'
Output:PROVIDED: 10.6 +++ GENERATED: 0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0, 2.1, 
2.2, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8, 2.9, 3.0, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6, 3.7, 3.8, 3.9, 4.0, 4.1, 4.2, 4.3, 4.4, 
4.5, 4.6, 4.7, 4.8, 4.9, 5.0, 5.1, 5.2, 5.3, 10.0, 99.9, 100.0
Input:'The title of the book to be rated.'
Output:PROVIDED: None +++ GENERATED: To Kill a Mockingbird, 1984, Pride and Prejudice, The Great Gatsby, Moby-Dick, The Catcher in the Rye, Harry Potter 
and the Sorcerer's Stone, The Lord of the Rings, One Hundred Years of Solitude, Brave New World, Sapiens: A Brief 
History of Humankind, The Immortal Life of Henrietta Lacks, Thinking, Fast and Slow, The Wright Brothers, The Diary of 
a Young Girl, Educated, The Art of War, The 7 Habits of Highly Effective People, Freakonomics, Quiet: The Power of 
Introverts in a World That Can't Stop Talking, Dune, Ender's Game, Neuromancer
Input:'The value for the number of products to consume. It must be greater than 12 and less than 50.'
Output:PROVIDED: None +++ GENERATED: None
Input:'The number of bank accounts associated. Cannot be less than 0.'
Output:PROVIDED: None +++ GENERATED: None
Input:The [Spotify ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for the playlist.
Output:",None
playlist_id,0.2,256,"
Analyze the provided API parameter description and first estimate the parameter type. Then, according to the type, apply the following to determine restrictions on the parameter input:
If it is a number, determine if the description mentions minimum, maximum, or default possible values and output: ""min [minimum], max [maximum], default [default]"". 
If it's a string, word, or code, determine if the description mentions minimum or maximum possible character amounts or a default value, and output: ""minLength [minimum], maxLength [maximum], default [default]"". 
If it's an array or list, determine if the description mentions minimum or maximum possible list lengths or a default value, and output: ""minItems [minimum], maxItems [maximum], default [default]"".
If it's an object, determine if the description mentions minimum or maximum possible numbers of object properties or a default value, and output: ""minProperties [minimum], maxProperties [maximum], default [default]"".
If it is any other data type where there is a default value provided, output: ""min None, max None, default [default]"".
If you are unable to determine any minimum, maximum, or default restrictions, output ""None"". If you are able to determine only one either the minimum or maximum, output the undetermined value as ""None"".

Assume any ""
"" values in the input indicate either new lines or spaces. 

Here are some examples of inputs and expected outputs:

Input:'An idea for a project. This and 'rating' are required.'
Output:None
Input:'The maximum value is 50. If nothing is put in, default to 0.'
Output:min None, max 50, default 0
Input:'The timer counter. The value must be between 15.0 and 120.'
Output:min 15.0, max 120, default None
Input:'The input range. The smallest value possible is -120.8. The largest should be 179.652.'
Output:min -120.8, max 179.652, default None
Input:'The number of items to be investigated. The maximum is 9,999.99'
Output:min None, max 9999.99, default None
Input:'The name of the movie. The movie name cannot be shorter than 10 characters and longer than 20 characters.'
Output:minLength 10, maxLength 20, default None
Input:'The country code which can be 1-letter, 2-letter, or 3-letter.'
Output:minLength 1, maxLength 3, default None
Input:'A supplied language code that can either be 2-letter or 3-letter which is used to parse through a list of common phrases.'
Output:minLength 2, maxLength 3, default None
Input:'Search via county areas.'
Output:None
Input:'Identifies synonyms through word inputs.'
Output:None
Input:'After searching through a list of ISO country codes, input 2-letter or 3-letter codes to find their data.'
Output:minLength 2, maxLength 3, default None
Input:The [Spotify ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for the playlist.
Output:",None
playlist_id,0.2,256,"
Analyze the provided API parameter description and determine whether it clearly identifies the parameter's data type 
or formatting. 
The list of possible data types are as follows: string, number, integer, boolean, array, and object.
The list of format options are as follows: time, date, password, byte, binary, email, uuid, uri, url, hostname, ipv4, and ipv6. Use the types and formats available for the OpenAPI Specification. 
A list of collectionFormat types are as follows: csv, ssv, and pipes.
If the data type is an array, attempt to identify its item type. 
Output the answer as follows: ""type [type], items [item type], format [format], collectionFormat [collectionFormat]"". Output None when unable to determine any of the categories. 
For example, only output a non-None ""item type"" if the ""type"" is array.

Assume any ""
"" values in the input indicate either new lines or spaces. 

Here are some examples of inputs and expected outputs:

Input:'A space-separated list of percent grades corresponding to the student.'
Output:type array, items number, format None, collectionFormat ssv
Input:'This should contain the email of the sender.'
Output:type string, items None, format email, collectionFormat None
Input:'This value should be true if the assignment is available for regrade.'
Output:type boolean, items None, format None, collectionFormat None
Input:'A URL containing the website for evaluation.'
Output:type string, items None, format url, collectionFormat None
Input:'The date of the contest. The date must be within the last three months.'
Output:type string, items None, format date, collectionFormat None
Input:'The time that the project must be completed. Use Eastern Standard Timezone (EST).'
Output:type string, items None, format date-time, collectionFormat None
Input:'A list of region codes.'
Output:type array, items None, format None, collectionFormat None
Input:The [Spotify ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for the playlist.
Output:",None
playlist_id,0.2,256,"
Identify the API parameter object by the grouping of its ""name"" and ""description"". Analyze the parameter description and extract logical constraints
in the provided format. Evaluate each case and determine whether it is applicable. Strictly follow the format and make no inferences. Only consider constraints
that are strictly required. Interpret the description in the least constraining manner, and assume Case 1 unless the other cases are obvious:

Case 1: The description isn't definitive about parameter requirements. Output ""None"".
Case 2: The description states the parameter ""name"" is required. Output: ""REQUIRED: name"". 
Case 3: The description states that parameter ""name"" or another parameter ""name"" is required. Output: ""Or(name, name)""
Case 4: The description states that given a set of parameters name, name_2, . . . , name_n, zero or one can be present in the API call: Output: ""ZeroOrOne(name, name_2, ... name_n)""
Case 5: The description states that given a set of parameters name, name_2, . . . , name_n, exactly one must be present in the API call: Output: ""OnlyOne(name, name_2, ... name_n)""
Case 6: The description states that given a set of parameters name, name_2, . . . , name_n, all of them or none must be present in the API call: Output: ""AllOrNone(name, name_2, ... name_n)""
Case 7: The description states that there is a relational relationship between some parameters: Output: ""name >= name_2"", where the standard relational operators can be used
Case 8: The description states that there is an arithmetic relationship between the value of parameters: Output: ""name_1 + name_2 <= value"", where the standard arithmetic operators can be used
Case 9: The description states there is a conditional relationship between parameters: Output: ""IF name THEN name_2"", where the standard logical operators can be used
Case 10: The description states that there exists a complex relationship between parameters, you can combine rules from the grammar to express a statement: Output: ""IF name==value THEN OnlyOne(name_2 AND name_3, name_4 AND name_5);

The grammar for statements is succinctly defined as follows:

Model:
    Dependency*;
Dependency:
    RelationalDependency | ArithmeticDependency |
    ConditionalDependency | PredefinedDependency;
RelationalDependency:
    Param RelationalOperator Param;
ArithmeticDependency:
    Operation RelationalOperator DOUBLE;
Operation:
    Param OperationContinuation |
    '(' Operation ')' OperationContinuation?;
OperationContinuation:
    ArithmeticOperator (Param | Operation);
ConditionalDependency:
    'IF' Predicate 'THEN' Predicate;
Predicate:
    Clause ClauseContinuation?;
Clause:
    (Term | RelationalDependency | ArithmeticDependency
    | PredefinedDependency) | 'NOT'? '(' Predicate ')';
Term:
    'NOT'? (Param | ParamValueRelation);
Param:
    ID | '[' ID ']';
ParamValueRelation:
    Param '==' STRING('|'STRING)* |
    Param 'LIKE' PATTERN_STRING | Param '==' BOOLEAN |
    Param RelationalOperator DOUBLE;
ClauseContinuation:
    ('AND' | 'OR') Predicate;
PredefinedDependency:
    'NOT'? ('Or' | 'OnlyOne' | 'AllOrNone' |
    'ZeroOrOne') '(' Clause (',' Clause)+ ')';
RelationalOperator:
    '<' | '>' | '<=' | '>=' | '==' | '!=';
ArithmeticOperator:
    '+' | '-' | '*' | '/';

If there are multiple dependency statements, return each one on a new line. Do not include any other text. Do not create dependencies on expected API responses.
Assume any ""
"" values in the input indicate either new lines or spaces. 
Here are some examples of expected outputs:

Input:
name: text 
description: The text to be checked. This or 'data' is required.
Output:Or(text, data);
Input: 
     name: idea
     description: 'An idea for a project. This and 'rating' are required.'
Output:OnlyOne(idea AND rating);
Input:
      name: partID
      description: 'The ID of the part. If partModel is specified partID must be specified'
Output:IF partModel THEN partID;
Input:
       name: language 
       description: The language of the client, not required if the country-code is USA or CAN.
Output:IF country-code!='USA' OR country-code=='CAN' THEN language;
Input:
        name: cost
        description: The cost of the product, this - profit must be greater than 500.
Output:cost - profit > 500;
Input:The [Spotify ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for the playlist.
Output:",None
market,0.2,256,"
Analyze the provided API parameter description, and extract any example values for the parameter mentioned in the description. 
Then, generate a few additional example values that correspond to, or are in the same category as the provided values.
If there are no example values provided, simply generate values corresponding to the description, and always generate values when possible.  
If generating example values is not possible, return None. Consider the following cases: 

Case 1: The description contains example values USA, CAN, ZWE: Output: ""PROVIDED: USA, CAN, ZWE +++ GENERATED: BRA, FRA, GER ...""
Case 2: The description does not explicitly mention example values: Output: ""PROVIDED: None +++ GENERATED: BRA, FRA, GER, USA ...""
Case 3: The description does not explicitly mention example values, and it is not possible to generate example values: Output: ""None""

Assume any ""
"" values in the input represent spaces or new lines. Do not output any ""
"" strings.

Here are some examples of inputs and expected outputs:
Input:'The country code associated with the country. Examples are CAD, USD, etc...'
Output:PROVIDED: CAD, USD +++ GENERATED: AFG, ALA, ALB, DZA, ASM, AND, AGO, AIA, ATA, ATG, ARG, ARM, ABW, AUS, AUT, AZE, BHS, BHR, BGD, BRB, BLR, BEL, 
BLZ, BEN, BMU, BTN, BOL, BES, BIH, BWA, BVT, BRA, IOT, BRN, BGR, BFA, BDI, CPV, KHM, CMR, CAN, CYM, CAF, TCD, 
CHL, CHN, CXR, CCK, COL, COM, COG, COD, COK, CRI, CIV, HRV, CUB, CUW, CYP, CZE, DNK, DJI, DMA, DOM, ECU, EGY, 
SLV, GNQ, ERI, EST, SWZ, ETH, FLK, FRO, FJI, FIN, FRA, GUF, PYF, ATF, GAB, GMB, GEO, DEU, GHA, GIB, GRC, GRL, 
GRD, GLP, GUM, GTM, GGY, GIN, GNB, GUY, HTI, HMD, VAT, HND, HKG, HUN, ISL, IND, IDN, IRN, IRQ, IRL, IMN, ISR, 
ITA, JAM, JPN, JEY, JOR, KAZ, KEN, KIR, PRK, KOR, KWT, KGZ, LAO, LVA, LBN, LSO, LBR, LBY, LIE, LTU, LUX, MAC, 
MDG, MWI, MYS, MDV, MLI, MLT, MHL, MTQ, MRT, MUS, MYT, MEX, FSM, MDA, MCO, MNG, MNE, MSR, MAR, MOZ, MMR, NAM, 
NRU, NPL, NLD, NCL, NZL, NIC, NER, NGA, NIU, NFK, MKD, MNP, NOR, OMN, PAK, PLW, PSE, PAN, PNG, PRY, PER, PHL, 
PCN, POL, PRT, PRI, QAT, REU, ROU, RUS, RWA, BLM, SHN, KNA, LCA, MAF, SPM, VCT, WSM, SMR, STP, SAU, SEN, SRB, 
SYC, SLE, SGP, SXM, SVK, SVN, SLB, SOM, ZAF, SGS, SSD, ESP, LKA, SDN, SUR, SJM, SWE, CHE, SYR, TWN, TJK, TZA, 
THA, TLS, TGO, TKL, TON, TTO, TUN, TUR, TKM, TCA, TUV, UGA, UKR, ARE, GBR, USA, UMI, URY, UZB, VUT, VEN, VNM, 
VGB, VIR, WLF, ESH, YEM, ZMB, ZWE
Input:'The numbers for the percent grades must be to one decimal place (such as 10.6).'
Output:PROVIDED: 10.6 +++ GENERATED: 0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0, 2.1, 
2.2, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8, 2.9, 3.0, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6, 3.7, 3.8, 3.9, 4.0, 4.1, 4.2, 4.3, 4.4, 
4.5, 4.6, 4.7, 4.8, 4.9, 5.0, 5.1, 5.2, 5.3, 10.0, 99.9, 100.0
Input:'The title of the book to be rated.'
Output:PROVIDED: None +++ GENERATED: To Kill a Mockingbird, 1984, Pride and Prejudice, The Great Gatsby, Moby-Dick, The Catcher in the Rye, Harry Potter 
and the Sorcerer's Stone, The Lord of the Rings, One Hundred Years of Solitude, Brave New World, Sapiens: A Brief 
History of Humankind, The Immortal Life of Henrietta Lacks, Thinking, Fast and Slow, The Wright Brothers, The Diary of 
a Young Girl, Educated, The Art of War, The 7 Habits of Highly Effective People, Freakonomics, Quiet: The Power of 
Introverts in a World That Can't Stop Talking, Dune, Ender's Game, Neuromancer
Input:'The value for the number of products to consume. It must be greater than 12 and less than 50.'
Output:PROVIDED: None +++ GENERATED: None
Input:'The number of bank accounts associated. Cannot be less than 0.'
Output:PROVIDED: None +++ GENERATED: None
Input:An [ISO 3166-1 alpha-2 country code](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) or the string `from_token`. Provide this parameter if you want to apply [Track
Relinking](https://developer.spotify.com/documentation/general/guides/track-relinking-guide/). For episodes, if a valid user access token is specified in the request header, the country associated with the user account will take priority over this parameter.
*Note: If neither market or user country are provided, the episode is considered unavailable for the client.*
Output:",None
market,0.2,256,"
Analyze the provided API parameter description and first estimate the parameter type. Then, according to the type, apply the following to determine restrictions on the parameter input:
If it is a number, determine if the description mentions minimum, maximum, or default possible values and output: ""min [minimum], max [maximum], default [default]"". 
If it's a string, word, or code, determine if the description mentions minimum or maximum possible character amounts or a default value, and output: ""minLength [minimum], maxLength [maximum], default [default]"". 
If it's an array or list, determine if the description mentions minimum or maximum possible list lengths or a default value, and output: ""minItems [minimum], maxItems [maximum], default [default]"".
If it's an object, determine if the description mentions minimum or maximum possible numbers of object properties or a default value, and output: ""minProperties [minimum], maxProperties [maximum], default [default]"".
If it is any other data type where there is a default value provided, output: ""min None, max None, default [default]"".
If you are unable to determine any minimum, maximum, or default restrictions, output ""None"". If you are able to determine only one either the minimum or maximum, output the undetermined value as ""None"".

Assume any ""
"" values in the input indicate either new lines or spaces. 

Here are some examples of inputs and expected outputs:

Input:'An idea for a project. This and 'rating' are required.'
Output:None
Input:'The maximum value is 50. If nothing is put in, default to 0.'
Output:min None, max 50, default 0
Input:'The timer counter. The value must be between 15.0 and 120.'
Output:min 15.0, max 120, default None
Input:'The input range. The smallest value possible is -120.8. The largest should be 179.652.'
Output:min -120.8, max 179.652, default None
Input:'The number of items to be investigated. The maximum is 9,999.99'
Output:min None, max 9999.99, default None
Input:'The name of the movie. The movie name cannot be shorter than 10 characters and longer than 20 characters.'
Output:minLength 10, maxLength 20, default None
Input:'The country code which can be 1-letter, 2-letter, or 3-letter.'
Output:minLength 1, maxLength 3, default None
Input:'A supplied language code that can either be 2-letter or 3-letter which is used to parse through a list of common phrases.'
Output:minLength 2, maxLength 3, default None
Input:'Search via county areas.'
Output:None
Input:'Identifies synonyms through word inputs.'
Output:None
Input:'After searching through a list of ISO country codes, input 2-letter or 3-letter codes to find their data.'
Output:minLength 2, maxLength 3, default None
Input:An [ISO 3166-1 alpha-2 country code](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) or the string `from_token`. Provide this parameter if you want to apply [Track
Relinking](https://developer.spotify.com/documentation/general/guides/track-relinking-guide/). For episodes, if a valid user access token is specified in the request header, the country associated with the user account will take priority over this parameter.
*Note: If neither market or user country are provided, the episode is considered unavailable for the client.*
Output:",None
market,0.2,256,"
Analyze the provided API parameter description and determine whether it clearly identifies the parameter's data type 
or formatting. 
The list of possible data types are as follows: string, number, integer, boolean, array, and object.
The list of format options are as follows: time, date, password, byte, binary, email, uuid, uri, url, hostname, ipv4, and ipv6. Use the types and formats available for the OpenAPI Specification. 
A list of collectionFormat types are as follows: csv, ssv, and pipes.
If the data type is an array, attempt to identify its item type. 
Output the answer as follows: ""type [type], items [item type], format [format], collectionFormat [collectionFormat]"". Output None when unable to determine any of the categories. 
For example, only output a non-None ""item type"" if the ""type"" is array.

Assume any ""
"" values in the input indicate either new lines or spaces. 

Here are some examples of inputs and expected outputs:

Input:'A space-separated list of percent grades corresponding to the student.'
Output:type array, items number, format None, collectionFormat ssv
Input:'This should contain the email of the sender.'
Output:type string, items None, format email, collectionFormat None
Input:'This value should be true if the assignment is available for regrade.'
Output:type boolean, items None, format None, collectionFormat None
Input:'A URL containing the website for evaluation.'
Output:type string, items None, format url, collectionFormat None
Input:'The date of the contest. The date must be within the last three months.'
Output:type string, items None, format date, collectionFormat None
Input:'The time that the project must be completed. Use Eastern Standard Timezone (EST).'
Output:type string, items None, format date-time, collectionFormat None
Input:'A list of region codes.'
Output:type array, items None, format None, collectionFormat None
Input:An [ISO 3166-1 alpha-2 country code](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) or the string `from_token`. Provide this parameter if you want to apply [Track
Relinking](https://developer.spotify.com/documentation/general/guides/track-relinking-guide/). For episodes, if a valid user access token is specified in the request header, the country associated with the user account will take priority over this parameter.
*Note: If neither market or user country are provided, the episode is considered unavailable for the client.*
Output:",None
market,0.2,256,"
Identify the API parameter object by the grouping of its ""name"" and ""description"". Analyze the parameter description and extract logical constraints
in the provided format. Evaluate each case and determine whether it is applicable. Strictly follow the format and make no inferences. Only consider constraints
that are strictly required. Interpret the description in the least constraining manner, and assume Case 1 unless the other cases are obvious:

Case 1: The description isn't definitive about parameter requirements. Output ""None"".
Case 2: The description states the parameter ""name"" is required. Output: ""REQUIRED: name"". 
Case 3: The description states that parameter ""name"" or another parameter ""name"" is required. Output: ""Or(name, name)""
Case 4: The description states that given a set of parameters name, name_2, . . . , name_n, zero or one can be present in the API call: Output: ""ZeroOrOne(name, name_2, ... name_n)""
Case 5: The description states that given a set of parameters name, name_2, . . . , name_n, exactly one must be present in the API call: Output: ""OnlyOne(name, name_2, ... name_n)""
Case 6: The description states that given a set of parameters name, name_2, . . . , name_n, all of them or none must be present in the API call: Output: ""AllOrNone(name, name_2, ... name_n)""
Case 7: The description states that there is a relational relationship between some parameters: Output: ""name >= name_2"", where the standard relational operators can be used
Case 8: The description states that there is an arithmetic relationship between the value of parameters: Output: ""name_1 + name_2 <= value"", where the standard arithmetic operators can be used
Case 9: The description states there is a conditional relationship between parameters: Output: ""IF name THEN name_2"", where the standard logical operators can be used
Case 10: The description states that there exists a complex relationship between parameters, you can combine rules from the grammar to express a statement: Output: ""IF name==value THEN OnlyOne(name_2 AND name_3, name_4 AND name_5);

The grammar for statements is succinctly defined as follows:

Model:
    Dependency*;
Dependency:
    RelationalDependency | ArithmeticDependency |
    ConditionalDependency | PredefinedDependency;
RelationalDependency:
    Param RelationalOperator Param;
ArithmeticDependency:
    Operation RelationalOperator DOUBLE;
Operation:
    Param OperationContinuation |
    '(' Operation ')' OperationContinuation?;
OperationContinuation:
    ArithmeticOperator (Param | Operation);
ConditionalDependency:
    'IF' Predicate 'THEN' Predicate;
Predicate:
    Clause ClauseContinuation?;
Clause:
    (Term | RelationalDependency | ArithmeticDependency
    | PredefinedDependency) | 'NOT'? '(' Predicate ')';
Term:
    'NOT'? (Param | ParamValueRelation);
Param:
    ID | '[' ID ']';
ParamValueRelation:
    Param '==' STRING('|'STRING)* |
    Param 'LIKE' PATTERN_STRING | Param '==' BOOLEAN |
    Param RelationalOperator DOUBLE;
ClauseContinuation:
    ('AND' | 'OR') Predicate;
PredefinedDependency:
    'NOT'? ('Or' | 'OnlyOne' | 'AllOrNone' |
    'ZeroOrOne') '(' Clause (',' Clause)+ ')';
RelationalOperator:
    '<' | '>' | '<=' | '>=' | '==' | '!=';
ArithmeticOperator:
    '+' | '-' | '*' | '/';

If there are multiple dependency statements, return each one on a new line. Do not include any other text. Do not create dependencies on expected API responses.
Assume any ""
"" values in the input indicate either new lines or spaces. 
Here are some examples of expected outputs:

Input:
name: text 
description: The text to be checked. This or 'data' is required.
Output:Or(text, data);
Input: 
     name: idea
     description: 'An idea for a project. This and 'rating' are required.'
Output:OnlyOne(idea AND rating);
Input:
      name: partID
      description: 'The ID of the part. If partModel is specified partID must be specified'
Output:IF partModel THEN partID;
Input:
       name: language 
       description: The language of the client, not required if the country-code is USA or CAN.
Output:IF country-code!='USA' OR country-code=='CAN' THEN language;
Input:
        name: cost
        description: The cost of the product, this - profit must be greater than 500.
Output:cost - profit > 500;
Input:An [ISO 3166-1 alpha-2 country code](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) or the string `from_token`. Provide this parameter if you want to apply [Track
Relinking](https://developer.spotify.com/documentation/general/guides/track-relinking-guide/). For episodes, if a valid user access token is specified in the request header, the country associated with the user account will take priority over this parameter.
*Note: If neither market or user country are provided, the episode is considered unavailable for the client.*
Output:",None
fields,0.2,256,"
Analyze the provided API parameter description, and extract any example values for the parameter mentioned in the description. 
Then, generate a few additional example values that correspond to, or are in the same category as the provided values.
If there are no example values provided, simply generate values corresponding to the description, and always generate values when possible.  
If generating example values is not possible, return None. Consider the following cases: 

Case 1: The description contains example values USA, CAN, ZWE: Output: ""PROVIDED: USA, CAN, ZWE +++ GENERATED: BRA, FRA, GER ...""
Case 2: The description does not explicitly mention example values: Output: ""PROVIDED: None +++ GENERATED: BRA, FRA, GER, USA ...""
Case 3: The description does not explicitly mention example values, and it is not possible to generate example values: Output: ""None""

Assume any ""
"" values in the input represent spaces or new lines. Do not output any ""
"" strings.

Here are some examples of inputs and expected outputs:
Input:'The country code associated with the country. Examples are CAD, USD, etc...'
Output:PROVIDED: CAD, USD +++ GENERATED: AFG, ALA, ALB, DZA, ASM, AND, AGO, AIA, ATA, ATG, ARG, ARM, ABW, AUS, AUT, AZE, BHS, BHR, BGD, BRB, BLR, BEL, 
BLZ, BEN, BMU, BTN, BOL, BES, BIH, BWA, BVT, BRA, IOT, BRN, BGR, BFA, BDI, CPV, KHM, CMR, CAN, CYM, CAF, TCD, 
CHL, CHN, CXR, CCK, COL, COM, COG, COD, COK, CRI, CIV, HRV, CUB, CUW, CYP, CZE, DNK, DJI, DMA, DOM, ECU, EGY, 
SLV, GNQ, ERI, EST, SWZ, ETH, FLK, FRO, FJI, FIN, FRA, GUF, PYF, ATF, GAB, GMB, GEO, DEU, GHA, GIB, GRC, GRL, 
GRD, GLP, GUM, GTM, GGY, GIN, GNB, GUY, HTI, HMD, VAT, HND, HKG, HUN, ISL, IND, IDN, IRN, IRQ, IRL, IMN, ISR, 
ITA, JAM, JPN, JEY, JOR, KAZ, KEN, KIR, PRK, KOR, KWT, KGZ, LAO, LVA, LBN, LSO, LBR, LBY, LIE, LTU, LUX, MAC, 
MDG, MWI, MYS, MDV, MLI, MLT, MHL, MTQ, MRT, MUS, MYT, MEX, FSM, MDA, MCO, MNG, MNE, MSR, MAR, MOZ, MMR, NAM, 
NRU, NPL, NLD, NCL, NZL, NIC, NER, NGA, NIU, NFK, MKD, MNP, NOR, OMN, PAK, PLW, PSE, PAN, PNG, PRY, PER, PHL, 
PCN, POL, PRT, PRI, QAT, REU, ROU, RUS, RWA, BLM, SHN, KNA, LCA, MAF, SPM, VCT, WSM, SMR, STP, SAU, SEN, SRB, 
SYC, SLE, SGP, SXM, SVK, SVN, SLB, SOM, ZAF, SGS, SSD, ESP, LKA, SDN, SUR, SJM, SWE, CHE, SYR, TWN, TJK, TZA, 
THA, TLS, TGO, TKL, TON, TTO, TUN, TUR, TKM, TCA, TUV, UGA, UKR, ARE, GBR, USA, UMI, URY, UZB, VUT, VEN, VNM, 
VGB, VIR, WLF, ESH, YEM, ZMB, ZWE
Input:'The numbers for the percent grades must be to one decimal place (such as 10.6).'
Output:PROVIDED: 10.6 +++ GENERATED: 0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0, 2.1, 
2.2, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8, 2.9, 3.0, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6, 3.7, 3.8, 3.9, 4.0, 4.1, 4.2, 4.3, 4.4, 
4.5, 4.6, 4.7, 4.8, 4.9, 5.0, 5.1, 5.2, 5.3, 10.0, 99.9, 100.0
Input:'The title of the book to be rated.'
Output:PROVIDED: None +++ GENERATED: To Kill a Mockingbird, 1984, Pride and Prejudice, The Great Gatsby, Moby-Dick, The Catcher in the Rye, Harry Potter 
and the Sorcerer's Stone, The Lord of the Rings, One Hundred Years of Solitude, Brave New World, Sapiens: A Brief 
History of Humankind, The Immortal Life of Henrietta Lacks, Thinking, Fast and Slow, The Wright Brothers, The Diary of 
a Young Girl, Educated, The Art of War, The 7 Habits of Highly Effective People, Freakonomics, Quiet: The Power of 
Introverts in a World That Can't Stop Talking, Dune, Ender's Game, Neuromancer
Input:'The value for the number of products to consume. It must be greater than 12 and less than 50.'
Output:PROVIDED: None +++ GENERATED: None
Input:'The number of bank accounts associated. Cannot be less than 0.'
Output:PROVIDED: None +++ GENERATED: None
Input:Filters for the query: a comma-separated list of the fields to return. If omitted, all fields are returned. For example, to get just the total number of items and the request limit:
`fields=total,limit`
A dot separator can be used to specify non-reoccurring fields, while parentheses can be used to specify reoccurring fields within objects. For example, to get just the added date and user ID of the adder:
`fields=items(added_at,added_by.id)`
Use multiple parentheses to drill down into nested objects, for example:
`fields=items(track(name,href,album(name,href)))`
Fields can be excluded by prefixing them with an exclamation mark, for example:
`fields=items.track.album(!external_urls,images)`
Output:",None
fields,0.2,256,"
Analyze the provided API parameter description and first estimate the parameter type. Then, according to the type, apply the following to determine restrictions on the parameter input:
If it is a number, determine if the description mentions minimum, maximum, or default possible values and output: ""min [minimum], max [maximum], default [default]"". 
If it's a string, word, or code, determine if the description mentions minimum or maximum possible character amounts or a default value, and output: ""minLength [minimum], maxLength [maximum], default [default]"". 
If it's an array or list, determine if the description mentions minimum or maximum possible list lengths or a default value, and output: ""minItems [minimum], maxItems [maximum], default [default]"".
If it's an object, determine if the description mentions minimum or maximum possible numbers of object properties or a default value, and output: ""minProperties [minimum], maxProperties [maximum], default [default]"".
If it is any other data type where there is a default value provided, output: ""min None, max None, default [default]"".
If you are unable to determine any minimum, maximum, or default restrictions, output ""None"". If you are able to determine only one either the minimum or maximum, output the undetermined value as ""None"".

Assume any ""
"" values in the input indicate either new lines or spaces. 

Here are some examples of inputs and expected outputs:

Input:'An idea for a project. This and 'rating' are required.'
Output:None
Input:'The maximum value is 50. If nothing is put in, default to 0.'
Output:min None, max 50, default 0
Input:'The timer counter. The value must be between 15.0 and 120.'
Output:min 15.0, max 120, default None
Input:'The input range. The smallest value possible is -120.8. The largest should be 179.652.'
Output:min -120.8, max 179.652, default None
Input:'The number of items to be investigated. The maximum is 9,999.99'
Output:min None, max 9999.99, default None
Input:'The name of the movie. The movie name cannot be shorter than 10 characters and longer than 20 characters.'
Output:minLength 10, maxLength 20, default None
Input:'The country code which can be 1-letter, 2-letter, or 3-letter.'
Output:minLength 1, maxLength 3, default None
Input:'A supplied language code that can either be 2-letter or 3-letter which is used to parse through a list of common phrases.'
Output:minLength 2, maxLength 3, default None
Input:'Search via county areas.'
Output:None
Input:'Identifies synonyms through word inputs.'
Output:None
Input:'After searching through a list of ISO country codes, input 2-letter or 3-letter codes to find their data.'
Output:minLength 2, maxLength 3, default None
Input:Filters for the query: a comma-separated list of the fields to return. If omitted, all fields are returned. For example, to get just the total number of items and the request limit:
`fields=total,limit`
A dot separator can be used to specify non-reoccurring fields, while parentheses can be used to specify reoccurring fields within objects. For example, to get just the added date and user ID of the adder:
`fields=items(added_at,added_by.id)`
Use multiple parentheses to drill down into nested objects, for example:
`fields=items(track(name,href,album(name,href)))`
Fields can be excluded by prefixing them with an exclamation mark, for example:
`fields=items.track.album(!external_urls,images)`
Output:",None
fields,0.2,256,"
Analyze the provided API parameter description and determine whether it clearly identifies the parameter's data type 
or formatting. 
The list of possible data types are as follows: string, number, integer, boolean, array, and object.
The list of format options are as follows: time, date, password, byte, binary, email, uuid, uri, url, hostname, ipv4, and ipv6. Use the types and formats available for the OpenAPI Specification. 
A list of collectionFormat types are as follows: csv, ssv, and pipes.
If the data type is an array, attempt to identify its item type. 
Output the answer as follows: ""type [type], items [item type], format [format], collectionFormat [collectionFormat]"". Output None when unable to determine any of the categories. 
For example, only output a non-None ""item type"" if the ""type"" is array.

Assume any ""
"" values in the input indicate either new lines or spaces. 

Here are some examples of inputs and expected outputs:

Input:'A space-separated list of percent grades corresponding to the student.'
Output:type array, items number, format None, collectionFormat ssv
Input:'This should contain the email of the sender.'
Output:type string, items None, format email, collectionFormat None
Input:'This value should be true if the assignment is available for regrade.'
Output:type boolean, items None, format None, collectionFormat None
Input:'A URL containing the website for evaluation.'
Output:type string, items None, format url, collectionFormat None
Input:'The date of the contest. The date must be within the last three months.'
Output:type string, items None, format date, collectionFormat None
Input:'The time that the project must be completed. Use Eastern Standard Timezone (EST).'
Output:type string, items None, format date-time, collectionFormat None
Input:'A list of region codes.'
Output:type array, items None, format None, collectionFormat None
Input:Filters for the query: a comma-separated list of the fields to return. If omitted, all fields are returned. For example, to get just the total number of items and the request limit:
`fields=total,limit`
A dot separator can be used to specify non-reoccurring fields, while parentheses can be used to specify reoccurring fields within objects. For example, to get just the added date and user ID of the adder:
`fields=items(added_at,added_by.id)`
Use multiple parentheses to drill down into nested objects, for example:
`fields=items(track(name,href,album(name,href)))`
Fields can be excluded by prefixing them with an exclamation mark, for example:
`fields=items.track.album(!external_urls,images)`
Output:",None
fields,0.2,256,"
Identify the API parameter object by the grouping of its ""name"" and ""description"". Analyze the parameter description and extract logical constraints
in the provided format. Evaluate each case and determine whether it is applicable. Strictly follow the format and make no inferences. Only consider constraints
that are strictly required. Interpret the description in the least constraining manner, and assume Case 1 unless the other cases are obvious:

Case 1: The description isn't definitive about parameter requirements. Output ""None"".
Case 2: The description states the parameter ""name"" is required. Output: ""REQUIRED: name"". 
Case 3: The description states that parameter ""name"" or another parameter ""name"" is required. Output: ""Or(name, name)""
Case 4: The description states that given a set of parameters name, name_2, . . . , name_n, zero or one can be present in the API call: Output: ""ZeroOrOne(name, name_2, ... name_n)""
Case 5: The description states that given a set of parameters name, name_2, . . . , name_n, exactly one must be present in the API call: Output: ""OnlyOne(name, name_2, ... name_n)""
Case 6: The description states that given a set of parameters name, name_2, . . . , name_n, all of them or none must be present in the API call: Output: ""AllOrNone(name, name_2, ... name_n)""
Case 7: The description states that there is a relational relationship between some parameters: Output: ""name >= name_2"", where the standard relational operators can be used
Case 8: The description states that there is an arithmetic relationship between the value of parameters: Output: ""name_1 + name_2 <= value"", where the standard arithmetic operators can be used
Case 9: The description states there is a conditional relationship between parameters: Output: ""IF name THEN name_2"", where the standard logical operators can be used
Case 10: The description states that there exists a complex relationship between parameters, you can combine rules from the grammar to express a statement: Output: ""IF name==value THEN OnlyOne(name_2 AND name_3, name_4 AND name_5);

The grammar for statements is succinctly defined as follows:

Model:
    Dependency*;
Dependency:
    RelationalDependency | ArithmeticDependency |
    ConditionalDependency | PredefinedDependency;
RelationalDependency:
    Param RelationalOperator Param;
ArithmeticDependency:
    Operation RelationalOperator DOUBLE;
Operation:
    Param OperationContinuation |
    '(' Operation ')' OperationContinuation?;
OperationContinuation:
    ArithmeticOperator (Param | Operation);
ConditionalDependency:
    'IF' Predicate 'THEN' Predicate;
Predicate:
    Clause ClauseContinuation?;
Clause:
    (Term | RelationalDependency | ArithmeticDependency
    | PredefinedDependency) | 'NOT'? '(' Predicate ')';
Term:
    'NOT'? (Param | ParamValueRelation);
Param:
    ID | '[' ID ']';
ParamValueRelation:
    Param '==' STRING('|'STRING)* |
    Param 'LIKE' PATTERN_STRING | Param '==' BOOLEAN |
    Param RelationalOperator DOUBLE;
ClauseContinuation:
    ('AND' | 'OR') Predicate;
PredefinedDependency:
    'NOT'? ('Or' | 'OnlyOne' | 'AllOrNone' |
    'ZeroOrOne') '(' Clause (',' Clause)+ ')';
RelationalOperator:
    '<' | '>' | '<=' | '>=' | '==' | '!=';
ArithmeticOperator:
    '+' | '-' | '*' | '/';

If there are multiple dependency statements, return each one on a new line. Do not include any other text. Do not create dependencies on expected API responses.
Assume any ""
"" values in the input indicate either new lines or spaces. 
Here are some examples of expected outputs:

Input:
name: text 
description: The text to be checked. This or 'data' is required.
Output:Or(text, data);
Input: 
     name: idea
     description: 'An idea for a project. This and 'rating' are required.'
Output:OnlyOne(idea AND rating);
Input:
      name: partID
      description: 'The ID of the part. If partModel is specified partID must be specified'
Output:IF partModel THEN partID;
Input:
       name: language 
       description: The language of the client, not required if the country-code is USA or CAN.
Output:IF country-code!='USA' OR country-code=='CAN' THEN language;
Input:
        name: cost
        description: The cost of the product, this - profit must be greater than 500.
Output:cost - profit > 500;
Input:Filters for the query: a comma-separated list of the fields to return. If omitted, all fields are returned. For example, to get just the total number of items and the request limit:
`fields=total,limit`
A dot separator can be used to specify non-reoccurring fields, while parentheses can be used to specify reoccurring fields within objects. For example, to get just the added date and user ID of the adder:
`fields=items(added_at,added_by.id)`
Use multiple parentheses to drill down into nested objects, for example:
`fields=items(track(name,href,album(name,href)))`
Fields can be excluded by prefixing them with an exclamation mark, for example:
`fields=items.track.album(!external_urls,images)`
Output:",None
limit,0.2,256,"
Analyze the provided API parameter description, and extract any example values for the parameter mentioned in the description. 
Then, generate a few additional example values that correspond to, or are in the same category as the provided values.
If there are no example values provided, simply generate values corresponding to the description, and always generate values when possible.  
If generating example values is not possible, return None. Consider the following cases: 

Case 1: The description contains example values USA, CAN, ZWE: Output: ""PROVIDED: USA, CAN, ZWE +++ GENERATED: BRA, FRA, GER ...""
Case 2: The description does not explicitly mention example values: Output: ""PROVIDED: None +++ GENERATED: BRA, FRA, GER, USA ...""
Case 3: The description does not explicitly mention example values, and it is not possible to generate example values: Output: ""None""

Assume any ""
"" values in the input represent spaces or new lines. Do not output any ""
"" strings.

Here are some examples of inputs and expected outputs:
Input:'The country code associated with the country. Examples are CAD, USD, etc...'
Output:PROVIDED: CAD, USD +++ GENERATED: AFG, ALA, ALB, DZA, ASM, AND, AGO, AIA, ATA, ATG, ARG, ARM, ABW, AUS, AUT, AZE, BHS, BHR, BGD, BRB, BLR, BEL, 
BLZ, BEN, BMU, BTN, BOL, BES, BIH, BWA, BVT, BRA, IOT, BRN, BGR, BFA, BDI, CPV, KHM, CMR, CAN, CYM, CAF, TCD, 
CHL, CHN, CXR, CCK, COL, COM, COG, COD, COK, CRI, CIV, HRV, CUB, CUW, CYP, CZE, DNK, DJI, DMA, DOM, ECU, EGY, 
SLV, GNQ, ERI, EST, SWZ, ETH, FLK, FRO, FJI, FIN, FRA, GUF, PYF, ATF, GAB, GMB, GEO, DEU, GHA, GIB, GRC, GRL, 
GRD, GLP, GUM, GTM, GGY, GIN, GNB, GUY, HTI, HMD, VAT, HND, HKG, HUN, ISL, IND, IDN, IRN, IRQ, IRL, IMN, ISR, 
ITA, JAM, JPN, JEY, JOR, KAZ, KEN, KIR, PRK, KOR, KWT, KGZ, LAO, LVA, LBN, LSO, LBR, LBY, LIE, LTU, LUX, MAC, 
MDG, MWI, MYS, MDV, MLI, MLT, MHL, MTQ, MRT, MUS, MYT, MEX, FSM, MDA, MCO, MNG, MNE, MSR, MAR, MOZ, MMR, NAM, 
NRU, NPL, NLD, NCL, NZL, NIC, NER, NGA, NIU, NFK, MKD, MNP, NOR, OMN, PAK, PLW, PSE, PAN, PNG, PRY, PER, PHL, 
PCN, POL, PRT, PRI, QAT, REU, ROU, RUS, RWA, BLM, SHN, KNA, LCA, MAF, SPM, VCT, WSM, SMR, STP, SAU, SEN, SRB, 
SYC, SLE, SGP, SXM, SVK, SVN, SLB, SOM, ZAF, SGS, SSD, ESP, LKA, SDN, SUR, SJM, SWE, CHE, SYR, TWN, TJK, TZA, 
THA, TLS, TGO, TKL, TON, TTO, TUN, TUR, TKM, TCA, TUV, UGA, UKR, ARE, GBR, USA, UMI, URY, UZB, VUT, VEN, VNM, 
VGB, VIR, WLF, ESH, YEM, ZMB, ZWE
Input:'The numbers for the percent grades must be to one decimal place (such as 10.6).'
Output:PROVIDED: 10.6 +++ GENERATED: 0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0, 2.1, 
2.2, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8, 2.9, 3.0, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6, 3.7, 3.8, 3.9, 4.0, 4.1, 4.2, 4.3, 4.4, 
4.5, 4.6, 4.7, 4.8, 4.9, 5.0, 5.1, 5.2, 5.3, 10.0, 99.9, 100.0
Input:'The title of the book to be rated.'
Output:PROVIDED: None +++ GENERATED: To Kill a Mockingbird, 1984, Pride and Prejudice, The Great Gatsby, Moby-Dick, The Catcher in the Rye, Harry Potter 
and the Sorcerer's Stone, The Lord of the Rings, One Hundred Years of Solitude, Brave New World, Sapiens: A Brief 
History of Humankind, The Immortal Life of Henrietta Lacks, Thinking, Fast and Slow, The Wright Brothers, The Diary of 
a Young Girl, Educated, The Art of War, The 7 Habits of Highly Effective People, Freakonomics, Quiet: The Power of 
Introverts in a World That Can't Stop Talking, Dune, Ender's Game, Neuromancer
Input:'The value for the number of products to consume. It must be greater than 12 and less than 50.'
Output:PROVIDED: None +++ GENERATED: None
Input:'The number of bank accounts associated. Cannot be less than 0.'
Output:PROVIDED: None +++ GENERATED: None
Input:The maximum number of items to return. Default: 100. Minimum: 1. Maximum: 100.
Output:",None
limit,0.2,256,"
Analyze the provided API parameter description and first estimate the parameter type. Then, according to the type, apply the following to determine restrictions on the parameter input:
If it is a number, determine if the description mentions minimum, maximum, or default possible values and output: ""min [minimum], max [maximum], default [default]"". 
If it's a string, word, or code, determine if the description mentions minimum or maximum possible character amounts or a default value, and output: ""minLength [minimum], maxLength [maximum], default [default]"". 
If it's an array or list, determine if the description mentions minimum or maximum possible list lengths or a default value, and output: ""minItems [minimum], maxItems [maximum], default [default]"".
If it's an object, determine if the description mentions minimum or maximum possible numbers of object properties or a default value, and output: ""minProperties [minimum], maxProperties [maximum], default [default]"".
If it is any other data type where there is a default value provided, output: ""min None, max None, default [default]"".
If you are unable to determine any minimum, maximum, or default restrictions, output ""None"". If you are able to determine only one either the minimum or maximum, output the undetermined value as ""None"".

Assume any ""
"" values in the input indicate either new lines or spaces. 

Here are some examples of inputs and expected outputs:

Input:'An idea for a project. This and 'rating' are required.'
Output:None
Input:'The maximum value is 50. If nothing is put in, default to 0.'
Output:min None, max 50, default 0
Input:'The timer counter. The value must be between 15.0 and 120.'
Output:min 15.0, max 120, default None
Input:'The input range. The smallest value possible is -120.8. The largest should be 179.652.'
Output:min -120.8, max 179.652, default None
Input:'The number of items to be investigated. The maximum is 9,999.99'
Output:min None, max 9999.99, default None
Input:'The name of the movie. The movie name cannot be shorter than 10 characters and longer than 20 characters.'
Output:minLength 10, maxLength 20, default None
Input:'The country code which can be 1-letter, 2-letter, or 3-letter.'
Output:minLength 1, maxLength 3, default None
Input:'A supplied language code that can either be 2-letter or 3-letter which is used to parse through a list of common phrases.'
Output:minLength 2, maxLength 3, default None
Input:'Search via county areas.'
Output:None
Input:'Identifies synonyms through word inputs.'
Output:None
Input:'After searching through a list of ISO country codes, input 2-letter or 3-letter codes to find their data.'
Output:minLength 2, maxLength 3, default None
Input:The maximum number of items to return. Default: 100. Minimum: 1. Maximum: 100.
Output:","min 1, max 100, default 100"
limit,0.2,256,"
Analyze the provided API parameter description and determine whether it clearly identifies the parameter's data type 
or formatting. 
The list of possible data types are as follows: string, number, integer, boolean, array, and object.
The list of format options are as follows: time, date, password, byte, binary, email, uuid, uri, url, hostname, ipv4, and ipv6. Use the types and formats available for the OpenAPI Specification. 
A list of collectionFormat types are as follows: csv, ssv, and pipes.
If the data type is an array, attempt to identify its item type. 
Output the answer as follows: ""type [type], items [item type], format [format], collectionFormat [collectionFormat]"". Output None when unable to determine any of the categories. 
For example, only output a non-None ""item type"" if the ""type"" is array.

Assume any ""
"" values in the input indicate either new lines or spaces. 

Here are some examples of inputs and expected outputs:

Input:'A space-separated list of percent grades corresponding to the student.'
Output:type array, items number, format None, collectionFormat ssv
Input:'This should contain the email of the sender.'
Output:type string, items None, format email, collectionFormat None
Input:'This value should be true if the assignment is available for regrade.'
Output:type boolean, items None, format None, collectionFormat None
Input:'A URL containing the website for evaluation.'
Output:type string, items None, format url, collectionFormat None
Input:'The date of the contest. The date must be within the last three months.'
Output:type string, items None, format date, collectionFormat None
Input:'The time that the project must be completed. Use Eastern Standard Timezone (EST).'
Output:type string, items None, format date-time, collectionFormat None
Input:'A list of region codes.'
Output:type array, items None, format None, collectionFormat None
Input:The maximum number of items to return. Default: 100. Minimum: 1. Maximum: 100.
Output:",None
limit,0.2,256,"
Identify the API parameter object by the grouping of its ""name"" and ""description"". Analyze the parameter description and extract logical constraints
in the provided format. Evaluate each case and determine whether it is applicable. Strictly follow the format and make no inferences. Only consider constraints
that are strictly required. Interpret the description in the least constraining manner, and assume Case 1 unless the other cases are obvious:

Case 1: The description isn't definitive about parameter requirements. Output ""None"".
Case 2: The description states the parameter ""name"" is required. Output: ""REQUIRED: name"". 
Case 3: The description states that parameter ""name"" or another parameter ""name"" is required. Output: ""Or(name, name)""
Case 4: The description states that given a set of parameters name, name_2, . . . , name_n, zero or one can be present in the API call: Output: ""ZeroOrOne(name, name_2, ... name_n)""
Case 5: The description states that given a set of parameters name, name_2, . . . , name_n, exactly one must be present in the API call: Output: ""OnlyOne(name, name_2, ... name_n)""
Case 6: The description states that given a set of parameters name, name_2, . . . , name_n, all of them or none must be present in the API call: Output: ""AllOrNone(name, name_2, ... name_n)""
Case 7: The description states that there is a relational relationship between some parameters: Output: ""name >= name_2"", where the standard relational operators can be used
Case 8: The description states that there is an arithmetic relationship between the value of parameters: Output: ""name_1 + name_2 <= value"", where the standard arithmetic operators can be used
Case 9: The description states there is a conditional relationship between parameters: Output: ""IF name THEN name_2"", where the standard logical operators can be used
Case 10: The description states that there exists a complex relationship between parameters, you can combine rules from the grammar to express a statement: Output: ""IF name==value THEN OnlyOne(name_2 AND name_3, name_4 AND name_5);

The grammar for statements is succinctly defined as follows:

Model:
    Dependency*;
Dependency:
    RelationalDependency | ArithmeticDependency |
    ConditionalDependency | PredefinedDependency;
RelationalDependency:
    Param RelationalOperator Param;
ArithmeticDependency:
    Operation RelationalOperator DOUBLE;
Operation:
    Param OperationContinuation |
    '(' Operation ')' OperationContinuation?;
OperationContinuation:
    ArithmeticOperator (Param | Operation);
ConditionalDependency:
    'IF' Predicate 'THEN' Predicate;
Predicate:
    Clause ClauseContinuation?;
Clause:
    (Term | RelationalDependency | ArithmeticDependency
    | PredefinedDependency) | 'NOT'? '(' Predicate ')';
Term:
    'NOT'? (Param | ParamValueRelation);
Param:
    ID | '[' ID ']';
ParamValueRelation:
    Param '==' STRING('|'STRING)* |
    Param 'LIKE' PATTERN_STRING | Param '==' BOOLEAN |
    Param RelationalOperator DOUBLE;
ClauseContinuation:
    ('AND' | 'OR') Predicate;
PredefinedDependency:
    'NOT'? ('Or' | 'OnlyOne' | 'AllOrNone' |
    'ZeroOrOne') '(' Clause (',' Clause)+ ')';
RelationalOperator:
    '<' | '>' | '<=' | '>=' | '==' | '!=';
ArithmeticOperator:
    '+' | '-' | '*' | '/';

If there are multiple dependency statements, return each one on a new line. Do not include any other text. Do not create dependencies on expected API responses.
Assume any ""
"" values in the input indicate either new lines or spaces. 
Here are some examples of expected outputs:

Input:
name: text 
description: The text to be checked. This or 'data' is required.
Output:Or(text, data);
Input: 
     name: idea
     description: 'An idea for a project. This and 'rating' are required.'
Output:OnlyOne(idea AND rating);
Input:
      name: partID
      description: 'The ID of the part. If partModel is specified partID must be specified'
Output:IF partModel THEN partID;
Input:
       name: language 
       description: The language of the client, not required if the country-code is USA or CAN.
Output:IF country-code!='USA' OR country-code=='CAN' THEN language;
Input:
        name: cost
        description: The cost of the product, this - profit must be greater than 500.
Output:cost - profit > 500;
Input:The maximum number of items to return. Default: 100. Minimum: 1. Maximum: 100.
Output:",None
offset,0.2,256,"
Analyze the provided API parameter description, and extract any example values for the parameter mentioned in the description. 
Then, generate a few additional example values that correspond to, or are in the same category as the provided values.
If there are no example values provided, simply generate values corresponding to the description, and always generate values when possible.  
If generating example values is not possible, return None. Consider the following cases: 

Case 1: The description contains example values USA, CAN, ZWE: Output: ""PROVIDED: USA, CAN, ZWE +++ GENERATED: BRA, FRA, GER ...""
Case 2: The description does not explicitly mention example values: Output: ""PROVIDED: None +++ GENERATED: BRA, FRA, GER, USA ...""
Case 3: The description does not explicitly mention example values, and it is not possible to generate example values: Output: ""None""

Assume any ""
"" values in the input represent spaces or new lines. Do not output any ""
"" strings.

Here are some examples of inputs and expected outputs:
Input:'The country code associated with the country. Examples are CAD, USD, etc...'
Output:PROVIDED: CAD, USD +++ GENERATED: AFG, ALA, ALB, DZA, ASM, AND, AGO, AIA, ATA, ATG, ARG, ARM, ABW, AUS, AUT, AZE, BHS, BHR, BGD, BRB, BLR, BEL, 
BLZ, BEN, BMU, BTN, BOL, BES, BIH, BWA, BVT, BRA, IOT, BRN, BGR, BFA, BDI, CPV, KHM, CMR, CAN, CYM, CAF, TCD, 
CHL, CHN, CXR, CCK, COL, COM, COG, COD, COK, CRI, CIV, HRV, CUB, CUW, CYP, CZE, DNK, DJI, DMA, DOM, ECU, EGY, 
SLV, GNQ, ERI, EST, SWZ, ETH, FLK, FRO, FJI, FIN, FRA, GUF, PYF, ATF, GAB, GMB, GEO, DEU, GHA, GIB, GRC, GRL, 
GRD, GLP, GUM, GTM, GGY, GIN, GNB, GUY, HTI, HMD, VAT, HND, HKG, HUN, ISL, IND, IDN, IRN, IRQ, IRL, IMN, ISR, 
ITA, JAM, JPN, JEY, JOR, KAZ, KEN, KIR, PRK, KOR, KWT, KGZ, LAO, LVA, LBN, LSO, LBR, LBY, LIE, LTU, LUX, MAC, 
MDG, MWI, MYS, MDV, MLI, MLT, MHL, MTQ, MRT, MUS, MYT, MEX, FSM, MDA, MCO, MNG, MNE, MSR, MAR, MOZ, MMR, NAM, 
NRU, NPL, NLD, NCL, NZL, NIC, NER, NGA, NIU, NFK, MKD, MNP, NOR, OMN, PAK, PLW, PSE, PAN, PNG, PRY, PER, PHL, 
PCN, POL, PRT, PRI, QAT, REU, ROU, RUS, RWA, BLM, SHN, KNA, LCA, MAF, SPM, VCT, WSM, SMR, STP, SAU, SEN, SRB, 
SYC, SLE, SGP, SXM, SVK, SVN, SLB, SOM, ZAF, SGS, SSD, ESP, LKA, SDN, SUR, SJM, SWE, CHE, SYR, TWN, TJK, TZA, 
THA, TLS, TGO, TKL, TON, TTO, TUN, TUR, TKM, TCA, TUV, UGA, UKR, ARE, GBR, USA, UMI, URY, UZB, VUT, VEN, VNM, 
VGB, VIR, WLF, ESH, YEM, ZMB, ZWE
Input:'The numbers for the percent grades must be to one decimal place (such as 10.6).'
Output:PROVIDED: 10.6 +++ GENERATED: 0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0, 2.1, 
2.2, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8, 2.9, 3.0, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6, 3.7, 3.8, 3.9, 4.0, 4.1, 4.2, 4.3, 4.4, 
4.5, 4.6, 4.7, 4.8, 4.9, 5.0, 5.1, 5.2, 5.3, 10.0, 99.9, 100.0
Input:'The title of the book to be rated.'
Output:PROVIDED: None +++ GENERATED: To Kill a Mockingbird, 1984, Pride and Prejudice, The Great Gatsby, Moby-Dick, The Catcher in the Rye, Harry Potter 
and the Sorcerer's Stone, The Lord of the Rings, One Hundred Years of Solitude, Brave New World, Sapiens: A Brief 
History of Humankind, The Immortal Life of Henrietta Lacks, Thinking, Fast and Slow, The Wright Brothers, The Diary of 
a Young Girl, Educated, The Art of War, The 7 Habits of Highly Effective People, Freakonomics, Quiet: The Power of 
Introverts in a World That Can't Stop Talking, Dune, Ender's Game, Neuromancer
Input:'The value for the number of products to consume. It must be greater than 12 and less than 50.'
Output:PROVIDED: None +++ GENERATED: None
Input:'The number of bank accounts associated. Cannot be less than 0.'
Output:PROVIDED: None +++ GENERATED: None
Input:The index of the first item to return. Default: 0 (the first object).
Output:",None
offset,0.2,256,"
Analyze the provided API parameter description and first estimate the parameter type. Then, according to the type, apply the following to determine restrictions on the parameter input:
If it is a number, determine if the description mentions minimum, maximum, or default possible values and output: ""min [minimum], max [maximum], default [default]"". 
If it's a string, word, or code, determine if the description mentions minimum or maximum possible character amounts or a default value, and output: ""minLength [minimum], maxLength [maximum], default [default]"". 
If it's an array or list, determine if the description mentions minimum or maximum possible list lengths or a default value, and output: ""minItems [minimum], maxItems [maximum], default [default]"".
If it's an object, determine if the description mentions minimum or maximum possible numbers of object properties or a default value, and output: ""minProperties [minimum], maxProperties [maximum], default [default]"".
If it is any other data type where there is a default value provided, output: ""min None, max None, default [default]"".
If you are unable to determine any minimum, maximum, or default restrictions, output ""None"". If you are able to determine only one either the minimum or maximum, output the undetermined value as ""None"".

Assume any ""
"" values in the input indicate either new lines or spaces. 

Here are some examples of inputs and expected outputs:

Input:'An idea for a project. This and 'rating' are required.'
Output:None
Input:'The maximum value is 50. If nothing is put in, default to 0.'
Output:min None, max 50, default 0
Input:'The timer counter. The value must be between 15.0 and 120.'
Output:min 15.0, max 120, default None
Input:'The input range. The smallest value possible is -120.8. The largest should be 179.652.'
Output:min -120.8, max 179.652, default None
Input:'The number of items to be investigated. The maximum is 9,999.99'
Output:min None, max 9999.99, default None
Input:'The name of the movie. The movie name cannot be shorter than 10 characters and longer than 20 characters.'
Output:minLength 10, maxLength 20, default None
Input:'The country code which can be 1-letter, 2-letter, or 3-letter.'
Output:minLength 1, maxLength 3, default None
Input:'A supplied language code that can either be 2-letter or 3-letter which is used to parse through a list of common phrases.'
Output:minLength 2, maxLength 3, default None
Input:'Search via county areas.'
Output:None
Input:'Identifies synonyms through word inputs.'
Output:None
Input:'After searching through a list of ISO country codes, input 2-letter or 3-letter codes to find their data.'
Output:minLength 2, maxLength 3, default None
Input:The index of the first item to return. Default: 0 (the first object).
Output:","min None, max None, default 0"
offset,0.2,256,"
Analyze the provided API parameter description and determine whether it clearly identifies the parameter's data type 
or formatting. 
The list of possible data types are as follows: string, number, integer, boolean, array, and object.
The list of format options are as follows: time, date, password, byte, binary, email, uuid, uri, url, hostname, ipv4, and ipv6. Use the types and formats available for the OpenAPI Specification. 
A list of collectionFormat types are as follows: csv, ssv, and pipes.
If the data type is an array, attempt to identify its item type. 
Output the answer as follows: ""type [type], items [item type], format [format], collectionFormat [collectionFormat]"". Output None when unable to determine any of the categories. 
For example, only output a non-None ""item type"" if the ""type"" is array.

Assume any ""
"" values in the input indicate either new lines or spaces. 

Here are some examples of inputs and expected outputs:

Input:'A space-separated list of percent grades corresponding to the student.'
Output:type array, items number, format None, collectionFormat ssv
Input:'This should contain the email of the sender.'
Output:type string, items None, format email, collectionFormat None
Input:'This value should be true if the assignment is available for regrade.'
Output:type boolean, items None, format None, collectionFormat None
Input:'A URL containing the website for evaluation.'
Output:type string, items None, format url, collectionFormat None
Input:'The date of the contest. The date must be within the last three months.'
Output:type string, items None, format date, collectionFormat None
Input:'The time that the project must be completed. Use Eastern Standard Timezone (EST).'
Output:type string, items None, format date-time, collectionFormat None
Input:'A list of region codes.'
Output:type array, items None, format None, collectionFormat None
Input:The index of the first item to return. Default: 0 (the first object).
Output:",None
offset,0.2,256,"
Identify the API parameter object by the grouping of its ""name"" and ""description"". Analyze the parameter description and extract logical constraints
in the provided format. Evaluate each case and determine whether it is applicable. Strictly follow the format and make no inferences. Only consider constraints
that are strictly required. Interpret the description in the least constraining manner, and assume Case 1 unless the other cases are obvious:

Case 1: The description isn't definitive about parameter requirements. Output ""None"".
Case 2: The description states the parameter ""name"" is required. Output: ""REQUIRED: name"". 
Case 3: The description states that parameter ""name"" or another parameter ""name"" is required. Output: ""Or(name, name)""
Case 4: The description states that given a set of parameters name, name_2, . . . , name_n, zero or one can be present in the API call: Output: ""ZeroOrOne(name, name_2, ... name_n)""
Case 5: The description states that given a set of parameters name, name_2, . . . , name_n, exactly one must be present in the API call: Output: ""OnlyOne(name, name_2, ... name_n)""
Case 6: The description states that given a set of parameters name, name_2, . . . , name_n, all of them or none must be present in the API call: Output: ""AllOrNone(name, name_2, ... name_n)""
Case 7: The description states that there is a relational relationship between some parameters: Output: ""name >= name_2"", where the standard relational operators can be used
Case 8: The description states that there is an arithmetic relationship between the value of parameters: Output: ""name_1 + name_2 <= value"", where the standard arithmetic operators can be used
Case 9: The description states there is a conditional relationship between parameters: Output: ""IF name THEN name_2"", where the standard logical operators can be used
Case 10: The description states that there exists a complex relationship between parameters, you can combine rules from the grammar to express a statement: Output: ""IF name==value THEN OnlyOne(name_2 AND name_3, name_4 AND name_5);

The grammar for statements is succinctly defined as follows:

Model:
    Dependency*;
Dependency:
    RelationalDependency | ArithmeticDependency |
    ConditionalDependency | PredefinedDependency;
RelationalDependency:
    Param RelationalOperator Param;
ArithmeticDependency:
    Operation RelationalOperator DOUBLE;
Operation:
    Param OperationContinuation |
    '(' Operation ')' OperationContinuation?;
OperationContinuation:
    ArithmeticOperator (Param | Operation);
ConditionalDependency:
    'IF' Predicate 'THEN' Predicate;
Predicate:
    Clause ClauseContinuation?;
Clause:
    (Term | RelationalDependency | ArithmeticDependency
    | PredefinedDependency) | 'NOT'? '(' Predicate ')';
Term:
    'NOT'? (Param | ParamValueRelation);
Param:
    ID | '[' ID ']';
ParamValueRelation:
    Param '==' STRING('|'STRING)* |
    Param 'LIKE' PATTERN_STRING | Param '==' BOOLEAN |
    Param RelationalOperator DOUBLE;
ClauseContinuation:
    ('AND' | 'OR') Predicate;
PredefinedDependency:
    'NOT'? ('Or' | 'OnlyOne' | 'AllOrNone' |
    'ZeroOrOne') '(' Clause (',' Clause)+ ')';
RelationalOperator:
    '<' | '>' | '<=' | '>=' | '==' | '!=';
ArithmeticOperator:
    '+' | '-' | '*' | '/';

If there are multiple dependency statements, return each one on a new line. Do not include any other text. Do not create dependencies on expected API responses.
Assume any ""
"" values in the input indicate either new lines or spaces. 
Here are some examples of expected outputs:

Input:
name: text 
description: The text to be checked. This or 'data' is required.
Output:Or(text, data);
Input: 
     name: idea
     description: 'An idea for a project. This and 'rating' are required.'
Output:OnlyOne(idea AND rating);
Input:
      name: partID
      description: 'The ID of the part. If partModel is specified partID must be specified'
Output:IF partModel THEN partID;
Input:
       name: language 
       description: The language of the client, not required if the country-code is USA or CAN.
Output:IF country-code!='USA' OR country-code=='CAN' THEN language;
Input:
        name: cost
        description: The cost of the product, this - profit must be greater than 500.
Output:cost - profit > 500;
Input:The index of the first item to return. Default: 0 (the first object).
Output:",None
additional_types,0.2,256,"
Analyze the provided API parameter description, and extract any example values for the parameter mentioned in the description. 
Then, generate a few additional example values that correspond to, or are in the same category as the provided values.
If there are no example values provided, simply generate values corresponding to the description, and always generate values when possible.  
If generating example values is not possible, return None. Consider the following cases: 

Case 1: The description contains example values USA, CAN, ZWE: Output: ""PROVIDED: USA, CAN, ZWE +++ GENERATED: BRA, FRA, GER ...""
Case 2: The description does not explicitly mention example values: Output: ""PROVIDED: None +++ GENERATED: BRA, FRA, GER, USA ...""
Case 3: The description does not explicitly mention example values, and it is not possible to generate example values: Output: ""None""

Assume any ""
"" values in the input represent spaces or new lines. Do not output any ""
"" strings.

Here are some examples of inputs and expected outputs:
Input:'The country code associated with the country. Examples are CAD, USD, etc...'
Output:PROVIDED: CAD, USD +++ GENERATED: AFG, ALA, ALB, DZA, ASM, AND, AGO, AIA, ATA, ATG, ARG, ARM, ABW, AUS, AUT, AZE, BHS, BHR, BGD, BRB, BLR, BEL, 
BLZ, BEN, BMU, BTN, BOL, BES, BIH, BWA, BVT, BRA, IOT, BRN, BGR, BFA, BDI, CPV, KHM, CMR, CAN, CYM, CAF, TCD, 
CHL, CHN, CXR, CCK, COL, COM, COG, COD, COK, CRI, CIV, HRV, CUB, CUW, CYP, CZE, DNK, DJI, DMA, DOM, ECU, EGY, 
SLV, GNQ, ERI, EST, SWZ, ETH, FLK, FRO, FJI, FIN, FRA, GUF, PYF, ATF, GAB, GMB, GEO, DEU, GHA, GIB, GRC, GRL, 
GRD, GLP, GUM, GTM, GGY, GIN, GNB, GUY, HTI, HMD, VAT, HND, HKG, HUN, ISL, IND, IDN, IRN, IRQ, IRL, IMN, ISR, 
ITA, JAM, JPN, JEY, JOR, KAZ, KEN, KIR, PRK, KOR, KWT, KGZ, LAO, LVA, LBN, LSO, LBR, LBY, LIE, LTU, LUX, MAC, 
MDG, MWI, MYS, MDV, MLI, MLT, MHL, MTQ, MRT, MUS, MYT, MEX, FSM, MDA, MCO, MNG, MNE, MSR, MAR, MOZ, MMR, NAM, 
NRU, NPL, NLD, NCL, NZL, NIC, NER, NGA, NIU, NFK, MKD, MNP, NOR, OMN, PAK, PLW, PSE, PAN, PNG, PRY, PER, PHL, 
PCN, POL, PRT, PRI, QAT, REU, ROU, RUS, RWA, BLM, SHN, KNA, LCA, MAF, SPM, VCT, WSM, SMR, STP, SAU, SEN, SRB, 
SYC, SLE, SGP, SXM, SVK, SVN, SLB, SOM, ZAF, SGS, SSD, ESP, LKA, SDN, SUR, SJM, SWE, CHE, SYR, TWN, TJK, TZA, 
THA, TLS, TGO, TKL, TON, TTO, TUN, TUR, TKM, TCA, TUV, UGA, UKR, ARE, GBR, USA, UMI, URY, UZB, VUT, VEN, VNM, 
VGB, VIR, WLF, ESH, YEM, ZMB, ZWE
Input:'The numbers for the percent grades must be to one decimal place (such as 10.6).'
Output:PROVIDED: 10.6 +++ GENERATED: 0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0, 2.1, 
2.2, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8, 2.9, 3.0, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6, 3.7, 3.8, 3.9, 4.0, 4.1, 4.2, 4.3, 4.4, 
4.5, 4.6, 4.7, 4.8, 4.9, 5.0, 5.1, 5.2, 5.3, 10.0, 99.9, 100.0
Input:'The title of the book to be rated.'
Output:PROVIDED: None +++ GENERATED: To Kill a Mockingbird, 1984, Pride and Prejudice, The Great Gatsby, Moby-Dick, The Catcher in the Rye, Harry Potter 
and the Sorcerer's Stone, The Lord of the Rings, One Hundred Years of Solitude, Brave New World, Sapiens: A Brief 
History of Humankind, The Immortal Life of Henrietta Lacks, Thinking, Fast and Slow, The Wright Brothers, The Diary of 
a Young Girl, Educated, The Art of War, The 7 Habits of Highly Effective People, Freakonomics, Quiet: The Power of 
Introverts in a World That Can't Stop Talking, Dune, Ender's Game, Neuromancer
Input:'The value for the number of products to consume. It must be greater than 12 and less than 50.'
Output:PROVIDED: None +++ GENERATED: None
Input:'The number of bank accounts associated. Cannot be less than 0.'
Output:PROVIDED: None +++ GENERATED: None
Input:A comma-separated list of item types that your client supports besides the default `track` type. Valid types are: `track` and `episode`. **Note** : This parameter was introduced to allow existing clients to maintain their current behaviour and might be deprecated in the future. In addition to providing this parameter, make sure that your client properly handles cases of new types in the future by checking against the `type` field of each object.
Output:",None
additional_types,0.2,256,"
Analyze the provided API parameter description and first estimate the parameter type. Then, according to the type, apply the following to determine restrictions on the parameter input:
If it is a number, determine if the description mentions minimum, maximum, or default possible values and output: ""min [minimum], max [maximum], default [default]"". 
If it's a string, word, or code, determine if the description mentions minimum or maximum possible character amounts or a default value, and output: ""minLength [minimum], maxLength [maximum], default [default]"". 
If it's an array or list, determine if the description mentions minimum or maximum possible list lengths or a default value, and output: ""minItems [minimum], maxItems [maximum], default [default]"".
If it's an object, determine if the description mentions minimum or maximum possible numbers of object properties or a default value, and output: ""minProperties [minimum], maxProperties [maximum], default [default]"".
If it is any other data type where there is a default value provided, output: ""min None, max None, default [default]"".
If you are unable to determine any minimum, maximum, or default restrictions, output ""None"". If you are able to determine only one either the minimum or maximum, output the undetermined value as ""None"".

Assume any ""
"" values in the input indicate either new lines or spaces. 

Here are some examples of inputs and expected outputs:

Input:'An idea for a project. This and 'rating' are required.'
Output:None
Input:'The maximum value is 50. If nothing is put in, default to 0.'
Output:min None, max 50, default 0
Input:'The timer counter. The value must be between 15.0 and 120.'
Output:min 15.0, max 120, default None
Input:'The input range. The smallest value possible is -120.8. The largest should be 179.652.'
Output:min -120.8, max 179.652, default None
Input:'The number of items to be investigated. The maximum is 9,999.99'
Output:min None, max 9999.99, default None
Input:'The name of the movie. The movie name cannot be shorter than 10 characters and longer than 20 characters.'
Output:minLength 10, maxLength 20, default None
Input:'The country code which can be 1-letter, 2-letter, or 3-letter.'
Output:minLength 1, maxLength 3, default None
Input:'A supplied language code that can either be 2-letter or 3-letter which is used to parse through a list of common phrases.'
Output:minLength 2, maxLength 3, default None
Input:'Search via county areas.'
Output:None
Input:'Identifies synonyms through word inputs.'
Output:None
Input:'After searching through a list of ISO country codes, input 2-letter or 3-letter codes to find their data.'
Output:minLength 2, maxLength 3, default None
Input:A comma-separated list of item types that your client supports besides the default `track` type. Valid types are: `track` and `episode`. **Note** : This parameter was introduced to allow existing clients to maintain their current behaviour and might be deprecated in the future. In addition to providing this parameter, make sure that your client properly handles cases of new types in the future by checking against the `type` field of each object.
Output:",None
additional_types,0.2,256,"
Analyze the provided API parameter description and determine whether it clearly identifies the parameter's data type 
or formatting. 
The list of possible data types are as follows: string, number, integer, boolean, array, and object.
The list of format options are as follows: time, date, password, byte, binary, email, uuid, uri, url, hostname, ipv4, and ipv6. Use the types and formats available for the OpenAPI Specification. 
A list of collectionFormat types are as follows: csv, ssv, and pipes.
If the data type is an array, attempt to identify its item type. 
Output the answer as follows: ""type [type], items [item type], format [format], collectionFormat [collectionFormat]"". Output None when unable to determine any of the categories. 
For example, only output a non-None ""item type"" if the ""type"" is array.

Assume any ""
"" values in the input indicate either new lines or spaces. 

Here are some examples of inputs and expected outputs:

Input:'A space-separated list of percent grades corresponding to the student.'
Output:type array, items number, format None, collectionFormat ssv
Input:'This should contain the email of the sender.'
Output:type string, items None, format email, collectionFormat None
Input:'This value should be true if the assignment is available for regrade.'
Output:type boolean, items None, format None, collectionFormat None
Input:'A URL containing the website for evaluation.'
Output:type string, items None, format url, collectionFormat None
Input:'The date of the contest. The date must be within the last three months.'
Output:type string, items None, format date, collectionFormat None
Input:'The time that the project must be completed. Use Eastern Standard Timezone (EST).'
Output:type string, items None, format date-time, collectionFormat None
Input:'A list of region codes.'
Output:type array, items None, format None, collectionFormat None
Input:A comma-separated list of item types that your client supports besides the default `track` type. Valid types are: `track` and `episode`. **Note** : This parameter was introduced to allow existing clients to maintain their current behaviour and might be deprecated in the future. In addition to providing this parameter, make sure that your client properly handles cases of new types in the future by checking against the `type` field of each object.
Output:",None
additional_types,0.2,256,"
Identify the API parameter object by the grouping of its ""name"" and ""description"". Analyze the parameter description and extract logical constraints
in the provided format. Evaluate each case and determine whether it is applicable. Strictly follow the format and make no inferences. Only consider constraints
that are strictly required. Interpret the description in the least constraining manner, and assume Case 1 unless the other cases are obvious:

Case 1: The description isn't definitive about parameter requirements. Output ""None"".
Case 2: The description states the parameter ""name"" is required. Output: ""REQUIRED: name"". 
Case 3: The description states that parameter ""name"" or another parameter ""name"" is required. Output: ""Or(name, name)""
Case 4: The description states that given a set of parameters name, name_2, . . . , name_n, zero or one can be present in the API call: Output: ""ZeroOrOne(name, name_2, ... name_n)""
Case 5: The description states that given a set of parameters name, name_2, . . . , name_n, exactly one must be present in the API call: Output: ""OnlyOne(name, name_2, ... name_n)""
Case 6: The description states that given a set of parameters name, name_2, . . . , name_n, all of them or none must be present in the API call: Output: ""AllOrNone(name, name_2, ... name_n)""
Case 7: The description states that there is a relational relationship between some parameters: Output: ""name >= name_2"", where the standard relational operators can be used
Case 8: The description states that there is an arithmetic relationship between the value of parameters: Output: ""name_1 + name_2 <= value"", where the standard arithmetic operators can be used
Case 9: The description states there is a conditional relationship between parameters: Output: ""IF name THEN name_2"", where the standard logical operators can be used
Case 10: The description states that there exists a complex relationship between parameters, you can combine rules from the grammar to express a statement: Output: ""IF name==value THEN OnlyOne(name_2 AND name_3, name_4 AND name_5);

The grammar for statements is succinctly defined as follows:

Model:
    Dependency*;
Dependency:
    RelationalDependency | ArithmeticDependency |
    ConditionalDependency | PredefinedDependency;
RelationalDependency:
    Param RelationalOperator Param;
ArithmeticDependency:
    Operation RelationalOperator DOUBLE;
Operation:
    Param OperationContinuation |
    '(' Operation ')' OperationContinuation?;
OperationContinuation:
    ArithmeticOperator (Param | Operation);
ConditionalDependency:
    'IF' Predicate 'THEN' Predicate;
Predicate:
    Clause ClauseContinuation?;
Clause:
    (Term | RelationalDependency | ArithmeticDependency
    | PredefinedDependency) | 'NOT'? '(' Predicate ')';
Term:
    'NOT'? (Param | ParamValueRelation);
Param:
    ID | '[' ID ']';
ParamValueRelation:
    Param '==' STRING('|'STRING)* |
    Param 'LIKE' PATTERN_STRING | Param '==' BOOLEAN |
    Param RelationalOperator DOUBLE;
ClauseContinuation:
    ('AND' | 'OR') Predicate;
PredefinedDependency:
    'NOT'? ('Or' | 'OnlyOne' | 'AllOrNone' |
    'ZeroOrOne') '(' Clause (',' Clause)+ ')';
RelationalOperator:
    '<' | '>' | '<=' | '>=' | '==' | '!=';
ArithmeticOperator:
    '+' | '-' | '*' | '/';

If there are multiple dependency statements, return each one on a new line. Do not include any other text. Do not create dependencies on expected API responses.
Assume any ""
"" values in the input indicate either new lines or spaces. 
Here are some examples of expected outputs:

Input:
name: text 
description: The text to be checked. This or 'data' is required.
Output:Or(text, data);
Input: 
     name: idea
     description: 'An idea for a project. This and 'rating' are required.'
Output:OnlyOne(idea AND rating);
Input:
      name: partID
      description: 'The ID of the part. If partModel is specified partID must be specified'
Output:IF partModel THEN partID;
Input:
       name: language 
       description: The language of the client, not required if the country-code is USA or CAN.
Output:IF country-code!='USA' OR country-code=='CAN' THEN language;
Input:
        name: cost
        description: The cost of the product, this - profit must be greater than 500.
Output:cost - profit > 500;
Input:A comma-separated list of item types that your client supports besides the default `track` type. Valid types are: `track` and `episode`. **Note** : This parameter was introduced to allow existing clients to maintain their current behaviour and might be deprecated in the future. In addition to providing this parameter, make sure that your client properly handles cases of new types in the future by checking against the `type` field of each object.
Output:",None
playlist_id,0.2,256,"
Analyze the provided API parameter description, and extract any example values for the parameter mentioned in the description. 
Then, generate a few additional example values that correspond to, or are in the same category as the provided values.
If there are no example values provided, simply generate values corresponding to the description, and always generate values when possible.  
If generating example values is not possible, return None. Consider the following cases: 

Case 1: The description contains example values USA, CAN, ZWE: Output: ""PROVIDED: USA, CAN, ZWE +++ GENERATED: BRA, FRA, GER ...""
Case 2: The description does not explicitly mention example values: Output: ""PROVIDED: None +++ GENERATED: BRA, FRA, GER, USA ...""
Case 3: The description does not explicitly mention example values, and it is not possible to generate example values: Output: ""None""

Assume any ""
"" values in the input represent spaces or new lines. Do not output any ""
"" strings.

Here are some examples of inputs and expected outputs:
Input:'The country code associated with the country. Examples are CAD, USD, etc...'
Output:PROVIDED: CAD, USD +++ GENERATED: AFG, ALA, ALB, DZA, ASM, AND, AGO, AIA, ATA, ATG, ARG, ARM, ABW, AUS, AUT, AZE, BHS, BHR, BGD, BRB, BLR, BEL, 
BLZ, BEN, BMU, BTN, BOL, BES, BIH, BWA, BVT, BRA, IOT, BRN, BGR, BFA, BDI, CPV, KHM, CMR, CAN, CYM, CAF, TCD, 
CHL, CHN, CXR, CCK, COL, COM, COG, COD, COK, CRI, CIV, HRV, CUB, CUW, CYP, CZE, DNK, DJI, DMA, DOM, ECU, EGY, 
SLV, GNQ, ERI, EST, SWZ, ETH, FLK, FRO, FJI, FIN, FRA, GUF, PYF, ATF, GAB, GMB, GEO, DEU, GHA, GIB, GRC, GRL, 
GRD, GLP, GUM, GTM, GGY, GIN, GNB, GUY, HTI, HMD, VAT, HND, HKG, HUN, ISL, IND, IDN, IRN, IRQ, IRL, IMN, ISR, 
ITA, JAM, JPN, JEY, JOR, KAZ, KEN, KIR, PRK, KOR, KWT, KGZ, LAO, LVA, LBN, LSO, LBR, LBY, LIE, LTU, LUX, MAC, 
MDG, MWI, MYS, MDV, MLI, MLT, MHL, MTQ, MRT, MUS, MYT, MEX, FSM, MDA, MCO, MNG, MNE, MSR, MAR, MOZ, MMR, NAM, 
NRU, NPL, NLD, NCL, NZL, NIC, NER, NGA, NIU, NFK, MKD, MNP, NOR, OMN, PAK, PLW, PSE, PAN, PNG, PRY, PER, PHL, 
PCN, POL, PRT, PRI, QAT, REU, ROU, RUS, RWA, BLM, SHN, KNA, LCA, MAF, SPM, VCT, WSM, SMR, STP, SAU, SEN, SRB, 
SYC, SLE, SGP, SXM, SVK, SVN, SLB, SOM, ZAF, SGS, SSD, ESP, LKA, SDN, SUR, SJM, SWE, CHE, SYR, TWN, TJK, TZA, 
THA, TLS, TGO, TKL, TON, TTO, TUN, TUR, TKM, TCA, TUV, UGA, UKR, ARE, GBR, USA, UMI, URY, UZB, VUT, VEN, VNM, 
VGB, VIR, WLF, ESH, YEM, ZMB, ZWE
Input:'The numbers for the percent grades must be to one decimal place (such as 10.6).'
Output:PROVIDED: 10.6 +++ GENERATED: 0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0, 2.1, 
2.2, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8, 2.9, 3.0, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6, 3.7, 3.8, 3.9, 4.0, 4.1, 4.2, 4.3, 4.4, 
4.5, 4.6, 4.7, 4.8, 4.9, 5.0, 5.1, 5.2, 5.3, 10.0, 99.9, 100.0
Input:'The title of the book to be rated.'
Output:PROVIDED: None +++ GENERATED: To Kill a Mockingbird, 1984, Pride and Prejudice, The Great Gatsby, Moby-Dick, The Catcher in the Rye, Harry Potter 
and the Sorcerer's Stone, The Lord of the Rings, One Hundred Years of Solitude, Brave New World, Sapiens: A Brief 
History of Humankind, The Immortal Life of Henrietta Lacks, Thinking, Fast and Slow, The Wright Brothers, The Diary of 
a Young Girl, Educated, The Art of War, The 7 Habits of Highly Effective People, Freakonomics, Quiet: The Power of 
Introverts in a World That Can't Stop Talking, Dune, Ender's Game, Neuromancer
Input:'The value for the number of products to consume. It must be greater than 12 and less than 50.'
Output:PROVIDED: None +++ GENERATED: None
Input:'The number of bank accounts associated. Cannot be less than 0.'
Output:PROVIDED: None +++ GENERATED: None
Input:The [Spotify ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for the playlist.
Output:",None
playlist_id,0.2,256,"
Analyze the provided API parameter description and first estimate the parameter type. Then, according to the type, apply the following to determine restrictions on the parameter input:
If it is a number, determine if the description mentions minimum, maximum, or default possible values and output: ""min [minimum], max [maximum], default [default]"". 
If it's a string, word, or code, determine if the description mentions minimum or maximum possible character amounts or a default value, and output: ""minLength [minimum], maxLength [maximum], default [default]"". 
If it's an array or list, determine if the description mentions minimum or maximum possible list lengths or a default value, and output: ""minItems [minimum], maxItems [maximum], default [default]"".
If it's an object, determine if the description mentions minimum or maximum possible numbers of object properties or a default value, and output: ""minProperties [minimum], maxProperties [maximum], default [default]"".
If it is any other data type where there is a default value provided, output: ""min None, max None, default [default]"".
If you are unable to determine any minimum, maximum, or default restrictions, output ""None"". If you are able to determine only one either the minimum or maximum, output the undetermined value as ""None"".

Assume any ""
"" values in the input indicate either new lines or spaces. 

Here are some examples of inputs and expected outputs:

Input:'An idea for a project. This and 'rating' are required.'
Output:None
Input:'The maximum value is 50. If nothing is put in, default to 0.'
Output:min None, max 50, default 0
Input:'The timer counter. The value must be between 15.0 and 120.'
Output:min 15.0, max 120, default None
Input:'The input range. The smallest value possible is -120.8. The largest should be 179.652.'
Output:min -120.8, max 179.652, default None
Input:'The number of items to be investigated. The maximum is 9,999.99'
Output:min None, max 9999.99, default None
Input:'The name of the movie. The movie name cannot be shorter than 10 characters and longer than 20 characters.'
Output:minLength 10, maxLength 20, default None
Input:'The country code which can be 1-letter, 2-letter, or 3-letter.'
Output:minLength 1, maxLength 3, default None
Input:'A supplied language code that can either be 2-letter or 3-letter which is used to parse through a list of common phrases.'
Output:minLength 2, maxLength 3, default None
Input:'Search via county areas.'
Output:None
Input:'Identifies synonyms through word inputs.'
Output:None
Input:'After searching through a list of ISO country codes, input 2-letter or 3-letter codes to find their data.'
Output:minLength 2, maxLength 3, default None
Input:The [Spotify ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for the playlist.
Output:",None
playlist_id,0.2,256,"
Analyze the provided API parameter description and determine whether it clearly identifies the parameter's data type 
or formatting. 
The list of possible data types are as follows: string, number, integer, boolean, array, and object.
The list of format options are as follows: time, date, password, byte, binary, email, uuid, uri, url, hostname, ipv4, and ipv6. Use the types and formats available for the OpenAPI Specification. 
A list of collectionFormat types are as follows: csv, ssv, and pipes.
If the data type is an array, attempt to identify its item type. 
Output the answer as follows: ""type [type], items [item type], format [format], collectionFormat [collectionFormat]"". Output None when unable to determine any of the categories. 
For example, only output a non-None ""item type"" if the ""type"" is array.

Assume any ""
"" values in the input indicate either new lines or spaces. 

Here are some examples of inputs and expected outputs:

Input:'A space-separated list of percent grades corresponding to the student.'
Output:type array, items number, format None, collectionFormat ssv
Input:'This should contain the email of the sender.'
Output:type string, items None, format email, collectionFormat None
Input:'This value should be true if the assignment is available for regrade.'
Output:type boolean, items None, format None, collectionFormat None
Input:'A URL containing the website for evaluation.'
Output:type string, items None, format url, collectionFormat None
Input:'The date of the contest. The date must be within the last three months.'
Output:type string, items None, format date, collectionFormat None
Input:'The time that the project must be completed. Use Eastern Standard Timezone (EST).'
Output:type string, items None, format date-time, collectionFormat None
Input:'A list of region codes.'
Output:type array, items None, format None, collectionFormat None
Input:The [Spotify ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for the playlist.
Output:",None
playlist_id,0.2,256,"
Identify the API parameter object by the grouping of its ""name"" and ""description"". Analyze the parameter description and extract logical constraints
in the provided format. Evaluate each case and determine whether it is applicable. Strictly follow the format and make no inferences. Only consider constraints
that are strictly required. Interpret the description in the least constraining manner, and assume Case 1 unless the other cases are obvious:

Case 1: The description isn't definitive about parameter requirements. Output ""None"".
Case 2: The description states the parameter ""name"" is required. Output: ""REQUIRED: name"". 
Case 3: The description states that parameter ""name"" or another parameter ""name"" is required. Output: ""Or(name, name)""
Case 4: The description states that given a set of parameters name, name_2, . . . , name_n, zero or one can be present in the API call: Output: ""ZeroOrOne(name, name_2, ... name_n)""
Case 5: The description states that given a set of parameters name, name_2, . . . , name_n, exactly one must be present in the API call: Output: ""OnlyOne(name, name_2, ... name_n)""
Case 6: The description states that given a set of parameters name, name_2, . . . , name_n, all of them or none must be present in the API call: Output: ""AllOrNone(name, name_2, ... name_n)""
Case 7: The description states that there is a relational relationship between some parameters: Output: ""name >= name_2"", where the standard relational operators can be used
Case 8: The description states that there is an arithmetic relationship between the value of parameters: Output: ""name_1 + name_2 <= value"", where the standard arithmetic operators can be used
Case 9: The description states there is a conditional relationship between parameters: Output: ""IF name THEN name_2"", where the standard logical operators can be used
Case 10: The description states that there exists a complex relationship between parameters, you can combine rules from the grammar to express a statement: Output: ""IF name==value THEN OnlyOne(name_2 AND name_3, name_4 AND name_5);

The grammar for statements is succinctly defined as follows:

Model:
    Dependency*;
Dependency:
    RelationalDependency | ArithmeticDependency |
    ConditionalDependency | PredefinedDependency;
RelationalDependency:
    Param RelationalOperator Param;
ArithmeticDependency:
    Operation RelationalOperator DOUBLE;
Operation:
    Param OperationContinuation |
    '(' Operation ')' OperationContinuation?;
OperationContinuation:
    ArithmeticOperator (Param | Operation);
ConditionalDependency:
    'IF' Predicate 'THEN' Predicate;
Predicate:
    Clause ClauseContinuation?;
Clause:
    (Term | RelationalDependency | ArithmeticDependency
    | PredefinedDependency) | 'NOT'? '(' Predicate ')';
Term:
    'NOT'? (Param | ParamValueRelation);
Param:
    ID | '[' ID ']';
ParamValueRelation:
    Param '==' STRING('|'STRING)* |
    Param 'LIKE' PATTERN_STRING | Param '==' BOOLEAN |
    Param RelationalOperator DOUBLE;
ClauseContinuation:
    ('AND' | 'OR') Predicate;
PredefinedDependency:
    'NOT'? ('Or' | 'OnlyOne' | 'AllOrNone' |
    'ZeroOrOne') '(' Clause (',' Clause)+ ')';
RelationalOperator:
    '<' | '>' | '<=' | '>=' | '==' | '!=';
ArithmeticOperator:
    '+' | '-' | '*' | '/';

If there are multiple dependency statements, return each one on a new line. Do not include any other text. Do not create dependencies on expected API responses.
Assume any ""
"" values in the input indicate either new lines or spaces. 
Here are some examples of expected outputs:

Input:
name: text 
description: The text to be checked. This or 'data' is required.
Output:Or(text, data);
Input: 
     name: idea
     description: 'An idea for a project. This and 'rating' are required.'
Output:OnlyOne(idea AND rating);
Input:
      name: partID
      description: 'The ID of the part. If partModel is specified partID must be specified'
Output:IF partModel THEN partID;
Input:
       name: language 
       description: The language of the client, not required if the country-code is USA or CAN.
Output:IF country-code!='USA' OR country-code=='CAN' THEN language;
Input:
        name: cost
        description: The cost of the product, this - profit must be greater than 500.
Output:cost - profit > 500;
Input:The [Spotify ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for the playlist.
Output:",None
position,0.2,256,"
Analyze the provided API parameter description, and extract any example values for the parameter mentioned in the description. 
Then, generate a few additional example values that correspond to, or are in the same category as the provided values.
If there are no example values provided, simply generate values corresponding to the description, and always generate values when possible.  
If generating example values is not possible, return None. Consider the following cases: 

Case 1: The description contains example values USA, CAN, ZWE: Output: ""PROVIDED: USA, CAN, ZWE +++ GENERATED: BRA, FRA, GER ...""
Case 2: The description does not explicitly mention example values: Output: ""PROVIDED: None +++ GENERATED: BRA, FRA, GER, USA ...""
Case 3: The description does not explicitly mention example values, and it is not possible to generate example values: Output: ""None""

Assume any ""
"" values in the input represent spaces or new lines. Do not output any ""
"" strings.

Here are some examples of inputs and expected outputs:
Input:'The country code associated with the country. Examples are CAD, USD, etc...'
Output:PROVIDED: CAD, USD +++ GENERATED: AFG, ALA, ALB, DZA, ASM, AND, AGO, AIA, ATA, ATG, ARG, ARM, ABW, AUS, AUT, AZE, BHS, BHR, BGD, BRB, BLR, BEL, 
BLZ, BEN, BMU, BTN, BOL, BES, BIH, BWA, BVT, BRA, IOT, BRN, BGR, BFA, BDI, CPV, KHM, CMR, CAN, CYM, CAF, TCD, 
CHL, CHN, CXR, CCK, COL, COM, COG, COD, COK, CRI, CIV, HRV, CUB, CUW, CYP, CZE, DNK, DJI, DMA, DOM, ECU, EGY, 
SLV, GNQ, ERI, EST, SWZ, ETH, FLK, FRO, FJI, FIN, FRA, GUF, PYF, ATF, GAB, GMB, GEO, DEU, GHA, GIB, GRC, GRL, 
GRD, GLP, GUM, GTM, GGY, GIN, GNB, GUY, HTI, HMD, VAT, HND, HKG, HUN, ISL, IND, IDN, IRN, IRQ, IRL, IMN, ISR, 
ITA, JAM, JPN, JEY, JOR, KAZ, KEN, KIR, PRK, KOR, KWT, KGZ, LAO, LVA, LBN, LSO, LBR, LBY, LIE, LTU, LUX, MAC, 
MDG, MWI, MYS, MDV, MLI, MLT, MHL, MTQ, MRT, MUS, MYT, MEX, FSM, MDA, MCO, MNG, MNE, MSR, MAR, MOZ, MMR, NAM, 
NRU, NPL, NLD, NCL, NZL, NIC, NER, NGA, NIU, NFK, MKD, MNP, NOR, OMN, PAK, PLW, PSE, PAN, PNG, PRY, PER, PHL, 
PCN, POL, PRT, PRI, QAT, REU, ROU, RUS, RWA, BLM, SHN, KNA, LCA, MAF, SPM, VCT, WSM, SMR, STP, SAU, SEN, SRB, 
SYC, SLE, SGP, SXM, SVK, SVN, SLB, SOM, ZAF, SGS, SSD, ESP, LKA, SDN, SUR, SJM, SWE, CHE, SYR, TWN, TJK, TZA, 
THA, TLS, TGO, TKL, TON, TTO, TUN, TUR, TKM, TCA, TUV, UGA, UKR, ARE, GBR, USA, UMI, URY, UZB, VUT, VEN, VNM, 
VGB, VIR, WLF, ESH, YEM, ZMB, ZWE
Input:'The numbers for the percent grades must be to one decimal place (such as 10.6).'
Output:PROVIDED: 10.6 +++ GENERATED: 0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0, 2.1, 
2.2, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8, 2.9, 3.0, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6, 3.7, 3.8, 3.9, 4.0, 4.1, 4.2, 4.3, 4.4, 
4.5, 4.6, 4.7, 4.8, 4.9, 5.0, 5.1, 5.2, 5.3, 10.0, 99.9, 100.0
Input:'The title of the book to be rated.'
Output:PROVIDED: None +++ GENERATED: To Kill a Mockingbird, 1984, Pride and Prejudice, The Great Gatsby, Moby-Dick, The Catcher in the Rye, Harry Potter 
and the Sorcerer's Stone, The Lord of the Rings, One Hundred Years of Solitude, Brave New World, Sapiens: A Brief 
History of Humankind, The Immortal Life of Henrietta Lacks, Thinking, Fast and Slow, The Wright Brothers, The Diary of 
a Young Girl, Educated, The Art of War, The 7 Habits of Highly Effective People, Freakonomics, Quiet: The Power of 
Introverts in a World That Can't Stop Talking, Dune, Ender's Game, Neuromancer
Input:'The value for the number of products to consume. It must be greater than 12 and less than 50.'
Output:PROVIDED: None +++ GENERATED: None
Input:'The number of bank accounts associated. Cannot be less than 0.'
Output:PROVIDED: None +++ GENERATED: None
Input:The position to insert the items, a zero-based index. For example, to insert the items in the first position: `position=0`; to insert the items in the third position: `position=2` . If omitted, the items will be appended to the playlist. Items are added in the order they are listed in the query string or request body.
Output:",None
position,0.2,256,"
Analyze the provided API parameter description and first estimate the parameter type. Then, according to the type, apply the following to determine restrictions on the parameter input:
If it is a number, determine if the description mentions minimum, maximum, or default possible values and output: ""min [minimum], max [maximum], default [default]"". 
If it's a string, word, or code, determine if the description mentions minimum or maximum possible character amounts or a default value, and output: ""minLength [minimum], maxLength [maximum], default [default]"". 
If it's an array or list, determine if the description mentions minimum or maximum possible list lengths or a default value, and output: ""minItems [minimum], maxItems [maximum], default [default]"".
If it's an object, determine if the description mentions minimum or maximum possible numbers of object properties or a default value, and output: ""minProperties [minimum], maxProperties [maximum], default [default]"".
If it is any other data type where there is a default value provided, output: ""min None, max None, default [default]"".
If you are unable to determine any minimum, maximum, or default restrictions, output ""None"". If you are able to determine only one either the minimum or maximum, output the undetermined value as ""None"".

Assume any ""
"" values in the input indicate either new lines or spaces. 

Here are some examples of inputs and expected outputs:

Input:'An idea for a project. This and 'rating' are required.'
Output:None
Input:'The maximum value is 50. If nothing is put in, default to 0.'
Output:min None, max 50, default 0
Input:'The timer counter. The value must be between 15.0 and 120.'
Output:min 15.0, max 120, default None
Input:'The input range. The smallest value possible is -120.8. The largest should be 179.652.'
Output:min -120.8, max 179.652, default None
Input:'The number of items to be investigated. The maximum is 9,999.99'
Output:min None, max 9999.99, default None
Input:'The name of the movie. The movie name cannot be shorter than 10 characters and longer than 20 characters.'
Output:minLength 10, maxLength 20, default None
Input:'The country code which can be 1-letter, 2-letter, or 3-letter.'
Output:minLength 1, maxLength 3, default None
Input:'A supplied language code that can either be 2-letter or 3-letter which is used to parse through a list of common phrases.'
Output:minLength 2, maxLength 3, default None
Input:'Search via county areas.'
Output:None
Input:'Identifies synonyms through word inputs.'
Output:None
Input:'After searching through a list of ISO country codes, input 2-letter or 3-letter codes to find their data.'
Output:minLength 2, maxLength 3, default None
Input:The position to insert the items, a zero-based index. For example, to insert the items in the first position: `position=0`; to insert the items in the third position: `position=2` . If omitted, the items will be appended to the playlist. Items are added in the order they are listed in the query string or request body.
Output:",None
position,0.2,256,"
Analyze the provided API parameter description and determine whether it clearly identifies the parameter's data type 
or formatting. 
The list of possible data types are as follows: string, number, integer, boolean, array, and object.
The list of format options are as follows: time, date, password, byte, binary, email, uuid, uri, url, hostname, ipv4, and ipv6. Use the types and formats available for the OpenAPI Specification. 
A list of collectionFormat types are as follows: csv, ssv, and pipes.
If the data type is an array, attempt to identify its item type. 
Output the answer as follows: ""type [type], items [item type], format [format], collectionFormat [collectionFormat]"". Output None when unable to determine any of the categories. 
For example, only output a non-None ""item type"" if the ""type"" is array.

Assume any ""
"" values in the input indicate either new lines or spaces. 

Here are some examples of inputs and expected outputs:

Input:'A space-separated list of percent grades corresponding to the student.'
Output:type array, items number, format None, collectionFormat ssv
Input:'This should contain the email of the sender.'
Output:type string, items None, format email, collectionFormat None
Input:'This value should be true if the assignment is available for regrade.'
Output:type boolean, items None, format None, collectionFormat None
Input:'A URL containing the website for evaluation.'
Output:type string, items None, format url, collectionFormat None
Input:'The date of the contest. The date must be within the last three months.'
Output:type string, items None, format date, collectionFormat None
Input:'The time that the project must be completed. Use Eastern Standard Timezone (EST).'
Output:type string, items None, format date-time, collectionFormat None
Input:'A list of region codes.'
Output:type array, items None, format None, collectionFormat None
Input:The position to insert the items, a zero-based index. For example, to insert the items in the first position: `position=0`; to insert the items in the third position: `position=2` . If omitted, the items will be appended to the playlist. Items are added in the order they are listed in the query string or request body.
Output:",None
position,0.2,256,"
Identify the API parameter object by the grouping of its ""name"" and ""description"". Analyze the parameter description and extract logical constraints
in the provided format. Evaluate each case and determine whether it is applicable. Strictly follow the format and make no inferences. Only consider constraints
that are strictly required. Interpret the description in the least constraining manner, and assume Case 1 unless the other cases are obvious:

Case 1: The description isn't definitive about parameter requirements. Output ""None"".
Case 2: The description states the parameter ""name"" is required. Output: ""REQUIRED: name"". 
Case 3: The description states that parameter ""name"" or another parameter ""name"" is required. Output: ""Or(name, name)""
Case 4: The description states that given a set of parameters name, name_2, . . . , name_n, zero or one can be present in the API call: Output: ""ZeroOrOne(name, name_2, ... name_n)""
Case 5: The description states that given a set of parameters name, name_2, . . . , name_n, exactly one must be present in the API call: Output: ""OnlyOne(name, name_2, ... name_n)""
Case 6: The description states that given a set of parameters name, name_2, . . . , name_n, all of them or none must be present in the API call: Output: ""AllOrNone(name, name_2, ... name_n)""
Case 7: The description states that there is a relational relationship between some parameters: Output: ""name >= name_2"", where the standard relational operators can be used
Case 8: The description states that there is an arithmetic relationship between the value of parameters: Output: ""name_1 + name_2 <= value"", where the standard arithmetic operators can be used
Case 9: The description states there is a conditional relationship between parameters: Output: ""IF name THEN name_2"", where the standard logical operators can be used
Case 10: The description states that there exists a complex relationship between parameters, you can combine rules from the grammar to express a statement: Output: ""IF name==value THEN OnlyOne(name_2 AND name_3, name_4 AND name_5);

The grammar for statements is succinctly defined as follows:

Model:
    Dependency*;
Dependency:
    RelationalDependency | ArithmeticDependency |
    ConditionalDependency | PredefinedDependency;
RelationalDependency:
    Param RelationalOperator Param;
ArithmeticDependency:
    Operation RelationalOperator DOUBLE;
Operation:
    Param OperationContinuation |
    '(' Operation ')' OperationContinuation?;
OperationContinuation:
    ArithmeticOperator (Param | Operation);
ConditionalDependency:
    'IF' Predicate 'THEN' Predicate;
Predicate:
    Clause ClauseContinuation?;
Clause:
    (Term | RelationalDependency | ArithmeticDependency
    | PredefinedDependency) | 'NOT'? '(' Predicate ')';
Term:
    'NOT'? (Param | ParamValueRelation);
Param:
    ID | '[' ID ']';
ParamValueRelation:
    Param '==' STRING('|'STRING)* |
    Param 'LIKE' PATTERN_STRING | Param '==' BOOLEAN |
    Param RelationalOperator DOUBLE;
ClauseContinuation:
    ('AND' | 'OR') Predicate;
PredefinedDependency:
    'NOT'? ('Or' | 'OnlyOne' | 'AllOrNone' |
    'ZeroOrOne') '(' Clause (',' Clause)+ ')';
RelationalOperator:
    '<' | '>' | '<=' | '>=' | '==' | '!=';
ArithmeticOperator:
    '+' | '-' | '*' | '/';

If there are multiple dependency statements, return each one on a new line. Do not include any other text. Do not create dependencies on expected API responses.
Assume any ""
"" values in the input indicate either new lines or spaces. 
Here are some examples of expected outputs:

Input:
name: text 
description: The text to be checked. This or 'data' is required.
Output:Or(text, data);
Input: 
     name: idea
     description: 'An idea for a project. This and 'rating' are required.'
Output:OnlyOne(idea AND rating);
Input:
      name: partID
      description: 'The ID of the part. If partModel is specified partID must be specified'
Output:IF partModel THEN partID;
Input:
       name: language 
       description: The language of the client, not required if the country-code is USA or CAN.
Output:IF country-code!='USA' OR country-code=='CAN' THEN language;
Input:
        name: cost
        description: The cost of the product, this - profit must be greater than 500.
Output:cost - profit > 500;
Input:The position to insert the items, a zero-based index. For example, to insert the items in the first position: `position=0`; to insert the items in the third position: `position=2` . If omitted, the items will be appended to the playlist. Items are added in the order they are listed in the query string or request body.
Output:",None
uris,0.2,256,"
Analyze the provided API parameter description, and extract any example values for the parameter mentioned in the description. 
Then, generate a few additional example values that correspond to, or are in the same category as the provided values.
If there are no example values provided, simply generate values corresponding to the description, and always generate values when possible.  
If generating example values is not possible, return None. Consider the following cases: 

Case 1: The description contains example values USA, CAN, ZWE: Output: ""PROVIDED: USA, CAN, ZWE +++ GENERATED: BRA, FRA, GER ...""
Case 2: The description does not explicitly mention example values: Output: ""PROVIDED: None +++ GENERATED: BRA, FRA, GER, USA ...""
Case 3: The description does not explicitly mention example values, and it is not possible to generate example values: Output: ""None""

Assume any ""
"" values in the input represent spaces or new lines. Do not output any ""
"" strings.

Here are some examples of inputs and expected outputs:
Input:'The country code associated with the country. Examples are CAD, USD, etc...'
Output:PROVIDED: CAD, USD +++ GENERATED: AFG, ALA, ALB, DZA, ASM, AND, AGO, AIA, ATA, ATG, ARG, ARM, ABW, AUS, AUT, AZE, BHS, BHR, BGD, BRB, BLR, BEL, 
BLZ, BEN, BMU, BTN, BOL, BES, BIH, BWA, BVT, BRA, IOT, BRN, BGR, BFA, BDI, CPV, KHM, CMR, CAN, CYM, CAF, TCD, 
CHL, CHN, CXR, CCK, COL, COM, COG, COD, COK, CRI, CIV, HRV, CUB, CUW, CYP, CZE, DNK, DJI, DMA, DOM, ECU, EGY, 
SLV, GNQ, ERI, EST, SWZ, ETH, FLK, FRO, FJI, FIN, FRA, GUF, PYF, ATF, GAB, GMB, GEO, DEU, GHA, GIB, GRC, GRL, 
GRD, GLP, GUM, GTM, GGY, GIN, GNB, GUY, HTI, HMD, VAT, HND, HKG, HUN, ISL, IND, IDN, IRN, IRQ, IRL, IMN, ISR, 
ITA, JAM, JPN, JEY, JOR, KAZ, KEN, KIR, PRK, KOR, KWT, KGZ, LAO, LVA, LBN, LSO, LBR, LBY, LIE, LTU, LUX, MAC, 
MDG, MWI, MYS, MDV, MLI, MLT, MHL, MTQ, MRT, MUS, MYT, MEX, FSM, MDA, MCO, MNG, MNE, MSR, MAR, MOZ, MMR, NAM, 
NRU, NPL, NLD, NCL, NZL, NIC, NER, NGA, NIU, NFK, MKD, MNP, NOR, OMN, PAK, PLW, PSE, PAN, PNG, PRY, PER, PHL, 
PCN, POL, PRT, PRI, QAT, REU, ROU, RUS, RWA, BLM, SHN, KNA, LCA, MAF, SPM, VCT, WSM, SMR, STP, SAU, SEN, SRB, 
SYC, SLE, SGP, SXM, SVK, SVN, SLB, SOM, ZAF, SGS, SSD, ESP, LKA, SDN, SUR, SJM, SWE, CHE, SYR, TWN, TJK, TZA, 
THA, TLS, TGO, TKL, TON, TTO, TUN, TUR, TKM, TCA, TUV, UGA, UKR, ARE, GBR, USA, UMI, URY, UZB, VUT, VEN, VNM, 
VGB, VIR, WLF, ESH, YEM, ZMB, ZWE
Input:'The numbers for the percent grades must be to one decimal place (such as 10.6).'
Output:PROVIDED: 10.6 +++ GENERATED: 0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0, 2.1, 
2.2, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8, 2.9, 3.0, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6, 3.7, 3.8, 3.9, 4.0, 4.1, 4.2, 4.3, 4.4, 
4.5, 4.6, 4.7, 4.8, 4.9, 5.0, 5.1, 5.2, 5.3, 10.0, 99.9, 100.0
Input:'The title of the book to be rated.'
Output:PROVIDED: None +++ GENERATED: To Kill a Mockingbird, 1984, Pride and Prejudice, The Great Gatsby, Moby-Dick, The Catcher in the Rye, Harry Potter 
and the Sorcerer's Stone, The Lord of the Rings, One Hundred Years of Solitude, Brave New World, Sapiens: A Brief 
History of Humankind, The Immortal Life of Henrietta Lacks, Thinking, Fast and Slow, The Wright Brothers, The Diary of 
a Young Girl, Educated, The Art of War, The 7 Habits of Highly Effective People, Freakonomics, Quiet: The Power of 
Introverts in a World That Can't Stop Talking, Dune, Ender's Game, Neuromancer
Input:'The value for the number of products to consume. It must be greater than 12 and less than 50.'
Output:PROVIDED: None +++ GENERATED: None
Input:'The number of bank accounts associated. Cannot be less than 0.'
Output:PROVIDED: None +++ GENERATED: None
Input:A comma-separated list of [Spotify URIs](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) to add, can be track or episode URIs. For example:
`uris=spotify:track:4iV5W9uYEdYUVa79Axb7Rh, spotify:track:1301WleyT98MSxVHPZCA6M, spotify:episode:512ojhOuo1ktJprKbVcKyQ`
A maximum of 100 items can be added in one request. *Note: it is likely that passing a large number of item URIs as a query parameter will exceed the maximum length of the request URI. When adding a large number of items, it is recommended to pass them in the request body, see below.*
Output:",None
uris,0.2,256,"
Analyze the provided API parameter description and first estimate the parameter type. Then, according to the type, apply the following to determine restrictions on the parameter input:
If it is a number, determine if the description mentions minimum, maximum, or default possible values and output: ""min [minimum], max [maximum], default [default]"". 
If it's a string, word, or code, determine if the description mentions minimum or maximum possible character amounts or a default value, and output: ""minLength [minimum], maxLength [maximum], default [default]"". 
If it's an array or list, determine if the description mentions minimum or maximum possible list lengths or a default value, and output: ""minItems [minimum], maxItems [maximum], default [default]"".
If it's an object, determine if the description mentions minimum or maximum possible numbers of object properties or a default value, and output: ""minProperties [minimum], maxProperties [maximum], default [default]"".
If it is any other data type where there is a default value provided, output: ""min None, max None, default [default]"".
If you are unable to determine any minimum, maximum, or default restrictions, output ""None"". If you are able to determine only one either the minimum or maximum, output the undetermined value as ""None"".

Assume any ""
"" values in the input indicate either new lines or spaces. 

Here are some examples of inputs and expected outputs:

Input:'An idea for a project. This and 'rating' are required.'
Output:None
Input:'The maximum value is 50. If nothing is put in, default to 0.'
Output:min None, max 50, default 0
Input:'The timer counter. The value must be between 15.0 and 120.'
Output:min 15.0, max 120, default None
Input:'The input range. The smallest value possible is -120.8. The largest should be 179.652.'
Output:min -120.8, max 179.652, default None
Input:'The number of items to be investigated. The maximum is 9,999.99'
Output:min None, max 9999.99, default None
Input:'The name of the movie. The movie name cannot be shorter than 10 characters and longer than 20 characters.'
Output:minLength 10, maxLength 20, default None
Input:'The country code which can be 1-letter, 2-letter, or 3-letter.'
Output:minLength 1, maxLength 3, default None
Input:'A supplied language code that can either be 2-letter or 3-letter which is used to parse through a list of common phrases.'
Output:minLength 2, maxLength 3, default None
Input:'Search via county areas.'
Output:None
Input:'Identifies synonyms through word inputs.'
Output:None
Input:'After searching through a list of ISO country codes, input 2-letter or 3-letter codes to find their data.'
Output:minLength 2, maxLength 3, default None
Input:A comma-separated list of [Spotify URIs](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) to add, can be track or episode URIs. For example:
`uris=spotify:track:4iV5W9uYEdYUVa79Axb7Rh, spotify:track:1301WleyT98MSxVHPZCA6M, spotify:episode:512ojhOuo1ktJprKbVcKyQ`
A maximum of 100 items can be added in one request. *Note: it is likely that passing a large number of item URIs as a query parameter will exceed the maximum length of the request URI. When adding a large number of items, it is recommended to pass them in the request body, see below.*
Output:","minItems None, maxItems 100, default None"
uris,0.2,256,"
Analyze the provided API parameter description and determine whether it clearly identifies the parameter's data type 
or formatting. 
The list of possible data types are as follows: string, number, integer, boolean, array, and object.
The list of format options are as follows: time, date, password, byte, binary, email, uuid, uri, url, hostname, ipv4, and ipv6. Use the types and formats available for the OpenAPI Specification. 
A list of collectionFormat types are as follows: csv, ssv, and pipes.
If the data type is an array, attempt to identify its item type. 
Output the answer as follows: ""type [type], items [item type], format [format], collectionFormat [collectionFormat]"". Output None when unable to determine any of the categories. 
For example, only output a non-None ""item type"" if the ""type"" is array.

Assume any ""
"" values in the input indicate either new lines or spaces. 

Here are some examples of inputs and expected outputs:

Input:'A space-separated list of percent grades corresponding to the student.'
Output:type array, items number, format None, collectionFormat ssv
Input:'This should contain the email of the sender.'
Output:type string, items None, format email, collectionFormat None
Input:'This value should be true if the assignment is available for regrade.'
Output:type boolean, items None, format None, collectionFormat None
Input:'A URL containing the website for evaluation.'
Output:type string, items None, format url, collectionFormat None
Input:'The date of the contest. The date must be within the last three months.'
Output:type string, items None, format date, collectionFormat None
Input:'The time that the project must be completed. Use Eastern Standard Timezone (EST).'
Output:type string, items None, format date-time, collectionFormat None
Input:'A list of region codes.'
Output:type array, items None, format None, collectionFormat None
Input:A comma-separated list of [Spotify URIs](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) to add, can be track or episode URIs. For example:
`uris=spotify:track:4iV5W9uYEdYUVa79Axb7Rh, spotify:track:1301WleyT98MSxVHPZCA6M, spotify:episode:512ojhOuo1ktJprKbVcKyQ`
A maximum of 100 items can be added in one request. *Note: it is likely that passing a large number of item URIs as a query parameter will exceed the maximum length of the request URI. When adding a large number of items, it is recommended to pass them in the request body, see below.*
Output:",None
uris,0.2,256,"
Identify the API parameter object by the grouping of its ""name"" and ""description"". Analyze the parameter description and extract logical constraints
in the provided format. Evaluate each case and determine whether it is applicable. Strictly follow the format and make no inferences. Only consider constraints
that are strictly required. Interpret the description in the least constraining manner, and assume Case 1 unless the other cases are obvious:

Case 1: The description isn't definitive about parameter requirements. Output ""None"".
Case 2: The description states the parameter ""name"" is required. Output: ""REQUIRED: name"". 
Case 3: The description states that parameter ""name"" or another parameter ""name"" is required. Output: ""Or(name, name)""
Case 4: The description states that given a set of parameters name, name_2, . . . , name_n, zero or one can be present in the API call: Output: ""ZeroOrOne(name, name_2, ... name_n)""
Case 5: The description states that given a set of parameters name, name_2, . . . , name_n, exactly one must be present in the API call: Output: ""OnlyOne(name, name_2, ... name_n)""
Case 6: The description states that given a set of parameters name, name_2, . . . , name_n, all of them or none must be present in the API call: Output: ""AllOrNone(name, name_2, ... name_n)""
Case 7: The description states that there is a relational relationship between some parameters: Output: ""name >= name_2"", where the standard relational operators can be used
Case 8: The description states that there is an arithmetic relationship between the value of parameters: Output: ""name_1 + name_2 <= value"", where the standard arithmetic operators can be used
Case 9: The description states there is a conditional relationship between parameters: Output: ""IF name THEN name_2"", where the standard logical operators can be used
Case 10: The description states that there exists a complex relationship between parameters, you can combine rules from the grammar to express a statement: Output: ""IF name==value THEN OnlyOne(name_2 AND name_3, name_4 AND name_5);

The grammar for statements is succinctly defined as follows:

Model:
    Dependency*;
Dependency:
    RelationalDependency | ArithmeticDependency |
    ConditionalDependency | PredefinedDependency;
RelationalDependency:
    Param RelationalOperator Param;
ArithmeticDependency:
    Operation RelationalOperator DOUBLE;
Operation:
    Param OperationContinuation |
    '(' Operation ')' OperationContinuation?;
OperationContinuation:
    ArithmeticOperator (Param | Operation);
ConditionalDependency:
    'IF' Predicate 'THEN' Predicate;
Predicate:
    Clause ClauseContinuation?;
Clause:
    (Term | RelationalDependency | ArithmeticDependency
    | PredefinedDependency) | 'NOT'? '(' Predicate ')';
Term:
    'NOT'? (Param | ParamValueRelation);
Param:
    ID | '[' ID ']';
ParamValueRelation:
    Param '==' STRING('|'STRING)* |
    Param 'LIKE' PATTERN_STRING | Param '==' BOOLEAN |
    Param RelationalOperator DOUBLE;
ClauseContinuation:
    ('AND' | 'OR') Predicate;
PredefinedDependency:
    'NOT'? ('Or' | 'OnlyOne' | 'AllOrNone' |
    'ZeroOrOne') '(' Clause (',' Clause)+ ')';
RelationalOperator:
    '<' | '>' | '<=' | '>=' | '==' | '!=';
ArithmeticOperator:
    '+' | '-' | '*' | '/';

If there are multiple dependency statements, return each one on a new line. Do not include any other text. Do not create dependencies on expected API responses.
Assume any ""
"" values in the input indicate either new lines or spaces. 
Here are some examples of expected outputs:

Input:
name: text 
description: The text to be checked. This or 'data' is required.
Output:Or(text, data);
Input: 
     name: idea
     description: 'An idea for a project. This and 'rating' are required.'
Output:OnlyOne(idea AND rating);
Input:
      name: partID
      description: 'The ID of the part. If partModel is specified partID must be specified'
Output:IF partModel THEN partID;
Input:
       name: language 
       description: The language of the client, not required if the country-code is USA or CAN.
Output:IF country-code!='USA' OR country-code=='CAN' THEN language;
Input:
        name: cost
        description: The cost of the product, this - profit must be greater than 500.
Output:cost - profit > 500;
Input:A comma-separated list of [Spotify URIs](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) to add, can be track or episode URIs. For example:
`uris=spotify:track:4iV5W9uYEdYUVa79Axb7Rh, spotify:track:1301WleyT98MSxVHPZCA6M, spotify:episode:512ojhOuo1ktJprKbVcKyQ`
A maximum of 100 items can be added in one request. *Note: it is likely that passing a large number of item URIs as a query parameter will exceed the maximum length of the request URI. When adding a large number of items, it is recommended to pass them in the request body, see below.*
Output:",None
playlist_id,0.2,256,"
Analyze the provided API parameter description, and extract any example values for the parameter mentioned in the description. 
Then, generate a few additional example values that correspond to, or are in the same category as the provided values.
If there are no example values provided, simply generate values corresponding to the description, and always generate values when possible.  
If generating example values is not possible, return None. Consider the following cases: 

Case 1: The description contains example values USA, CAN, ZWE: Output: ""PROVIDED: USA, CAN, ZWE +++ GENERATED: BRA, FRA, GER ...""
Case 2: The description does not explicitly mention example values: Output: ""PROVIDED: None +++ GENERATED: BRA, FRA, GER, USA ...""
Case 3: The description does not explicitly mention example values, and it is not possible to generate example values: Output: ""None""

Assume any ""
"" values in the input represent spaces or new lines. Do not output any ""
"" strings.

Here are some examples of inputs and expected outputs:
Input:'The country code associated with the country. Examples are CAD, USD, etc...'
Output:PROVIDED: CAD, USD +++ GENERATED: AFG, ALA, ALB, DZA, ASM, AND, AGO, AIA, ATA, ATG, ARG, ARM, ABW, AUS, AUT, AZE, BHS, BHR, BGD, BRB, BLR, BEL, 
BLZ, BEN, BMU, BTN, BOL, BES, BIH, BWA, BVT, BRA, IOT, BRN, BGR, BFA, BDI, CPV, KHM, CMR, CAN, CYM, CAF, TCD, 
CHL, CHN, CXR, CCK, COL, COM, COG, COD, COK, CRI, CIV, HRV, CUB, CUW, CYP, CZE, DNK, DJI, DMA, DOM, ECU, EGY, 
SLV, GNQ, ERI, EST, SWZ, ETH, FLK, FRO, FJI, FIN, FRA, GUF, PYF, ATF, GAB, GMB, GEO, DEU, GHA, GIB, GRC, GRL, 
GRD, GLP, GUM, GTM, GGY, GIN, GNB, GUY, HTI, HMD, VAT, HND, HKG, HUN, ISL, IND, IDN, IRN, IRQ, IRL, IMN, ISR, 
ITA, JAM, JPN, JEY, JOR, KAZ, KEN, KIR, PRK, KOR, KWT, KGZ, LAO, LVA, LBN, LSO, LBR, LBY, LIE, LTU, LUX, MAC, 
MDG, MWI, MYS, MDV, MLI, MLT, MHL, MTQ, MRT, MUS, MYT, MEX, FSM, MDA, MCO, MNG, MNE, MSR, MAR, MOZ, MMR, NAM, 
NRU, NPL, NLD, NCL, NZL, NIC, NER, NGA, NIU, NFK, MKD, MNP, NOR, OMN, PAK, PLW, PSE, PAN, PNG, PRY, PER, PHL, 
PCN, POL, PRT, PRI, QAT, REU, ROU, RUS, RWA, BLM, SHN, KNA, LCA, MAF, SPM, VCT, WSM, SMR, STP, SAU, SEN, SRB, 
SYC, SLE, SGP, SXM, SVK, SVN, SLB, SOM, ZAF, SGS, SSD, ESP, LKA, SDN, SUR, SJM, SWE, CHE, SYR, TWN, TJK, TZA, 
THA, TLS, TGO, TKL, TON, TTO, TUN, TUR, TKM, TCA, TUV, UGA, UKR, ARE, GBR, USA, UMI, URY, UZB, VUT, VEN, VNM, 
VGB, VIR, WLF, ESH, YEM, ZMB, ZWE
Input:'The numbers for the percent grades must be to one decimal place (such as 10.6).'
Output:PROVIDED: 10.6 +++ GENERATED: 0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0, 2.1, 
2.2, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8, 2.9, 3.0, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6, 3.7, 3.8, 3.9, 4.0, 4.1, 4.2, 4.3, 4.4, 
4.5, 4.6, 4.7, 4.8, 4.9, 5.0, 5.1, 5.2, 5.3, 10.0, 99.9, 100.0
Input:'The title of the book to be rated.'
Output:PROVIDED: None +++ GENERATED: To Kill a Mockingbird, 1984, Pride and Prejudice, The Great Gatsby, Moby-Dick, The Catcher in the Rye, Harry Potter 
and the Sorcerer's Stone, The Lord of the Rings, One Hundred Years of Solitude, Brave New World, Sapiens: A Brief 
History of Humankind, The Immortal Life of Henrietta Lacks, Thinking, Fast and Slow, The Wright Brothers, The Diary of 
a Young Girl, Educated, The Art of War, The 7 Habits of Highly Effective People, Freakonomics, Quiet: The Power of 
Introverts in a World That Can't Stop Talking, Dune, Ender's Game, Neuromancer
Input:'The value for the number of products to consume. It must be greater than 12 and less than 50.'
Output:PROVIDED: None +++ GENERATED: None
Input:'The number of bank accounts associated. Cannot be less than 0.'
Output:PROVIDED: None +++ GENERATED: None
Input:The [Spotify ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for the playlist.
Output:",None
playlist_id,0.2,256,"
Analyze the provided API parameter description and first estimate the parameter type. Then, according to the type, apply the following to determine restrictions on the parameter input:
If it is a number, determine if the description mentions minimum, maximum, or default possible values and output: ""min [minimum], max [maximum], default [default]"". 
If it's a string, word, or code, determine if the description mentions minimum or maximum possible character amounts or a default value, and output: ""minLength [minimum], maxLength [maximum], default [default]"". 
If it's an array or list, determine if the description mentions minimum or maximum possible list lengths or a default value, and output: ""minItems [minimum], maxItems [maximum], default [default]"".
If it's an object, determine if the description mentions minimum or maximum possible numbers of object properties or a default value, and output: ""minProperties [minimum], maxProperties [maximum], default [default]"".
If it is any other data type where there is a default value provided, output: ""min None, max None, default [default]"".
If you are unable to determine any minimum, maximum, or default restrictions, output ""None"". If you are able to determine only one either the minimum or maximum, output the undetermined value as ""None"".

Assume any ""
"" values in the input indicate either new lines or spaces. 

Here are some examples of inputs and expected outputs:

Input:'An idea for a project. This and 'rating' are required.'
Output:None
Input:'The maximum value is 50. If nothing is put in, default to 0.'
Output:min None, max 50, default 0
Input:'The timer counter. The value must be between 15.0 and 120.'
Output:min 15.0, max 120, default None
Input:'The input range. The smallest value possible is -120.8. The largest should be 179.652.'
Output:min -120.8, max 179.652, default None
Input:'The number of items to be investigated. The maximum is 9,999.99'
Output:min None, max 9999.99, default None
Input:'The name of the movie. The movie name cannot be shorter than 10 characters and longer than 20 characters.'
Output:minLength 10, maxLength 20, default None
Input:'The country code which can be 1-letter, 2-letter, or 3-letter.'
Output:minLength 1, maxLength 3, default None
Input:'A supplied language code that can either be 2-letter or 3-letter which is used to parse through a list of common phrases.'
Output:minLength 2, maxLength 3, default None
Input:'Search via county areas.'
Output:None
Input:'Identifies synonyms through word inputs.'
Output:None
Input:'After searching through a list of ISO country codes, input 2-letter or 3-letter codes to find their data.'
Output:minLength 2, maxLength 3, default None
Input:The [Spotify ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for the playlist.
Output:",None
playlist_id,0.2,256,"
Analyze the provided API parameter description and determine whether it clearly identifies the parameter's data type 
or formatting. 
The list of possible data types are as follows: string, number, integer, boolean, array, and object.
The list of format options are as follows: time, date, password, byte, binary, email, uuid, uri, url, hostname, ipv4, and ipv6. Use the types and formats available for the OpenAPI Specification. 
A list of collectionFormat types are as follows: csv, ssv, and pipes.
If the data type is an array, attempt to identify its item type. 
Output the answer as follows: ""type [type], items [item type], format [format], collectionFormat [collectionFormat]"". Output None when unable to determine any of the categories. 
For example, only output a non-None ""item type"" if the ""type"" is array.

Assume any ""
"" values in the input indicate either new lines or spaces. 

Here are some examples of inputs and expected outputs:

Input:'A space-separated list of percent grades corresponding to the student.'
Output:type array, items number, format None, collectionFormat ssv
Input:'This should contain the email of the sender.'
Output:type string, items None, format email, collectionFormat None
Input:'This value should be true if the assignment is available for regrade.'
Output:type boolean, items None, format None, collectionFormat None
Input:'A URL containing the website for evaluation.'
Output:type string, items None, format url, collectionFormat None
Input:'The date of the contest. The date must be within the last three months.'
Output:type string, items None, format date, collectionFormat None
Input:'The time that the project must be completed. Use Eastern Standard Timezone (EST).'
Output:type string, items None, format date-time, collectionFormat None
Input:'A list of region codes.'
Output:type array, items None, format None, collectionFormat None
Input:The [Spotify ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for the playlist.
Output:",None
playlist_id,0.2,256,"
Identify the API parameter object by the grouping of its ""name"" and ""description"". Analyze the parameter description and extract logical constraints
in the provided format. Evaluate each case and determine whether it is applicable. Strictly follow the format and make no inferences. Only consider constraints
that are strictly required. Interpret the description in the least constraining manner, and assume Case 1 unless the other cases are obvious:

Case 1: The description isn't definitive about parameter requirements. Output ""None"".
Case 2: The description states the parameter ""name"" is required. Output: ""REQUIRED: name"". 
Case 3: The description states that parameter ""name"" or another parameter ""name"" is required. Output: ""Or(name, name)""
Case 4: The description states that given a set of parameters name, name_2, . . . , name_n, zero or one can be present in the API call: Output: ""ZeroOrOne(name, name_2, ... name_n)""
Case 5: The description states that given a set of parameters name, name_2, . . . , name_n, exactly one must be present in the API call: Output: ""OnlyOne(name, name_2, ... name_n)""
Case 6: The description states that given a set of parameters name, name_2, . . . , name_n, all of them or none must be present in the API call: Output: ""AllOrNone(name, name_2, ... name_n)""
Case 7: The description states that there is a relational relationship between some parameters: Output: ""name >= name_2"", where the standard relational operators can be used
Case 8: The description states that there is an arithmetic relationship between the value of parameters: Output: ""name_1 + name_2 <= value"", where the standard arithmetic operators can be used
Case 9: The description states there is a conditional relationship between parameters: Output: ""IF name THEN name_2"", where the standard logical operators can be used
Case 10: The description states that there exists a complex relationship between parameters, you can combine rules from the grammar to express a statement: Output: ""IF name==value THEN OnlyOne(name_2 AND name_3, name_4 AND name_5);

The grammar for statements is succinctly defined as follows:

Model:
    Dependency*;
Dependency:
    RelationalDependency | ArithmeticDependency |
    ConditionalDependency | PredefinedDependency;
RelationalDependency:
    Param RelationalOperator Param;
ArithmeticDependency:
    Operation RelationalOperator DOUBLE;
Operation:
    Param OperationContinuation |
    '(' Operation ')' OperationContinuation?;
OperationContinuation:
    ArithmeticOperator (Param | Operation);
ConditionalDependency:
    'IF' Predicate 'THEN' Predicate;
Predicate:
    Clause ClauseContinuation?;
Clause:
    (Term | RelationalDependency | ArithmeticDependency
    | PredefinedDependency) | 'NOT'? '(' Predicate ')';
Term:
    'NOT'? (Param | ParamValueRelation);
Param:
    ID | '[' ID ']';
ParamValueRelation:
    Param '==' STRING('|'STRING)* |
    Param 'LIKE' PATTERN_STRING | Param '==' BOOLEAN |
    Param RelationalOperator DOUBLE;
ClauseContinuation:
    ('AND' | 'OR') Predicate;
PredefinedDependency:
    'NOT'? ('Or' | 'OnlyOne' | 'AllOrNone' |
    'ZeroOrOne') '(' Clause (',' Clause)+ ')';
RelationalOperator:
    '<' | '>' | '<=' | '>=' | '==' | '!=';
ArithmeticOperator:
    '+' | '-' | '*' | '/';

If there are multiple dependency statements, return each one on a new line. Do not include any other text. Do not create dependencies on expected API responses.
Assume any ""
"" values in the input indicate either new lines or spaces. 
Here are some examples of expected outputs:

Input:
name: text 
description: The text to be checked. This or 'data' is required.
Output:Or(text, data);
Input: 
     name: idea
     description: 'An idea for a project. This and 'rating' are required.'
Output:OnlyOne(idea AND rating);
Input:
      name: partID
      description: 'The ID of the part. If partModel is specified partID must be specified'
Output:IF partModel THEN partID;
Input:
       name: language 
       description: The language of the client, not required if the country-code is USA or CAN.
Output:IF country-code!='USA' OR country-code=='CAN' THEN language;
Input:
        name: cost
        description: The cost of the product, this - profit must be greater than 500.
Output:cost - profit > 500;
Input:The [Spotify ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for the playlist.
Output:",None
uris,0.2,256,"
Analyze the provided API parameter description, and extract any example values for the parameter mentioned in the description. 
Then, generate a few additional example values that correspond to, or are in the same category as the provided values.
If there are no example values provided, simply generate values corresponding to the description, and always generate values when possible.  
If generating example values is not possible, return None. Consider the following cases: 

Case 1: The description contains example values USA, CAN, ZWE: Output: ""PROVIDED: USA, CAN, ZWE +++ GENERATED: BRA, FRA, GER ...""
Case 2: The description does not explicitly mention example values: Output: ""PROVIDED: None +++ GENERATED: BRA, FRA, GER, USA ...""
Case 3: The description does not explicitly mention example values, and it is not possible to generate example values: Output: ""None""

Assume any ""
"" values in the input represent spaces or new lines. Do not output any ""
"" strings.

Here are some examples of inputs and expected outputs:
Input:'The country code associated with the country. Examples are CAD, USD, etc...'
Output:PROVIDED: CAD, USD +++ GENERATED: AFG, ALA, ALB, DZA, ASM, AND, AGO, AIA, ATA, ATG, ARG, ARM, ABW, AUS, AUT, AZE, BHS, BHR, BGD, BRB, BLR, BEL, 
BLZ, BEN, BMU, BTN, BOL, BES, BIH, BWA, BVT, BRA, IOT, BRN, BGR, BFA, BDI, CPV, KHM, CMR, CAN, CYM, CAF, TCD, 
CHL, CHN, CXR, CCK, COL, COM, COG, COD, COK, CRI, CIV, HRV, CUB, CUW, CYP, CZE, DNK, DJI, DMA, DOM, ECU, EGY, 
SLV, GNQ, ERI, EST, SWZ, ETH, FLK, FRO, FJI, FIN, FRA, GUF, PYF, ATF, GAB, GMB, GEO, DEU, GHA, GIB, GRC, GRL, 
GRD, GLP, GUM, GTM, GGY, GIN, GNB, GUY, HTI, HMD, VAT, HND, HKG, HUN, ISL, IND, IDN, IRN, IRQ, IRL, IMN, ISR, 
ITA, JAM, JPN, JEY, JOR, KAZ, KEN, KIR, PRK, KOR, KWT, KGZ, LAO, LVA, LBN, LSO, LBR, LBY, LIE, LTU, LUX, MAC, 
MDG, MWI, MYS, MDV, MLI, MLT, MHL, MTQ, MRT, MUS, MYT, MEX, FSM, MDA, MCO, MNG, MNE, MSR, MAR, MOZ, MMR, NAM, 
NRU, NPL, NLD, NCL, NZL, NIC, NER, NGA, NIU, NFK, MKD, MNP, NOR, OMN, PAK, PLW, PSE, PAN, PNG, PRY, PER, PHL, 
PCN, POL, PRT, PRI, QAT, REU, ROU, RUS, RWA, BLM, SHN, KNA, LCA, MAF, SPM, VCT, WSM, SMR, STP, SAU, SEN, SRB, 
SYC, SLE, SGP, SXM, SVK, SVN, SLB, SOM, ZAF, SGS, SSD, ESP, LKA, SDN, SUR, SJM, SWE, CHE, SYR, TWN, TJK, TZA, 
THA, TLS, TGO, TKL, TON, TTO, TUN, TUR, TKM, TCA, TUV, UGA, UKR, ARE, GBR, USA, UMI, URY, UZB, VUT, VEN, VNM, 
VGB, VIR, WLF, ESH, YEM, ZMB, ZWE
Input:'The numbers for the percent grades must be to one decimal place (such as 10.6).'
Output:PROVIDED: 10.6 +++ GENERATED: 0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0, 2.1, 
2.2, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8, 2.9, 3.0, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6, 3.7, 3.8, 3.9, 4.0, 4.1, 4.2, 4.3, 4.4, 
4.5, 4.6, 4.7, 4.8, 4.9, 5.0, 5.1, 5.2, 5.3, 10.0, 99.9, 100.0
Input:'The title of the book to be rated.'
Output:PROVIDED: None +++ GENERATED: To Kill a Mockingbird, 1984, Pride and Prejudice, The Great Gatsby, Moby-Dick, The Catcher in the Rye, Harry Potter 
and the Sorcerer's Stone, The Lord of the Rings, One Hundred Years of Solitude, Brave New World, Sapiens: A Brief 
History of Humankind, The Immortal Life of Henrietta Lacks, Thinking, Fast and Slow, The Wright Brothers, The Diary of 
a Young Girl, Educated, The Art of War, The 7 Habits of Highly Effective People, Freakonomics, Quiet: The Power of 
Introverts in a World That Can't Stop Talking, Dune, Ender's Game, Neuromancer
Input:'The value for the number of products to consume. It must be greater than 12 and less than 50.'
Output:PROVIDED: None +++ GENERATED: None
Input:'The number of bank accounts associated. Cannot be less than 0.'
Output:PROVIDED: None +++ GENERATED: None
Input:A comma-separated list of [Spotify URIs](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) to set, can be track or episode URIs. For example: `uris=spotify:track:4iV5W9uYEdYUVa79Axb7Rh,spotify:track:1301WleyT98MSxVHPZCA6M,spotify:episode:512ojhOuo1ktJprKbVcKyQ`
A maximum of 100 items can be set in one request.
Output:",None
uris,0.2,256,"
Analyze the provided API parameter description and first estimate the parameter type. Then, according to the type, apply the following to determine restrictions on the parameter input:
If it is a number, determine if the description mentions minimum, maximum, or default possible values and output: ""min [minimum], max [maximum], default [default]"". 
If it's a string, word, or code, determine if the description mentions minimum or maximum possible character amounts or a default value, and output: ""minLength [minimum], maxLength [maximum], default [default]"". 
If it's an array or list, determine if the description mentions minimum or maximum possible list lengths or a default value, and output: ""minItems [minimum], maxItems [maximum], default [default]"".
If it's an object, determine if the description mentions minimum or maximum possible numbers of object properties or a default value, and output: ""minProperties [minimum], maxProperties [maximum], default [default]"".
If it is any other data type where there is a default value provided, output: ""min None, max None, default [default]"".
If you are unable to determine any minimum, maximum, or default restrictions, output ""None"". If you are able to determine only one either the minimum or maximum, output the undetermined value as ""None"".

Assume any ""
"" values in the input indicate either new lines or spaces. 

Here are some examples of inputs and expected outputs:

Input:'An idea for a project. This and 'rating' are required.'
Output:None
Input:'The maximum value is 50. If nothing is put in, default to 0.'
Output:min None, max 50, default 0
Input:'The timer counter. The value must be between 15.0 and 120.'
Output:min 15.0, max 120, default None
Input:'The input range. The smallest value possible is -120.8. The largest should be 179.652.'
Output:min -120.8, max 179.652, default None
Input:'The number of items to be investigated. The maximum is 9,999.99'
Output:min None, max 9999.99, default None
Input:'The name of the movie. The movie name cannot be shorter than 10 characters and longer than 20 characters.'
Output:minLength 10, maxLength 20, default None
Input:'The country code which can be 1-letter, 2-letter, or 3-letter.'
Output:minLength 1, maxLength 3, default None
Input:'A supplied language code that can either be 2-letter or 3-letter which is used to parse through a list of common phrases.'
Output:minLength 2, maxLength 3, default None
Input:'Search via county areas.'
Output:None
Input:'Identifies synonyms through word inputs.'
Output:None
Input:'After searching through a list of ISO country codes, input 2-letter or 3-letter codes to find their data.'
Output:minLength 2, maxLength 3, default None
Input:A comma-separated list of [Spotify URIs](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) to set, can be track or episode URIs. For example: `uris=spotify:track:4iV5W9uYEdYUVa79Axb7Rh,spotify:track:1301WleyT98MSxVHPZCA6M,spotify:episode:512ojhOuo1ktJprKbVcKyQ`
A maximum of 100 items can be set in one request.
Output:","minItems None, maxItems 100, default None"
uris,0.2,256,"
Analyze the provided API parameter description and determine whether it clearly identifies the parameter's data type 
or formatting. 
The list of possible data types are as follows: string, number, integer, boolean, array, and object.
The list of format options are as follows: time, date, password, byte, binary, email, uuid, uri, url, hostname, ipv4, and ipv6. Use the types and formats available for the OpenAPI Specification. 
A list of collectionFormat types are as follows: csv, ssv, and pipes.
If the data type is an array, attempt to identify its item type. 
Output the answer as follows: ""type [type], items [item type], format [format], collectionFormat [collectionFormat]"". Output None when unable to determine any of the categories. 
For example, only output a non-None ""item type"" if the ""type"" is array.

Assume any ""
"" values in the input indicate either new lines or spaces. 

Here are some examples of inputs and expected outputs:

Input:'A space-separated list of percent grades corresponding to the student.'
Output:type array, items number, format None, collectionFormat ssv
Input:'This should contain the email of the sender.'
Output:type string, items None, format email, collectionFormat None
Input:'This value should be true if the assignment is available for regrade.'
Output:type boolean, items None, format None, collectionFormat None
Input:'A URL containing the website for evaluation.'
Output:type string, items None, format url, collectionFormat None
Input:'The date of the contest. The date must be within the last three months.'
Output:type string, items None, format date, collectionFormat None
Input:'The time that the project must be completed. Use Eastern Standard Timezone (EST).'
Output:type string, items None, format date-time, collectionFormat None
Input:'A list of region codes.'
Output:type array, items None, format None, collectionFormat None
Input:A comma-separated list of [Spotify URIs](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) to set, can be track or episode URIs. For example: `uris=spotify:track:4iV5W9uYEdYUVa79Axb7Rh,spotify:track:1301WleyT98MSxVHPZCA6M,spotify:episode:512ojhOuo1ktJprKbVcKyQ`
A maximum of 100 items can be set in one request.
Output:",None
uris,0.2,256,"
Identify the API parameter object by the grouping of its ""name"" and ""description"". Analyze the parameter description and extract logical constraints
in the provided format. Evaluate each case and determine whether it is applicable. Strictly follow the format and make no inferences. Only consider constraints
that are strictly required. Interpret the description in the least constraining manner, and assume Case 1 unless the other cases are obvious:

Case 1: The description isn't definitive about parameter requirements. Output ""None"".
Case 2: The description states the parameter ""name"" is required. Output: ""REQUIRED: name"". 
Case 3: The description states that parameter ""name"" or another parameter ""name"" is required. Output: ""Or(name, name)""
Case 4: The description states that given a set of parameters name, name_2, . . . , name_n, zero or one can be present in the API call: Output: ""ZeroOrOne(name, name_2, ... name_n)""
Case 5: The description states that given a set of parameters name, name_2, . . . , name_n, exactly one must be present in the API call: Output: ""OnlyOne(name, name_2, ... name_n)""
Case 6: The description states that given a set of parameters name, name_2, . . . , name_n, all of them or none must be present in the API call: Output: ""AllOrNone(name, name_2, ... name_n)""
Case 7: The description states that there is a relational relationship between some parameters: Output: ""name >= name_2"", where the standard relational operators can be used
Case 8: The description states that there is an arithmetic relationship between the value of parameters: Output: ""name_1 + name_2 <= value"", where the standard arithmetic operators can be used
Case 9: The description states there is a conditional relationship between parameters: Output: ""IF name THEN name_2"", where the standard logical operators can be used
Case 10: The description states that there exists a complex relationship between parameters, you can combine rules from the grammar to express a statement: Output: ""IF name==value THEN OnlyOne(name_2 AND name_3, name_4 AND name_5);

The grammar for statements is succinctly defined as follows:

Model:
    Dependency*;
Dependency:
    RelationalDependency | ArithmeticDependency |
    ConditionalDependency | PredefinedDependency;
RelationalDependency:
    Param RelationalOperator Param;
ArithmeticDependency:
    Operation RelationalOperator DOUBLE;
Operation:
    Param OperationContinuation |
    '(' Operation ')' OperationContinuation?;
OperationContinuation:
    ArithmeticOperator (Param | Operation);
ConditionalDependency:
    'IF' Predicate 'THEN' Predicate;
Predicate:
    Clause ClauseContinuation?;
Clause:
    (Term | RelationalDependency | ArithmeticDependency
    | PredefinedDependency) | 'NOT'? '(' Predicate ')';
Term:
    'NOT'? (Param | ParamValueRelation);
Param:
    ID | '[' ID ']';
ParamValueRelation:
    Param '==' STRING('|'STRING)* |
    Param 'LIKE' PATTERN_STRING | Param '==' BOOLEAN |
    Param RelationalOperator DOUBLE;
ClauseContinuation:
    ('AND' | 'OR') Predicate;
PredefinedDependency:
    'NOT'? ('Or' | 'OnlyOne' | 'AllOrNone' |
    'ZeroOrOne') '(' Clause (',' Clause)+ ')';
RelationalOperator:
    '<' | '>' | '<=' | '>=' | '==' | '!=';
ArithmeticOperator:
    '+' | '-' | '*' | '/';

If there are multiple dependency statements, return each one on a new line. Do not include any other text. Do not create dependencies on expected API responses.
Assume any ""
"" values in the input indicate either new lines or spaces. 
Here are some examples of expected outputs:

Input:
name: text 
description: The text to be checked. This or 'data' is required.
Output:Or(text, data);
Input: 
     name: idea
     description: 'An idea for a project. This and 'rating' are required.'
Output:OnlyOne(idea AND rating);
Input:
      name: partID
      description: 'The ID of the part. If partModel is specified partID must be specified'
Output:IF partModel THEN partID;
Input:
       name: language 
       description: The language of the client, not required if the country-code is USA or CAN.
Output:IF country-code!='USA' OR country-code=='CAN' THEN language;
Input:
        name: cost
        description: The cost of the product, this - profit must be greater than 500.
Output:cost - profit > 500;
Input:A comma-separated list of [Spotify URIs](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) to set, can be track or episode URIs. For example: `uris=spotify:track:4iV5W9uYEdYUVa79Axb7Rh,spotify:track:1301WleyT98MSxVHPZCA6M,spotify:episode:512ojhOuo1ktJprKbVcKyQ`
A maximum of 100 items can be set in one request.
Output:",None
insert_before,0.2,256,"
Analyze the provided API parameter description, and extract any example values for the parameter mentioned in the description. 
Then, generate a few additional example values that correspond to, or are in the same category as the provided values.
If there are no example values provided, simply generate values corresponding to the description, and always generate values when possible.  
If generating example values is not possible, return None. Consider the following cases: 

Case 1: The description contains example values USA, CAN, ZWE: Output: ""PROVIDED: USA, CAN, ZWE +++ GENERATED: BRA, FRA, GER ...""
Case 2: The description does not explicitly mention example values: Output: ""PROVIDED: None +++ GENERATED: BRA, FRA, GER, USA ...""
Case 3: The description does not explicitly mention example values, and it is not possible to generate example values: Output: ""None""

Assume any ""
"" values in the input represent spaces or new lines. Do not output any ""
"" strings.

Here are some examples of inputs and expected outputs:
Input:'The country code associated with the country. Examples are CAD, USD, etc...'
Output:PROVIDED: CAD, USD +++ GENERATED: AFG, ALA, ALB, DZA, ASM, AND, AGO, AIA, ATA, ATG, ARG, ARM, ABW, AUS, AUT, AZE, BHS, BHR, BGD, BRB, BLR, BEL, 
BLZ, BEN, BMU, BTN, BOL, BES, BIH, BWA, BVT, BRA, IOT, BRN, BGR, BFA, BDI, CPV, KHM, CMR, CAN, CYM, CAF, TCD, 
CHL, CHN, CXR, CCK, COL, COM, COG, COD, COK, CRI, CIV, HRV, CUB, CUW, CYP, CZE, DNK, DJI, DMA, DOM, ECU, EGY, 
SLV, GNQ, ERI, EST, SWZ, ETH, FLK, FRO, FJI, FIN, FRA, GUF, PYF, ATF, GAB, GMB, GEO, DEU, GHA, GIB, GRC, GRL, 
GRD, GLP, GUM, GTM, GGY, GIN, GNB, GUY, HTI, HMD, VAT, HND, HKG, HUN, ISL, IND, IDN, IRN, IRQ, IRL, IMN, ISR, 
ITA, JAM, JPN, JEY, JOR, KAZ, KEN, KIR, PRK, KOR, KWT, KGZ, LAO, LVA, LBN, LSO, LBR, LBY, LIE, LTU, LUX, MAC, 
MDG, MWI, MYS, MDV, MLI, MLT, MHL, MTQ, MRT, MUS, MYT, MEX, FSM, MDA, MCO, MNG, MNE, MSR, MAR, MOZ, MMR, NAM, 
NRU, NPL, NLD, NCL, NZL, NIC, NER, NGA, NIU, NFK, MKD, MNP, NOR, OMN, PAK, PLW, PSE, PAN, PNG, PRY, PER, PHL, 
PCN, POL, PRT, PRI, QAT, REU, ROU, RUS, RWA, BLM, SHN, KNA, LCA, MAF, SPM, VCT, WSM, SMR, STP, SAU, SEN, SRB, 
SYC, SLE, SGP, SXM, SVK, SVN, SLB, SOM, ZAF, SGS, SSD, ESP, LKA, SDN, SUR, SJM, SWE, CHE, SYR, TWN, TJK, TZA, 
THA, TLS, TGO, TKL, TON, TTO, TUN, TUR, TKM, TCA, TUV, UGA, UKR, ARE, GBR, USA, UMI, URY, UZB, VUT, VEN, VNM, 
VGB, VIR, WLF, ESH, YEM, ZMB, ZWE
Input:'The numbers for the percent grades must be to one decimal place (such as 10.6).'
Output:PROVIDED: 10.6 +++ GENERATED: 0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0, 2.1, 
2.2, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8, 2.9, 3.0, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6, 3.7, 3.8, 3.9, 4.0, 4.1, 4.2, 4.3, 4.4, 
4.5, 4.6, 4.7, 4.8, 4.9, 5.0, 5.1, 5.2, 5.3, 10.0, 99.9, 100.0
Input:'The title of the book to be rated.'
Output:PROVIDED: None +++ GENERATED: To Kill a Mockingbird, 1984, Pride and Prejudice, The Great Gatsby, Moby-Dick, The Catcher in the Rye, Harry Potter 
and the Sorcerer's Stone, The Lord of the Rings, One Hundred Years of Solitude, Brave New World, Sapiens: A Brief 
History of Humankind, The Immortal Life of Henrietta Lacks, Thinking, Fast and Slow, The Wright Brothers, The Diary of 
a Young Girl, Educated, The Art of War, The 7 Habits of Highly Effective People, Freakonomics, Quiet: The Power of 
Introverts in a World That Can't Stop Talking, Dune, Ender's Game, Neuromancer
Input:'The value for the number of products to consume. It must be greater than 12 and less than 50.'
Output:PROVIDED: None +++ GENERATED: None
Input:'The number of bank accounts associated. Cannot be less than 0.'
Output:PROVIDED: None +++ GENERATED: None
Input:The position where the items should be inserted.
To reorder the items to the end of the playlist, simply set *insert_before* to the position after the last item.
Examples:
To reorder the first item to the last position in a playlist with 10 items, set *range_start* to 0, and *insert_before* to 10.
To reorder the last item in a playlist with 10 items to the start of the playlist, set *range_start* to 9, and *insert_before* to 0.
Output:",None
insert_before,0.2,256,"
Analyze the provided API parameter description and first estimate the parameter type. Then, according to the type, apply the following to determine restrictions on the parameter input:
If it is a number, determine if the description mentions minimum, maximum, or default possible values and output: ""min [minimum], max [maximum], default [default]"". 
If it's a string, word, or code, determine if the description mentions minimum or maximum possible character amounts or a default value, and output: ""minLength [minimum], maxLength [maximum], default [default]"". 
If it's an array or list, determine if the description mentions minimum or maximum possible list lengths or a default value, and output: ""minItems [minimum], maxItems [maximum], default [default]"".
If it's an object, determine if the description mentions minimum or maximum possible numbers of object properties or a default value, and output: ""minProperties [minimum], maxProperties [maximum], default [default]"".
If it is any other data type where there is a default value provided, output: ""min None, max None, default [default]"".
If you are unable to determine any minimum, maximum, or default restrictions, output ""None"". If you are able to determine only one either the minimum or maximum, output the undetermined value as ""None"".

Assume any ""
"" values in the input indicate either new lines or spaces. 

Here are some examples of inputs and expected outputs:

Input:'An idea for a project. This and 'rating' are required.'
Output:None
Input:'The maximum value is 50. If nothing is put in, default to 0.'
Output:min None, max 50, default 0
Input:'The timer counter. The value must be between 15.0 and 120.'
Output:min 15.0, max 120, default None
Input:'The input range. The smallest value possible is -120.8. The largest should be 179.652.'
Output:min -120.8, max 179.652, default None
Input:'The number of items to be investigated. The maximum is 9,999.99'
Output:min None, max 9999.99, default None
Input:'The name of the movie. The movie name cannot be shorter than 10 characters and longer than 20 characters.'
Output:minLength 10, maxLength 20, default None
Input:'The country code which can be 1-letter, 2-letter, or 3-letter.'
Output:minLength 1, maxLength 3, default None
Input:'A supplied language code that can either be 2-letter or 3-letter which is used to parse through a list of common phrases.'
Output:minLength 2, maxLength 3, default None
Input:'Search via county areas.'
Output:None
Input:'Identifies synonyms through word inputs.'
Output:None
Input:'After searching through a list of ISO country codes, input 2-letter or 3-letter codes to find their data.'
Output:minLength 2, maxLength 3, default None
Input:The position where the items should be inserted.
To reorder the items to the end of the playlist, simply set *insert_before* to the position after the last item.
Examples:
To reorder the first item to the last position in a playlist with 10 items, set *range_start* to 0, and *insert_before* to 10.
To reorder the last item in a playlist with 10 items to the start of the playlist, set *range_start* to 9, and *insert_before* to 0.
Output:",None
insert_before,0.2,256,"
Analyze the provided API parameter description and determine whether it clearly identifies the parameter's data type 
or formatting. 
The list of possible data types are as follows: string, number, integer, boolean, array, and object.
The list of format options are as follows: time, date, password, byte, binary, email, uuid, uri, url, hostname, ipv4, and ipv6. Use the types and formats available for the OpenAPI Specification. 
A list of collectionFormat types are as follows: csv, ssv, and pipes.
If the data type is an array, attempt to identify its item type. 
Output the answer as follows: ""type [type], items [item type], format [format], collectionFormat [collectionFormat]"". Output None when unable to determine any of the categories. 
For example, only output a non-None ""item type"" if the ""type"" is array.

Assume any ""
"" values in the input indicate either new lines or spaces. 

Here are some examples of inputs and expected outputs:

Input:'A space-separated list of percent grades corresponding to the student.'
Output:type array, items number, format None, collectionFormat ssv
Input:'This should contain the email of the sender.'
Output:type string, items None, format email, collectionFormat None
Input:'This value should be true if the assignment is available for regrade.'
Output:type boolean, items None, format None, collectionFormat None
Input:'A URL containing the website for evaluation.'
Output:type string, items None, format url, collectionFormat None
Input:'The date of the contest. The date must be within the last three months.'
Output:type string, items None, format date, collectionFormat None
Input:'The time that the project must be completed. Use Eastern Standard Timezone (EST).'
Output:type string, items None, format date-time, collectionFormat None
Input:'A list of region codes.'
Output:type array, items None, format None, collectionFormat None
Input:The position where the items should be inserted.
To reorder the items to the end of the playlist, simply set *insert_before* to the position after the last item.
Examples:
To reorder the first item to the last position in a playlist with 10 items, set *range_start* to 0, and *insert_before* to 10.
To reorder the last item in a playlist with 10 items to the start of the playlist, set *range_start* to 9, and *insert_before* to 0.
Output:",None
insert_before,0.2,256,"
Identify the API parameter object by the grouping of its ""name"" and ""description"". Analyze the parameter description and extract logical constraints
in the provided format. Evaluate each case and determine whether it is applicable. Strictly follow the format and make no inferences. Only consider constraints
that are strictly required. Interpret the description in the least constraining manner, and assume Case 1 unless the other cases are obvious:

Case 1: The description isn't definitive about parameter requirements. Output ""None"".
Case 2: The description states the parameter ""name"" is required. Output: ""REQUIRED: name"". 
Case 3: The description states that parameter ""name"" or another parameter ""name"" is required. Output: ""Or(name, name)""
Case 4: The description states that given a set of parameters name, name_2, . . . , name_n, zero or one can be present in the API call: Output: ""ZeroOrOne(name, name_2, ... name_n)""
Case 5: The description states that given a set of parameters name, name_2, . . . , name_n, exactly one must be present in the API call: Output: ""OnlyOne(name, name_2, ... name_n)""
Case 6: The description states that given a set of parameters name, name_2, . . . , name_n, all of them or none must be present in the API call: Output: ""AllOrNone(name, name_2, ... name_n)""
Case 7: The description states that there is a relational relationship between some parameters: Output: ""name >= name_2"", where the standard relational operators can be used
Case 8: The description states that there is an arithmetic relationship between the value of parameters: Output: ""name_1 + name_2 <= value"", where the standard arithmetic operators can be used
Case 9: The description states there is a conditional relationship between parameters: Output: ""IF name THEN name_2"", where the standard logical operators can be used
Case 10: The description states that there exists a complex relationship between parameters, you can combine rules from the grammar to express a statement: Output: ""IF name==value THEN OnlyOne(name_2 AND name_3, name_4 AND name_5);

The grammar for statements is succinctly defined as follows:

Model:
    Dependency*;
Dependency:
    RelationalDependency | ArithmeticDependency |
    ConditionalDependency | PredefinedDependency;
RelationalDependency:
    Param RelationalOperator Param;
ArithmeticDependency:
    Operation RelationalOperator DOUBLE;
Operation:
    Param OperationContinuation |
    '(' Operation ')' OperationContinuation?;
OperationContinuation:
    ArithmeticOperator (Param | Operation);
ConditionalDependency:
    'IF' Predicate 'THEN' Predicate;
Predicate:
    Clause ClauseContinuation?;
Clause:
    (Term | RelationalDependency | ArithmeticDependency
    | PredefinedDependency) | 'NOT'? '(' Predicate ')';
Term:
    'NOT'? (Param | ParamValueRelation);
Param:
    ID | '[' ID ']';
ParamValueRelation:
    Param '==' STRING('|'STRING)* |
    Param 'LIKE' PATTERN_STRING | Param '==' BOOLEAN |
    Param RelationalOperator DOUBLE;
ClauseContinuation:
    ('AND' | 'OR') Predicate;
PredefinedDependency:
    'NOT'? ('Or' | 'OnlyOne' | 'AllOrNone' |
    'ZeroOrOne') '(' Clause (',' Clause)+ ')';
RelationalOperator:
    '<' | '>' | '<=' | '>=' | '==' | '!=';
ArithmeticOperator:
    '+' | '-' | '*' | '/';

If there are multiple dependency statements, return each one on a new line. Do not include any other text. Do not create dependencies on expected API responses.
Assume any ""
"" values in the input indicate either new lines or spaces. 
Here are some examples of expected outputs:

Input:
name: text 
description: The text to be checked. This or 'data' is required.
Output:Or(text, data);
Input: 
     name: idea
     description: 'An idea for a project. This and 'rating' are required.'
Output:OnlyOne(idea AND rating);
Input:
      name: partID
      description: 'The ID of the part. If partModel is specified partID must be specified'
Output:IF partModel THEN partID;
Input:
       name: language 
       description: The language of the client, not required if the country-code is USA or CAN.
Output:IF country-code!='USA' OR country-code=='CAN' THEN language;
Input:
        name: cost
        description: The cost of the product, this - profit must be greater than 500.
Output:cost - profit > 500;
Input:The position where the items should be inserted.
To reorder the items to the end of the playlist, simply set *insert_before* to the position after the last item.
Examples:
To reorder the first item to the last position in a playlist with 10 items, set *range_start* to 0, and *insert_before* to 10.
To reorder the last item in a playlist with 10 items to the start of the playlist, set *range_start* to 9, and *insert_before* to 0.
Output:",None
range_length,0.2,256,"
Analyze the provided API parameter description, and extract any example values for the parameter mentioned in the description. 
Then, generate a few additional example values that correspond to, or are in the same category as the provided values.
If there are no example values provided, simply generate values corresponding to the description, and always generate values when possible.  
If generating example values is not possible, return None. Consider the following cases: 

Case 1: The description contains example values USA, CAN, ZWE: Output: ""PROVIDED: USA, CAN, ZWE +++ GENERATED: BRA, FRA, GER ...""
Case 2: The description does not explicitly mention example values: Output: ""PROVIDED: None +++ GENERATED: BRA, FRA, GER, USA ...""
Case 3: The description does not explicitly mention example values, and it is not possible to generate example values: Output: ""None""

Assume any ""
"" values in the input represent spaces or new lines. Do not output any ""
"" strings.

Here are some examples of inputs and expected outputs:
Input:'The country code associated with the country. Examples are CAD, USD, etc...'
Output:PROVIDED: CAD, USD +++ GENERATED: AFG, ALA, ALB, DZA, ASM, AND, AGO, AIA, ATA, ATG, ARG, ARM, ABW, AUS, AUT, AZE, BHS, BHR, BGD, BRB, BLR, BEL, 
BLZ, BEN, BMU, BTN, BOL, BES, BIH, BWA, BVT, BRA, IOT, BRN, BGR, BFA, BDI, CPV, KHM, CMR, CAN, CYM, CAF, TCD, 
CHL, CHN, CXR, CCK, COL, COM, COG, COD, COK, CRI, CIV, HRV, CUB, CUW, CYP, CZE, DNK, DJI, DMA, DOM, ECU, EGY, 
SLV, GNQ, ERI, EST, SWZ, ETH, FLK, FRO, FJI, FIN, FRA, GUF, PYF, ATF, GAB, GMB, GEO, DEU, GHA, GIB, GRC, GRL, 
GRD, GLP, GUM, GTM, GGY, GIN, GNB, GUY, HTI, HMD, VAT, HND, HKG, HUN, ISL, IND, IDN, IRN, IRQ, IRL, IMN, ISR, 
ITA, JAM, JPN, JEY, JOR, KAZ, KEN, KIR, PRK, KOR, KWT, KGZ, LAO, LVA, LBN, LSO, LBR, LBY, LIE, LTU, LUX, MAC, 
MDG, MWI, MYS, MDV, MLI, MLT, MHL, MTQ, MRT, MUS, MYT, MEX, FSM, MDA, MCO, MNG, MNE, MSR, MAR, MOZ, MMR, NAM, 
NRU, NPL, NLD, NCL, NZL, NIC, NER, NGA, NIU, NFK, MKD, MNP, NOR, OMN, PAK, PLW, PSE, PAN, PNG, PRY, PER, PHL, 
PCN, POL, PRT, PRI, QAT, REU, ROU, RUS, RWA, BLM, SHN, KNA, LCA, MAF, SPM, VCT, WSM, SMR, STP, SAU, SEN, SRB, 
SYC, SLE, SGP, SXM, SVK, SVN, SLB, SOM, ZAF, SGS, SSD, ESP, LKA, SDN, SUR, SJM, SWE, CHE, SYR, TWN, TJK, TZA, 
THA, TLS, TGO, TKL, TON, TTO, TUN, TUR, TKM, TCA, TUV, UGA, UKR, ARE, GBR, USA, UMI, URY, UZB, VUT, VEN, VNM, 
VGB, VIR, WLF, ESH, YEM, ZMB, ZWE
Input:'The numbers for the percent grades must be to one decimal place (such as 10.6).'
Output:PROVIDED: 10.6 +++ GENERATED: 0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0, 2.1, 
2.2, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8, 2.9, 3.0, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6, 3.7, 3.8, 3.9, 4.0, 4.1, 4.2, 4.3, 4.4, 
4.5, 4.6, 4.7, 4.8, 4.9, 5.0, 5.1, 5.2, 5.3, 10.0, 99.9, 100.0
Input:'The title of the book to be rated.'
Output:PROVIDED: None +++ GENERATED: To Kill a Mockingbird, 1984, Pride and Prejudice, The Great Gatsby, Moby-Dick, The Catcher in the Rye, Harry Potter 
and the Sorcerer's Stone, The Lord of the Rings, One Hundred Years of Solitude, Brave New World, Sapiens: A Brief 
History of Humankind, The Immortal Life of Henrietta Lacks, Thinking, Fast and Slow, The Wright Brothers, The Diary of 
a Young Girl, Educated, The Art of War, The 7 Habits of Highly Effective People, Freakonomics, Quiet: The Power of 
Introverts in a World That Can't Stop Talking, Dune, Ender's Game, Neuromancer
Input:'The value for the number of products to consume. It must be greater than 12 and less than 50.'
Output:PROVIDED: None +++ GENERATED: None
Input:'The number of bank accounts associated. Cannot be less than 0.'
Output:PROVIDED: None +++ GENERATED: None
Input:The amount of items to be reordered. Defaults to 1 if not set.
The range of items to be reordered begins from the *range_start* position, and includes the *range_length* subsequent items.
Example:
To move the items at index 9-10 to the start of the playlist, *range_start* is set to 9, and *range_length* is set to 2.
Output:",None
range_length,0.2,256,"
Analyze the provided API parameter description and first estimate the parameter type. Then, according to the type, apply the following to determine restrictions on the parameter input:
If it is a number, determine if the description mentions minimum, maximum, or default possible values and output: ""min [minimum], max [maximum], default [default]"". 
If it's a string, word, or code, determine if the description mentions minimum or maximum possible character amounts or a default value, and output: ""minLength [minimum], maxLength [maximum], default [default]"". 
If it's an array or list, determine if the description mentions minimum or maximum possible list lengths or a default value, and output: ""minItems [minimum], maxItems [maximum], default [default]"".
If it's an object, determine if the description mentions minimum or maximum possible numbers of object properties or a default value, and output: ""minProperties [minimum], maxProperties [maximum], default [default]"".
If it is any other data type where there is a default value provided, output: ""min None, max None, default [default]"".
If you are unable to determine any minimum, maximum, or default restrictions, output ""None"". If you are able to determine only one either the minimum or maximum, output the undetermined value as ""None"".

Assume any ""
"" values in the input indicate either new lines or spaces. 

Here are some examples of inputs and expected outputs:

Input:'An idea for a project. This and 'rating' are required.'
Output:None
Input:'The maximum value is 50. If nothing is put in, default to 0.'
Output:min None, max 50, default 0
Input:'The timer counter. The value must be between 15.0 and 120.'
Output:min 15.0, max 120, default None
Input:'The input range. The smallest value possible is -120.8. The largest should be 179.652.'
Output:min -120.8, max 179.652, default None
Input:'The number of items to be investigated. The maximum is 9,999.99'
Output:min None, max 9999.99, default None
Input:'The name of the movie. The movie name cannot be shorter than 10 characters and longer than 20 characters.'
Output:minLength 10, maxLength 20, default None
Input:'The country code which can be 1-letter, 2-letter, or 3-letter.'
Output:minLength 1, maxLength 3, default None
Input:'A supplied language code that can either be 2-letter or 3-letter which is used to parse through a list of common phrases.'
Output:minLength 2, maxLength 3, default None
Input:'Search via county areas.'
Output:None
Input:'Identifies synonyms through word inputs.'
Output:None
Input:'After searching through a list of ISO country codes, input 2-letter or 3-letter codes to find their data.'
Output:minLength 2, maxLength 3, default None
Input:The amount of items to be reordered. Defaults to 1 if not set.
The range of items to be reordered begins from the *range_start* position, and includes the *range_length* subsequent items.
Example:
To move the items at index 9-10 to the start of the playlist, *range_start* is set to 9, and *range_length* is set to 2.
Output:","min None, max None, default 1"
range_length,0.2,256,"
Analyze the provided API parameter description and determine whether it clearly identifies the parameter's data type 
or formatting. 
The list of possible data types are as follows: string, number, integer, boolean, array, and object.
The list of format options are as follows: time, date, password, byte, binary, email, uuid, uri, url, hostname, ipv4, and ipv6. Use the types and formats available for the OpenAPI Specification. 
A list of collectionFormat types are as follows: csv, ssv, and pipes.
If the data type is an array, attempt to identify its item type. 
Output the answer as follows: ""type [type], items [item type], format [format], collectionFormat [collectionFormat]"". Output None when unable to determine any of the categories. 
For example, only output a non-None ""item type"" if the ""type"" is array.

Assume any ""
"" values in the input indicate either new lines or spaces. 

Here are some examples of inputs and expected outputs:

Input:'A space-separated list of percent grades corresponding to the student.'
Output:type array, items number, format None, collectionFormat ssv
Input:'This should contain the email of the sender.'
Output:type string, items None, format email, collectionFormat None
Input:'This value should be true if the assignment is available for regrade.'
Output:type boolean, items None, format None, collectionFormat None
Input:'A URL containing the website for evaluation.'
Output:type string, items None, format url, collectionFormat None
Input:'The date of the contest. The date must be within the last three months.'
Output:type string, items None, format date, collectionFormat None
Input:'The time that the project must be completed. Use Eastern Standard Timezone (EST).'
Output:type string, items None, format date-time, collectionFormat None
Input:'A list of region codes.'
Output:type array, items None, format None, collectionFormat None
Input:The amount of items to be reordered. Defaults to 1 if not set.
The range of items to be reordered begins from the *range_start* position, and includes the *range_length* subsequent items.
Example:
To move the items at index 9-10 to the start of the playlist, *range_start* is set to 9, and *range_length* is set to 2.
Output:",None
range_length,0.2,256,"
Identify the API parameter object by the grouping of its ""name"" and ""description"". Analyze the parameter description and extract logical constraints
in the provided format. Evaluate each case and determine whether it is applicable. Strictly follow the format and make no inferences. Only consider constraints
that are strictly required. Interpret the description in the least constraining manner, and assume Case 1 unless the other cases are obvious:

Case 1: The description isn't definitive about parameter requirements. Output ""None"".
Case 2: The description states the parameter ""name"" is required. Output: ""REQUIRED: name"". 
Case 3: The description states that parameter ""name"" or another parameter ""name"" is required. Output: ""Or(name, name)""
Case 4: The description states that given a set of parameters name, name_2, . . . , name_n, zero or one can be present in the API call: Output: ""ZeroOrOne(name, name_2, ... name_n)""
Case 5: The description states that given a set of parameters name, name_2, . . . , name_n, exactly one must be present in the API call: Output: ""OnlyOne(name, name_2, ... name_n)""
Case 6: The description states that given a set of parameters name, name_2, . . . , name_n, all of them or none must be present in the API call: Output: ""AllOrNone(name, name_2, ... name_n)""
Case 7: The description states that there is a relational relationship between some parameters: Output: ""name >= name_2"", where the standard relational operators can be used
Case 8: The description states that there is an arithmetic relationship between the value of parameters: Output: ""name_1 + name_2 <= value"", where the standard arithmetic operators can be used
Case 9: The description states there is a conditional relationship between parameters: Output: ""IF name THEN name_2"", where the standard logical operators can be used
Case 10: The description states that there exists a complex relationship between parameters, you can combine rules from the grammar to express a statement: Output: ""IF name==value THEN OnlyOne(name_2 AND name_3, name_4 AND name_5);

The grammar for statements is succinctly defined as follows:

Model:
    Dependency*;
Dependency:
    RelationalDependency | ArithmeticDependency |
    ConditionalDependency | PredefinedDependency;
RelationalDependency:
    Param RelationalOperator Param;
ArithmeticDependency:
    Operation RelationalOperator DOUBLE;
Operation:
    Param OperationContinuation |
    '(' Operation ')' OperationContinuation?;
OperationContinuation:
    ArithmeticOperator (Param | Operation);
ConditionalDependency:
    'IF' Predicate 'THEN' Predicate;
Predicate:
    Clause ClauseContinuation?;
Clause:
    (Term | RelationalDependency | ArithmeticDependency
    | PredefinedDependency) | 'NOT'? '(' Predicate ')';
Term:
    'NOT'? (Param | ParamValueRelation);
Param:
    ID | '[' ID ']';
ParamValueRelation:
    Param '==' STRING('|'STRING)* |
    Param 'LIKE' PATTERN_STRING | Param '==' BOOLEAN |
    Param RelationalOperator DOUBLE;
ClauseContinuation:
    ('AND' | 'OR') Predicate;
PredefinedDependency:
    'NOT'? ('Or' | 'OnlyOne' | 'AllOrNone' |
    'ZeroOrOne') '(' Clause (',' Clause)+ ')';
RelationalOperator:
    '<' | '>' | '<=' | '>=' | '==' | '!=';
ArithmeticOperator:
    '+' | '-' | '*' | '/';

If there are multiple dependency statements, return each one on a new line. Do not include any other text. Do not create dependencies on expected API responses.
Assume any ""
"" values in the input indicate either new lines or spaces. 
Here are some examples of expected outputs:

Input:
name: text 
description: The text to be checked. This or 'data' is required.
Output:Or(text, data);
Input: 
     name: idea
     description: 'An idea for a project. This and 'rating' are required.'
Output:OnlyOne(idea AND rating);
Input:
      name: partID
      description: 'The ID of the part. If partModel is specified partID must be specified'
Output:IF partModel THEN partID;
Input:
       name: language 
       description: The language of the client, not required if the country-code is USA or CAN.
Output:IF country-code!='USA' OR country-code=='CAN' THEN language;
Input:
        name: cost
        description: The cost of the product, this - profit must be greater than 500.
Output:cost - profit > 500;
Input:The amount of items to be reordered. Defaults to 1 if not set.
The range of items to be reordered begins from the *range_start* position, and includes the *range_length* subsequent items.
Example:
To move the items at index 9-10 to the start of the playlist, *range_start* is set to 9, and *range_length* is set to 2.
Output:",None
range_start,0.2,256,"
Analyze the provided API parameter description, and extract any example values for the parameter mentioned in the description. 
Then, generate a few additional example values that correspond to, or are in the same category as the provided values.
If there are no example values provided, simply generate values corresponding to the description, and always generate values when possible.  
If generating example values is not possible, return None. Consider the following cases: 

Case 1: The description contains example values USA, CAN, ZWE: Output: ""PROVIDED: USA, CAN, ZWE +++ GENERATED: BRA, FRA, GER ...""
Case 2: The description does not explicitly mention example values: Output: ""PROVIDED: None +++ GENERATED: BRA, FRA, GER, USA ...""
Case 3: The description does not explicitly mention example values, and it is not possible to generate example values: Output: ""None""

Assume any ""
"" values in the input represent spaces or new lines. Do not output any ""
"" strings.

Here are some examples of inputs and expected outputs:
Input:'The country code associated with the country. Examples are CAD, USD, etc...'
Output:PROVIDED: CAD, USD +++ GENERATED: AFG, ALA, ALB, DZA, ASM, AND, AGO, AIA, ATA, ATG, ARG, ARM, ABW, AUS, AUT, AZE, BHS, BHR, BGD, BRB, BLR, BEL, 
BLZ, BEN, BMU, BTN, BOL, BES, BIH, BWA, BVT, BRA, IOT, BRN, BGR, BFA, BDI, CPV, KHM, CMR, CAN, CYM, CAF, TCD, 
CHL, CHN, CXR, CCK, COL, COM, COG, COD, COK, CRI, CIV, HRV, CUB, CUW, CYP, CZE, DNK, DJI, DMA, DOM, ECU, EGY, 
SLV, GNQ, ERI, EST, SWZ, ETH, FLK, FRO, FJI, FIN, FRA, GUF, PYF, ATF, GAB, GMB, GEO, DEU, GHA, GIB, GRC, GRL, 
GRD, GLP, GUM, GTM, GGY, GIN, GNB, GUY, HTI, HMD, VAT, HND, HKG, HUN, ISL, IND, IDN, IRN, IRQ, IRL, IMN, ISR, 
ITA, JAM, JPN, JEY, JOR, KAZ, KEN, KIR, PRK, KOR, KWT, KGZ, LAO, LVA, LBN, LSO, LBR, LBY, LIE, LTU, LUX, MAC, 
MDG, MWI, MYS, MDV, MLI, MLT, MHL, MTQ, MRT, MUS, MYT, MEX, FSM, MDA, MCO, MNG, MNE, MSR, MAR, MOZ, MMR, NAM, 
NRU, NPL, NLD, NCL, NZL, NIC, NER, NGA, NIU, NFK, MKD, MNP, NOR, OMN, PAK, PLW, PSE, PAN, PNG, PRY, PER, PHL, 
PCN, POL, PRT, PRI, QAT, REU, ROU, RUS, RWA, BLM, SHN, KNA, LCA, MAF, SPM, VCT, WSM, SMR, STP, SAU, SEN, SRB, 
SYC, SLE, SGP, SXM, SVK, SVN, SLB, SOM, ZAF, SGS, SSD, ESP, LKA, SDN, SUR, SJM, SWE, CHE, SYR, TWN, TJK, TZA, 
THA, TLS, TGO, TKL, TON, TTO, TUN, TUR, TKM, TCA, TUV, UGA, UKR, ARE, GBR, USA, UMI, URY, UZB, VUT, VEN, VNM, 
VGB, VIR, WLF, ESH, YEM, ZMB, ZWE
Input:'The numbers for the percent grades must be to one decimal place (such as 10.6).'
Output:PROVIDED: 10.6 +++ GENERATED: 0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0, 2.1, 
2.2, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8, 2.9, 3.0, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6, 3.7, 3.8, 3.9, 4.0, 4.1, 4.2, 4.3, 4.4, 
4.5, 4.6, 4.7, 4.8, 4.9, 5.0, 5.1, 5.2, 5.3, 10.0, 99.9, 100.0
Input:'The title of the book to be rated.'
Output:PROVIDED: None +++ GENERATED: To Kill a Mockingbird, 1984, Pride and Prejudice, The Great Gatsby, Moby-Dick, The Catcher in the Rye, Harry Potter 
and the Sorcerer's Stone, The Lord of the Rings, One Hundred Years of Solitude, Brave New World, Sapiens: A Brief 
History of Humankind, The Immortal Life of Henrietta Lacks, Thinking, Fast and Slow, The Wright Brothers, The Diary of 
a Young Girl, Educated, The Art of War, The 7 Habits of Highly Effective People, Freakonomics, Quiet: The Power of 
Introverts in a World That Can't Stop Talking, Dune, Ender's Game, Neuromancer
Input:'The value for the number of products to consume. It must be greater than 12 and less than 50.'
Output:PROVIDED: None +++ GENERATED: None
Input:'The number of bank accounts associated. Cannot be less than 0.'
Output:PROVIDED: None +++ GENERATED: None
Input:The position of the first item to be reordered.
Output:",None
range_start,0.2,256,"
Analyze the provided API parameter description and first estimate the parameter type. Then, according to the type, apply the following to determine restrictions on the parameter input:
If it is a number, determine if the description mentions minimum, maximum, or default possible values and output: ""min [minimum], max [maximum], default [default]"". 
If it's a string, word, or code, determine if the description mentions minimum or maximum possible character amounts or a default value, and output: ""minLength [minimum], maxLength [maximum], default [default]"". 
If it's an array or list, determine if the description mentions minimum or maximum possible list lengths or a default value, and output: ""minItems [minimum], maxItems [maximum], default [default]"".
If it's an object, determine if the description mentions minimum or maximum possible numbers of object properties or a default value, and output: ""minProperties [minimum], maxProperties [maximum], default [default]"".
If it is any other data type where there is a default value provided, output: ""min None, max None, default [default]"".
If you are unable to determine any minimum, maximum, or default restrictions, output ""None"". If you are able to determine only one either the minimum or maximum, output the undetermined value as ""None"".

Assume any ""
"" values in the input indicate either new lines or spaces. 

Here are some examples of inputs and expected outputs:

Input:'An idea for a project. This and 'rating' are required.'
Output:None
Input:'The maximum value is 50. If nothing is put in, default to 0.'
Output:min None, max 50, default 0
Input:'The timer counter. The value must be between 15.0 and 120.'
Output:min 15.0, max 120, default None
Input:'The input range. The smallest value possible is -120.8. The largest should be 179.652.'
Output:min -120.8, max 179.652, default None
Input:'The number of items to be investigated. The maximum is 9,999.99'
Output:min None, max 9999.99, default None
Input:'The name of the movie. The movie name cannot be shorter than 10 characters and longer than 20 characters.'
Output:minLength 10, maxLength 20, default None
Input:'The country code which can be 1-letter, 2-letter, or 3-letter.'
Output:minLength 1, maxLength 3, default None
Input:'A supplied language code that can either be 2-letter or 3-letter which is used to parse through a list of common phrases.'
Output:minLength 2, maxLength 3, default None
Input:'Search via county areas.'
Output:None
Input:'Identifies synonyms through word inputs.'
Output:None
Input:'After searching through a list of ISO country codes, input 2-letter or 3-letter codes to find their data.'
Output:minLength 2, maxLength 3, default None
Input:The position of the first item to be reordered.
Output:",None
range_start,0.2,256,"
Analyze the provided API parameter description and determine whether it clearly identifies the parameter's data type 
or formatting. 
The list of possible data types are as follows: string, number, integer, boolean, array, and object.
The list of format options are as follows: time, date, password, byte, binary, email, uuid, uri, url, hostname, ipv4, and ipv6. Use the types and formats available for the OpenAPI Specification. 
A list of collectionFormat types are as follows: csv, ssv, and pipes.
If the data type is an array, attempt to identify its item type. 
Output the answer as follows: ""type [type], items [item type], format [format], collectionFormat [collectionFormat]"". Output None when unable to determine any of the categories. 
For example, only output a non-None ""item type"" if the ""type"" is array.

Assume any ""
"" values in the input indicate either new lines or spaces. 

Here are some examples of inputs and expected outputs:

Input:'A space-separated list of percent grades corresponding to the student.'
Output:type array, items number, format None, collectionFormat ssv
Input:'This should contain the email of the sender.'
Output:type string, items None, format email, collectionFormat None
Input:'This value should be true if the assignment is available for regrade.'
Output:type boolean, items None, format None, collectionFormat None
Input:'A URL containing the website for evaluation.'
Output:type string, items None, format url, collectionFormat None
Input:'The date of the contest. The date must be within the last three months.'
Output:type string, items None, format date, collectionFormat None
Input:'The time that the project must be completed. Use Eastern Standard Timezone (EST).'
Output:type string, items None, format date-time, collectionFormat None
Input:'A list of region codes.'
Output:type array, items None, format None, collectionFormat None
Input:The position of the first item to be reordered.
Output:",None
range_start,0.2,256,"
Identify the API parameter object by the grouping of its ""name"" and ""description"". Analyze the parameter description and extract logical constraints
in the provided format. Evaluate each case and determine whether it is applicable. Strictly follow the format and make no inferences. Only consider constraints
that are strictly required. Interpret the description in the least constraining manner, and assume Case 1 unless the other cases are obvious:

Case 1: The description isn't definitive about parameter requirements. Output ""None"".
Case 2: The description states the parameter ""name"" is required. Output: ""REQUIRED: name"". 
Case 3: The description states that parameter ""name"" or another parameter ""name"" is required. Output: ""Or(name, name)""
Case 4: The description states that given a set of parameters name, name_2, . . . , name_n, zero or one can be present in the API call: Output: ""ZeroOrOne(name, name_2, ... name_n)""
Case 5: The description states that given a set of parameters name, name_2, . . . , name_n, exactly one must be present in the API call: Output: ""OnlyOne(name, name_2, ... name_n)""
Case 6: The description states that given a set of parameters name, name_2, . . . , name_n, all of them or none must be present in the API call: Output: ""AllOrNone(name, name_2, ... name_n)""
Case 7: The description states that there is a relational relationship between some parameters: Output: ""name >= name_2"", where the standard relational operators can be used
Case 8: The description states that there is an arithmetic relationship between the value of parameters: Output: ""name_1 + name_2 <= value"", where the standard arithmetic operators can be used
Case 9: The description states there is a conditional relationship between parameters: Output: ""IF name THEN name_2"", where the standard logical operators can be used
Case 10: The description states that there exists a complex relationship between parameters, you can combine rules from the grammar to express a statement: Output: ""IF name==value THEN OnlyOne(name_2 AND name_3, name_4 AND name_5);

The grammar for statements is succinctly defined as follows:

Model:
    Dependency*;
Dependency:
    RelationalDependency | ArithmeticDependency |
    ConditionalDependency | PredefinedDependency;
RelationalDependency:
    Param RelationalOperator Param;
ArithmeticDependency:
    Operation RelationalOperator DOUBLE;
Operation:
    Param OperationContinuation |
    '(' Operation ')' OperationContinuation?;
OperationContinuation:
    ArithmeticOperator (Param | Operation);
ConditionalDependency:
    'IF' Predicate 'THEN' Predicate;
Predicate:
    Clause ClauseContinuation?;
Clause:
    (Term | RelationalDependency | ArithmeticDependency
    | PredefinedDependency) | 'NOT'? '(' Predicate ')';
Term:
    'NOT'? (Param | ParamValueRelation);
Param:
    ID | '[' ID ']';
ParamValueRelation:
    Param '==' STRING('|'STRING)* |
    Param 'LIKE' PATTERN_STRING | Param '==' BOOLEAN |
    Param RelationalOperator DOUBLE;
ClauseContinuation:
    ('AND' | 'OR') Predicate;
PredefinedDependency:
    'NOT'? ('Or' | 'OnlyOne' | 'AllOrNone' |
    'ZeroOrOne') '(' Clause (',' Clause)+ ')';
RelationalOperator:
    '<' | '>' | '<=' | '>=' | '==' | '!=';
ArithmeticOperator:
    '+' | '-' | '*' | '/';

If there are multiple dependency statements, return each one on a new line. Do not include any other text. Do not create dependencies on expected API responses.
Assume any ""
"" values in the input indicate either new lines or spaces. 
Here are some examples of expected outputs:

Input:
name: text 
description: The text to be checked. This or 'data' is required.
Output:Or(text, data);
Input: 
     name: idea
     description: 'An idea for a project. This and 'rating' are required.'
Output:OnlyOne(idea AND rating);
Input:
      name: partID
      description: 'The ID of the part. If partModel is specified partID must be specified'
Output:IF partModel THEN partID;
Input:
       name: language 
       description: The language of the client, not required if the country-code is USA or CAN.
Output:IF country-code!='USA' OR country-code=='CAN' THEN language;
Input:
        name: cost
        description: The cost of the product, this - profit must be greater than 500.
Output:cost - profit > 500;
Input:The position of the first item to be reordered.
Output:",None
snapshot_id,0.2,256,"
Analyze the provided API parameter description, and extract any example values for the parameter mentioned in the description. 
Then, generate a few additional example values that correspond to, or are in the same category as the provided values.
If there are no example values provided, simply generate values corresponding to the description, and always generate values when possible.  
If generating example values is not possible, return None. Consider the following cases: 

Case 1: The description contains example values USA, CAN, ZWE: Output: ""PROVIDED: USA, CAN, ZWE +++ GENERATED: BRA, FRA, GER ...""
Case 2: The description does not explicitly mention example values: Output: ""PROVIDED: None +++ GENERATED: BRA, FRA, GER, USA ...""
Case 3: The description does not explicitly mention example values, and it is not possible to generate example values: Output: ""None""

Assume any ""
"" values in the input represent spaces or new lines. Do not output any ""
"" strings.

Here are some examples of inputs and expected outputs:
Input:'The country code associated with the country. Examples are CAD, USD, etc...'
Output:PROVIDED: CAD, USD +++ GENERATED: AFG, ALA, ALB, DZA, ASM, AND, AGO, AIA, ATA, ATG, ARG, ARM, ABW, AUS, AUT, AZE, BHS, BHR, BGD, BRB, BLR, BEL, 
BLZ, BEN, BMU, BTN, BOL, BES, BIH, BWA, BVT, BRA, IOT, BRN, BGR, BFA, BDI, CPV, KHM, CMR, CAN, CYM, CAF, TCD, 
CHL, CHN, CXR, CCK, COL, COM, COG, COD, COK, CRI, CIV, HRV, CUB, CUW, CYP, CZE, DNK, DJI, DMA, DOM, ECU, EGY, 
SLV, GNQ, ERI, EST, SWZ, ETH, FLK, FRO, FJI, FIN, FRA, GUF, PYF, ATF, GAB, GMB, GEO, DEU, GHA, GIB, GRC, GRL, 
GRD, GLP, GUM, GTM, GGY, GIN, GNB, GUY, HTI, HMD, VAT, HND, HKG, HUN, ISL, IND, IDN, IRN, IRQ, IRL, IMN, ISR, 
ITA, JAM, JPN, JEY, JOR, KAZ, KEN, KIR, PRK, KOR, KWT, KGZ, LAO, LVA, LBN, LSO, LBR, LBY, LIE, LTU, LUX, MAC, 
MDG, MWI, MYS, MDV, MLI, MLT, MHL, MTQ, MRT, MUS, MYT, MEX, FSM, MDA, MCO, MNG, MNE, MSR, MAR, MOZ, MMR, NAM, 
NRU, NPL, NLD, NCL, NZL, NIC, NER, NGA, NIU, NFK, MKD, MNP, NOR, OMN, PAK, PLW, PSE, PAN, PNG, PRY, PER, PHL, 
PCN, POL, PRT, PRI, QAT, REU, ROU, RUS, RWA, BLM, SHN, KNA, LCA, MAF, SPM, VCT, WSM, SMR, STP, SAU, SEN, SRB, 
SYC, SLE, SGP, SXM, SVK, SVN, SLB, SOM, ZAF, SGS, SSD, ESP, LKA, SDN, SUR, SJM, SWE, CHE, SYR, TWN, TJK, TZA, 
THA, TLS, TGO, TKL, TON, TTO, TUN, TUR, TKM, TCA, TUV, UGA, UKR, ARE, GBR, USA, UMI, URY, UZB, VUT, VEN, VNM, 
VGB, VIR, WLF, ESH, YEM, ZMB, ZWE
Input:'The numbers for the percent grades must be to one decimal place (such as 10.6).'
Output:PROVIDED: 10.6 +++ GENERATED: 0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0, 2.1, 
2.2, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8, 2.9, 3.0, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6, 3.7, 3.8, 3.9, 4.0, 4.1, 4.2, 4.3, 4.4, 
4.5, 4.6, 4.7, 4.8, 4.9, 5.0, 5.1, 5.2, 5.3, 10.0, 99.9, 100.0
Input:'The title of the book to be rated.'
Output:PROVIDED: None +++ GENERATED: To Kill a Mockingbird, 1984, Pride and Prejudice, The Great Gatsby, Moby-Dick, The Catcher in the Rye, Harry Potter 
and the Sorcerer's Stone, The Lord of the Rings, One Hundred Years of Solitude, Brave New World, Sapiens: A Brief 
History of Humankind, The Immortal Life of Henrietta Lacks, Thinking, Fast and Slow, The Wright Brothers, The Diary of 
a Young Girl, Educated, The Art of War, The 7 Habits of Highly Effective People, Freakonomics, Quiet: The Power of 
Introverts in a World That Can't Stop Talking, Dune, Ender's Game, Neuromancer
Input:'The value for the number of products to consume. It must be greater than 12 and less than 50.'
Output:PROVIDED: None +++ GENERATED: None
Input:'The number of bank accounts associated. Cannot be less than 0.'
Output:PROVIDED: None +++ GENERATED: None
Input:The playlist's snapshot ID against which you want to make the changes.
Output:",None
snapshot_id,0.2,256,"
Analyze the provided API parameter description and first estimate the parameter type. Then, according to the type, apply the following to determine restrictions on the parameter input:
If it is a number, determine if the description mentions minimum, maximum, or default possible values and output: ""min [minimum], max [maximum], default [default]"". 
If it's a string, word, or code, determine if the description mentions minimum or maximum possible character amounts or a default value, and output: ""minLength [minimum], maxLength [maximum], default [default]"". 
If it's an array or list, determine if the description mentions minimum or maximum possible list lengths or a default value, and output: ""minItems [minimum], maxItems [maximum], default [default]"".
If it's an object, determine if the description mentions minimum or maximum possible numbers of object properties or a default value, and output: ""minProperties [minimum], maxProperties [maximum], default [default]"".
If it is any other data type where there is a default value provided, output: ""min None, max None, default [default]"".
If you are unable to determine any minimum, maximum, or default restrictions, output ""None"". If you are able to determine only one either the minimum or maximum, output the undetermined value as ""None"".

Assume any ""
"" values in the input indicate either new lines or spaces. 

Here are some examples of inputs and expected outputs:

Input:'An idea for a project. This and 'rating' are required.'
Output:None
Input:'The maximum value is 50. If nothing is put in, default to 0.'
Output:min None, max 50, default 0
Input:'The timer counter. The value must be between 15.0 and 120.'
Output:min 15.0, max 120, default None
Input:'The input range. The smallest value possible is -120.8. The largest should be 179.652.'
Output:min -120.8, max 179.652, default None
Input:'The number of items to be investigated. The maximum is 9,999.99'
Output:min None, max 9999.99, default None
Input:'The name of the movie. The movie name cannot be shorter than 10 characters and longer than 20 characters.'
Output:minLength 10, maxLength 20, default None
Input:'The country code which can be 1-letter, 2-letter, or 3-letter.'
Output:minLength 1, maxLength 3, default None
Input:'A supplied language code that can either be 2-letter or 3-letter which is used to parse through a list of common phrases.'
Output:minLength 2, maxLength 3, default None
Input:'Search via county areas.'
Output:None
Input:'Identifies synonyms through word inputs.'
Output:None
Input:'After searching through a list of ISO country codes, input 2-letter or 3-letter codes to find their data.'
Output:minLength 2, maxLength 3, default None
Input:The playlist's snapshot ID against which you want to make the changes.
Output:",None
snapshot_id,0.2,256,"
Analyze the provided API parameter description and determine whether it clearly identifies the parameter's data type 
or formatting. 
The list of possible data types are as follows: string, number, integer, boolean, array, and object.
The list of format options are as follows: time, date, password, byte, binary, email, uuid, uri, url, hostname, ipv4, and ipv6. Use the types and formats available for the OpenAPI Specification. 
A list of collectionFormat types are as follows: csv, ssv, and pipes.
If the data type is an array, attempt to identify its item type. 
Output the answer as follows: ""type [type], items [item type], format [format], collectionFormat [collectionFormat]"". Output None when unable to determine any of the categories. 
For example, only output a non-None ""item type"" if the ""type"" is array.

Assume any ""
"" values in the input indicate either new lines or spaces. 

Here are some examples of inputs and expected outputs:

Input:'A space-separated list of percent grades corresponding to the student.'
Output:type array, items number, format None, collectionFormat ssv
Input:'This should contain the email of the sender.'
Output:type string, items None, format email, collectionFormat None
Input:'This value should be true if the assignment is available for regrade.'
Output:type boolean, items None, format None, collectionFormat None
Input:'A URL containing the website for evaluation.'
Output:type string, items None, format url, collectionFormat None
Input:'The date of the contest. The date must be within the last three months.'
Output:type string, items None, format date, collectionFormat None
Input:'The time that the project must be completed. Use Eastern Standard Timezone (EST).'
Output:type string, items None, format date-time, collectionFormat None
Input:'A list of region codes.'
Output:type array, items None, format None, collectionFormat None
Input:The playlist's snapshot ID against which you want to make the changes.
Output:",None
snapshot_id,0.2,256,"
Identify the API parameter object by the grouping of its ""name"" and ""description"". Analyze the parameter description and extract logical constraints
in the provided format. Evaluate each case and determine whether it is applicable. Strictly follow the format and make no inferences. Only consider constraints
that are strictly required. Interpret the description in the least constraining manner, and assume Case 1 unless the other cases are obvious:

Case 1: The description isn't definitive about parameter requirements. Output ""None"".
Case 2: The description states the parameter ""name"" is required. Output: ""REQUIRED: name"". 
Case 3: The description states that parameter ""name"" or another parameter ""name"" is required. Output: ""Or(name, name)""
Case 4: The description states that given a set of parameters name, name_2, . . . , name_n, zero or one can be present in the API call: Output: ""ZeroOrOne(name, name_2, ... name_n)""
Case 5: The description states that given a set of parameters name, name_2, . . . , name_n, exactly one must be present in the API call: Output: ""OnlyOne(name, name_2, ... name_n)""
Case 6: The description states that given a set of parameters name, name_2, . . . , name_n, all of them or none must be present in the API call: Output: ""AllOrNone(name, name_2, ... name_n)""
Case 7: The description states that there is a relational relationship between some parameters: Output: ""name >= name_2"", where the standard relational operators can be used
Case 8: The description states that there is an arithmetic relationship between the value of parameters: Output: ""name_1 + name_2 <= value"", where the standard arithmetic operators can be used
Case 9: The description states there is a conditional relationship between parameters: Output: ""IF name THEN name_2"", where the standard logical operators can be used
Case 10: The description states that there exists a complex relationship between parameters, you can combine rules from the grammar to express a statement: Output: ""IF name==value THEN OnlyOne(name_2 AND name_3, name_4 AND name_5);

The grammar for statements is succinctly defined as follows:

Model:
    Dependency*;
Dependency:
    RelationalDependency | ArithmeticDependency |
    ConditionalDependency | PredefinedDependency;
RelationalDependency:
    Param RelationalOperator Param;
ArithmeticDependency:
    Operation RelationalOperator DOUBLE;
Operation:
    Param OperationContinuation |
    '(' Operation ')' OperationContinuation?;
OperationContinuation:
    ArithmeticOperator (Param | Operation);
ConditionalDependency:
    'IF' Predicate 'THEN' Predicate;
Predicate:
    Clause ClauseContinuation?;
Clause:
    (Term | RelationalDependency | ArithmeticDependency
    | PredefinedDependency) | 'NOT'? '(' Predicate ')';
Term:
    'NOT'? (Param | ParamValueRelation);
Param:
    ID | '[' ID ']';
ParamValueRelation:
    Param '==' STRING('|'STRING)* |
    Param 'LIKE' PATTERN_STRING | Param '==' BOOLEAN |
    Param RelationalOperator DOUBLE;
ClauseContinuation:
    ('AND' | 'OR') Predicate;
PredefinedDependency:
    'NOT'? ('Or' | 'OnlyOne' | 'AllOrNone' |
    'ZeroOrOne') '(' Clause (',' Clause)+ ')';
RelationalOperator:
    '<' | '>' | '<=' | '>=' | '==' | '!=';
ArithmeticOperator:
    '+' | '-' | '*' | '/';

If there are multiple dependency statements, return each one on a new line. Do not include any other text. Do not create dependencies on expected API responses.
Assume any ""
"" values in the input indicate either new lines or spaces. 
Here are some examples of expected outputs:

Input:
name: text 
description: The text to be checked. This or 'data' is required.
Output:Or(text, data);
Input: 
     name: idea
     description: 'An idea for a project. This and 'rating' are required.'
Output:OnlyOne(idea AND rating);
Input:
      name: partID
      description: 'The ID of the part. If partModel is specified partID must be specified'
Output:IF partModel THEN partID;
Input:
       name: language 
       description: The language of the client, not required if the country-code is USA or CAN.
Output:IF country-code!='USA' OR country-code=='CAN' THEN language;
Input:
        name: cost
        description: The cost of the product, this - profit must be greater than 500.
Output:cost - profit > 500;
Input:The playlist's snapshot ID against which you want to make the changes.
Output:",None
q,0.2,256,"
Analyze the provided API parameter description, and extract any example values for the parameter mentioned in the description. 
Then, generate a few additional example values that correspond to, or are in the same category as the provided values.
If there are no example values provided, simply generate values corresponding to the description, and always generate values when possible.  
If generating example values is not possible, return None. Consider the following cases: 

Case 1: The description contains example values USA, CAN, ZWE: Output: ""PROVIDED: USA, CAN, ZWE +++ GENERATED: BRA, FRA, GER ...""
Case 2: The description does not explicitly mention example values: Output: ""PROVIDED: None +++ GENERATED: BRA, FRA, GER, USA ...""
Case 3: The description does not explicitly mention example values, and it is not possible to generate example values: Output: ""None""

Assume any ""
"" values in the input represent spaces or new lines. Do not output any ""
"" strings.

Here are some examples of inputs and expected outputs:
Input:'The country code associated with the country. Examples are CAD, USD, etc...'
Output:PROVIDED: CAD, USD +++ GENERATED: AFG, ALA, ALB, DZA, ASM, AND, AGO, AIA, ATA, ATG, ARG, ARM, ABW, AUS, AUT, AZE, BHS, BHR, BGD, BRB, BLR, BEL, 
BLZ, BEN, BMU, BTN, BOL, BES, BIH, BWA, BVT, BRA, IOT, BRN, BGR, BFA, BDI, CPV, KHM, CMR, CAN, CYM, CAF, TCD, 
CHL, CHN, CXR, CCK, COL, COM, COG, COD, COK, CRI, CIV, HRV, CUB, CUW, CYP, CZE, DNK, DJI, DMA, DOM, ECU, EGY, 
SLV, GNQ, ERI, EST, SWZ, ETH, FLK, FRO, FJI, FIN, FRA, GUF, PYF, ATF, GAB, GMB, GEO, DEU, GHA, GIB, GRC, GRL, 
GRD, GLP, GUM, GTM, GGY, GIN, GNB, GUY, HTI, HMD, VAT, HND, HKG, HUN, ISL, IND, IDN, IRN, IRQ, IRL, IMN, ISR, 
ITA, JAM, JPN, JEY, JOR, KAZ, KEN, KIR, PRK, KOR, KWT, KGZ, LAO, LVA, LBN, LSO, LBR, LBY, LIE, LTU, LUX, MAC, 
MDG, MWI, MYS, MDV, MLI, MLT, MHL, MTQ, MRT, MUS, MYT, MEX, FSM, MDA, MCO, MNG, MNE, MSR, MAR, MOZ, MMR, NAM, 
NRU, NPL, NLD, NCL, NZL, NIC, NER, NGA, NIU, NFK, MKD, MNP, NOR, OMN, PAK, PLW, PSE, PAN, PNG, PRY, PER, PHL, 
PCN, POL, PRT, PRI, QAT, REU, ROU, RUS, RWA, BLM, SHN, KNA, LCA, MAF, SPM, VCT, WSM, SMR, STP, SAU, SEN, SRB, 
SYC, SLE, SGP, SXM, SVK, SVN, SLB, SOM, ZAF, SGS, SSD, ESP, LKA, SDN, SUR, SJM, SWE, CHE, SYR, TWN, TJK, TZA, 
THA, TLS, TGO, TKL, TON, TTO, TUN, TUR, TKM, TCA, TUV, UGA, UKR, ARE, GBR, USA, UMI, URY, UZB, VUT, VEN, VNM, 
VGB, VIR, WLF, ESH, YEM, ZMB, ZWE
Input:'The numbers for the percent grades must be to one decimal place (such as 10.6).'
Output:PROVIDED: 10.6 +++ GENERATED: 0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0, 2.1, 
2.2, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8, 2.9, 3.0, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6, 3.7, 3.8, 3.9, 4.0, 4.1, 4.2, 4.3, 4.4, 
4.5, 4.6, 4.7, 4.8, 4.9, 5.0, 5.1, 5.2, 5.3, 10.0, 99.9, 100.0
Input:'The title of the book to be rated.'
Output:PROVIDED: None +++ GENERATED: To Kill a Mockingbird, 1984, Pride and Prejudice, The Great Gatsby, Moby-Dick, The Catcher in the Rye, Harry Potter 
and the Sorcerer's Stone, The Lord of the Rings, One Hundred Years of Solitude, Brave New World, Sapiens: A Brief 
History of Humankind, The Immortal Life of Henrietta Lacks, Thinking, Fast and Slow, The Wright Brothers, The Diary of 
a Young Girl, Educated, The Art of War, The 7 Habits of Highly Effective People, Freakonomics, Quiet: The Power of 
Introverts in a World That Can't Stop Talking, Dune, Ender's Game, Neuromancer
Input:'The value for the number of products to consume. It must be greater than 12 and less than 50.'
Output:PROVIDED: None +++ GENERATED: None
Input:'The number of bank accounts associated. Cannot be less than 0.'
Output:PROVIDED: None +++ GENERATED: None
Input:Search [query](#writing-a-query---guidelines) keywords and optional field filters and operators.
For example:
`q=roadhouse%20blues`.
Output:",None
q,0.2,256,"
Analyze the provided API parameter description and first estimate the parameter type. Then, according to the type, apply the following to determine restrictions on the parameter input:
If it is a number, determine if the description mentions minimum, maximum, or default possible values and output: ""min [minimum], max [maximum], default [default]"". 
If it's a string, word, or code, determine if the description mentions minimum or maximum possible character amounts or a default value, and output: ""minLength [minimum], maxLength [maximum], default [default]"". 
If it's an array or list, determine if the description mentions minimum or maximum possible list lengths or a default value, and output: ""minItems [minimum], maxItems [maximum], default [default]"".
If it's an object, determine if the description mentions minimum or maximum possible numbers of object properties or a default value, and output: ""minProperties [minimum], maxProperties [maximum], default [default]"".
If it is any other data type where there is a default value provided, output: ""min None, max None, default [default]"".
If you are unable to determine any minimum, maximum, or default restrictions, output ""None"". If you are able to determine only one either the minimum or maximum, output the undetermined value as ""None"".

Assume any ""
"" values in the input indicate either new lines or spaces. 

Here are some examples of inputs and expected outputs:

Input:'An idea for a project. This and 'rating' are required.'
Output:None
Input:'The maximum value is 50. If nothing is put in, default to 0.'
Output:min None, max 50, default 0
Input:'The timer counter. The value must be between 15.0 and 120.'
Output:min 15.0, max 120, default None
Input:'The input range. The smallest value possible is -120.8. The largest should be 179.652.'
Output:min -120.8, max 179.652, default None
Input:'The number of items to be investigated. The maximum is 9,999.99'
Output:min None, max 9999.99, default None
Input:'The name of the movie. The movie name cannot be shorter than 10 characters and longer than 20 characters.'
Output:minLength 10, maxLength 20, default None
Input:'The country code which can be 1-letter, 2-letter, or 3-letter.'
Output:minLength 1, maxLength 3, default None
Input:'A supplied language code that can either be 2-letter or 3-letter which is used to parse through a list of common phrases.'
Output:minLength 2, maxLength 3, default None
Input:'Search via county areas.'
Output:None
Input:'Identifies synonyms through word inputs.'
Output:None
Input:'After searching through a list of ISO country codes, input 2-letter or 3-letter codes to find their data.'
Output:minLength 2, maxLength 3, default None
Input:Search [query](#writing-a-query---guidelines) keywords and optional field filters and operators.
For example:
`q=roadhouse%20blues`.
Output:",None
q,0.2,256,"
Analyze the provided API parameter description and determine whether it clearly identifies the parameter's data type 
or formatting. 
The list of possible data types are as follows: string, number, integer, boolean, array, and object.
The list of format options are as follows: time, date, password, byte, binary, email, uuid, uri, url, hostname, ipv4, and ipv6. Use the types and formats available for the OpenAPI Specification. 
A list of collectionFormat types are as follows: csv, ssv, and pipes.
If the data type is an array, attempt to identify its item type. 
Output the answer as follows: ""type [type], items [item type], format [format], collectionFormat [collectionFormat]"". Output None when unable to determine any of the categories. 
For example, only output a non-None ""item type"" if the ""type"" is array.

Assume any ""
"" values in the input indicate either new lines or spaces. 

Here are some examples of inputs and expected outputs:

Input:'A space-separated list of percent grades corresponding to the student.'
Output:type array, items number, format None, collectionFormat ssv
Input:'This should contain the email of the sender.'
Output:type string, items None, format email, collectionFormat None
Input:'This value should be true if the assignment is available for regrade.'
Output:type boolean, items None, format None, collectionFormat None
Input:'A URL containing the website for evaluation.'
Output:type string, items None, format url, collectionFormat None
Input:'The date of the contest. The date must be within the last three months.'
Output:type string, items None, format date, collectionFormat None
Input:'The time that the project must be completed. Use Eastern Standard Timezone (EST).'
Output:type string, items None, format date-time, collectionFormat None
Input:'A list of region codes.'
Output:type array, items None, format None, collectionFormat None
Input:Search [query](#writing-a-query---guidelines) keywords and optional field filters and operators.
For example:
`q=roadhouse%20blues`.
Output:",None
q,0.2,256,"
Identify the API parameter object by the grouping of its ""name"" and ""description"". Analyze the parameter description and extract logical constraints
in the provided format. Evaluate each case and determine whether it is applicable. Strictly follow the format and make no inferences. Only consider constraints
that are strictly required. Interpret the description in the least constraining manner, and assume Case 1 unless the other cases are obvious:

Case 1: The description isn't definitive about parameter requirements. Output ""None"".
Case 2: The description states the parameter ""name"" is required. Output: ""REQUIRED: name"". 
Case 3: The description states that parameter ""name"" or another parameter ""name"" is required. Output: ""Or(name, name)""
Case 4: The description states that given a set of parameters name, name_2, . . . , name_n, zero or one can be present in the API call: Output: ""ZeroOrOne(name, name_2, ... name_n)""
Case 5: The description states that given a set of parameters name, name_2, . . . , name_n, exactly one must be present in the API call: Output: ""OnlyOne(name, name_2, ... name_n)""
Case 6: The description states that given a set of parameters name, name_2, . . . , name_n, all of them or none must be present in the API call: Output: ""AllOrNone(name, name_2, ... name_n)""
Case 7: The description states that there is a relational relationship between some parameters: Output: ""name >= name_2"", where the standard relational operators can be used
Case 8: The description states that there is an arithmetic relationship between the value of parameters: Output: ""name_1 + name_2 <= value"", where the standard arithmetic operators can be used
Case 9: The description states there is a conditional relationship between parameters: Output: ""IF name THEN name_2"", where the standard logical operators can be used
Case 10: The description states that there exists a complex relationship between parameters, you can combine rules from the grammar to express a statement: Output: ""IF name==value THEN OnlyOne(name_2 AND name_3, name_4 AND name_5);

The grammar for statements is succinctly defined as follows:

Model:
    Dependency*;
Dependency:
    RelationalDependency | ArithmeticDependency |
    ConditionalDependency | PredefinedDependency;
RelationalDependency:
    Param RelationalOperator Param;
ArithmeticDependency:
    Operation RelationalOperator DOUBLE;
Operation:
    Param OperationContinuation |
    '(' Operation ')' OperationContinuation?;
OperationContinuation:
    ArithmeticOperator (Param | Operation);
ConditionalDependency:
    'IF' Predicate 'THEN' Predicate;
Predicate:
    Clause ClauseContinuation?;
Clause:
    (Term | RelationalDependency | ArithmeticDependency
    | PredefinedDependency) | 'NOT'? '(' Predicate ')';
Term:
    'NOT'? (Param | ParamValueRelation);
Param:
    ID | '[' ID ']';
ParamValueRelation:
    Param '==' STRING('|'STRING)* |
    Param 'LIKE' PATTERN_STRING | Param '==' BOOLEAN |
    Param RelationalOperator DOUBLE;
ClauseContinuation:
    ('AND' | 'OR') Predicate;
PredefinedDependency:
    'NOT'? ('Or' | 'OnlyOne' | 'AllOrNone' |
    'ZeroOrOne') '(' Clause (',' Clause)+ ')';
RelationalOperator:
    '<' | '>' | '<=' | '>=' | '==' | '!=';
ArithmeticOperator:
    '+' | '-' | '*' | '/';

If there are multiple dependency statements, return each one on a new line. Do not include any other text. Do not create dependencies on expected API responses.
Assume any ""
"" values in the input indicate either new lines or spaces. 
Here are some examples of expected outputs:

Input:
name: text 
description: The text to be checked. This or 'data' is required.
Output:Or(text, data);
Input: 
     name: idea
     description: 'An idea for a project. This and 'rating' are required.'
Output:OnlyOne(idea AND rating);
Input:
      name: partID
      description: 'The ID of the part. If partModel is specified partID must be specified'
Output:IF partModel THEN partID;
Input:
       name: language 
       description: The language of the client, not required if the country-code is USA or CAN.
Output:IF country-code!='USA' OR country-code=='CAN' THEN language;
Input:
        name: cost
        description: The cost of the product, this - profit must be greater than 500.
Output:cost - profit > 500;
Input:Search [query](#writing-a-query---guidelines) keywords and optional field filters and operators.
For example:
`q=roadhouse%20blues`.
Output:",None
type,0.2,256,"
Analyze the provided API parameter description, and extract any example values for the parameter mentioned in the description. 
Then, generate a few additional example values that correspond to, or are in the same category as the provided values.
If there are no example values provided, simply generate values corresponding to the description, and always generate values when possible.  
If generating example values is not possible, return None. Consider the following cases: 

Case 1: The description contains example values USA, CAN, ZWE: Output: ""PROVIDED: USA, CAN, ZWE +++ GENERATED: BRA, FRA, GER ...""
Case 2: The description does not explicitly mention example values: Output: ""PROVIDED: None +++ GENERATED: BRA, FRA, GER, USA ...""
Case 3: The description does not explicitly mention example values, and it is not possible to generate example values: Output: ""None""

Assume any ""
"" values in the input represent spaces or new lines. Do not output any ""
"" strings.

Here are some examples of inputs and expected outputs:
Input:'The country code associated with the country. Examples are CAD, USD, etc...'
Output:PROVIDED: CAD, USD +++ GENERATED: AFG, ALA, ALB, DZA, ASM, AND, AGO, AIA, ATA, ATG, ARG, ARM, ABW, AUS, AUT, AZE, BHS, BHR, BGD, BRB, BLR, BEL, 
BLZ, BEN, BMU, BTN, BOL, BES, BIH, BWA, BVT, BRA, IOT, BRN, BGR, BFA, BDI, CPV, KHM, CMR, CAN, CYM, CAF, TCD, 
CHL, CHN, CXR, CCK, COL, COM, COG, COD, COK, CRI, CIV, HRV, CUB, CUW, CYP, CZE, DNK, DJI, DMA, DOM, ECU, EGY, 
SLV, GNQ, ERI, EST, SWZ, ETH, FLK, FRO, FJI, FIN, FRA, GUF, PYF, ATF, GAB, GMB, GEO, DEU, GHA, GIB, GRC, GRL, 
GRD, GLP, GUM, GTM, GGY, GIN, GNB, GUY, HTI, HMD, VAT, HND, HKG, HUN, ISL, IND, IDN, IRN, IRQ, IRL, IMN, ISR, 
ITA, JAM, JPN, JEY, JOR, KAZ, KEN, KIR, PRK, KOR, KWT, KGZ, LAO, LVA, LBN, LSO, LBR, LBY, LIE, LTU, LUX, MAC, 
MDG, MWI, MYS, MDV, MLI, MLT, MHL, MTQ, MRT, MUS, MYT, MEX, FSM, MDA, MCO, MNG, MNE, MSR, MAR, MOZ, MMR, NAM, 
NRU, NPL, NLD, NCL, NZL, NIC, NER, NGA, NIU, NFK, MKD, MNP, NOR, OMN, PAK, PLW, PSE, PAN, PNG, PRY, PER, PHL, 
PCN, POL, PRT, PRI, QAT, REU, ROU, RUS, RWA, BLM, SHN, KNA, LCA, MAF, SPM, VCT, WSM, SMR, STP, SAU, SEN, SRB, 
SYC, SLE, SGP, SXM, SVK, SVN, SLB, SOM, ZAF, SGS, SSD, ESP, LKA, SDN, SUR, SJM, SWE, CHE, SYR, TWN, TJK, TZA, 
THA, TLS, TGO, TKL, TON, TTO, TUN, TUR, TKM, TCA, TUV, UGA, UKR, ARE, GBR, USA, UMI, URY, UZB, VUT, VEN, VNM, 
VGB, VIR, WLF, ESH, YEM, ZMB, ZWE
Input:'The numbers for the percent grades must be to one decimal place (such as 10.6).'
Output:PROVIDED: 10.6 +++ GENERATED: 0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0, 2.1, 
2.2, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8, 2.9, 3.0, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6, 3.7, 3.8, 3.9, 4.0, 4.1, 4.2, 4.3, 4.4, 
4.5, 4.6, 4.7, 4.8, 4.9, 5.0, 5.1, 5.2, 5.3, 10.0, 99.9, 100.0
Input:'The title of the book to be rated.'
Output:PROVIDED: None +++ GENERATED: To Kill a Mockingbird, 1984, Pride and Prejudice, The Great Gatsby, Moby-Dick, The Catcher in the Rye, Harry Potter 
and the Sorcerer's Stone, The Lord of the Rings, One Hundred Years of Solitude, Brave New World, Sapiens: A Brief 
History of Humankind, The Immortal Life of Henrietta Lacks, Thinking, Fast and Slow, The Wright Brothers, The Diary of 
a Young Girl, Educated, The Art of War, The 7 Habits of Highly Effective People, Freakonomics, Quiet: The Power of 
Introverts in a World That Can't Stop Talking, Dune, Ender's Game, Neuromancer
Input:'The value for the number of products to consume. It must be greater than 12 and less than 50.'
Output:PROVIDED: None +++ GENERATED: None
Input:'The number of bank accounts associated. Cannot be less than 0.'
Output:PROVIDED: None +++ GENERATED: None
Input:A comma-separated list of item types to search across.
Valid types are: `album` , `artist`, `playlist`, `track`, `show` and `episode`.
Search results include hits from all the specified item types.
For example: `q=name:abacab&type=album,track` returns both albums ***and*** tracks with ""abacab"" included in their name.
Output:",None
type,0.2,256,"
Analyze the provided API parameter description and first estimate the parameter type. Then, according to the type, apply the following to determine restrictions on the parameter input:
If it is a number, determine if the description mentions minimum, maximum, or default possible values and output: ""min [minimum], max [maximum], default [default]"". 
If it's a string, word, or code, determine if the description mentions minimum or maximum possible character amounts or a default value, and output: ""minLength [minimum], maxLength [maximum], default [default]"". 
If it's an array or list, determine if the description mentions minimum or maximum possible list lengths or a default value, and output: ""minItems [minimum], maxItems [maximum], default [default]"".
If it's an object, determine if the description mentions minimum or maximum possible numbers of object properties or a default value, and output: ""minProperties [minimum], maxProperties [maximum], default [default]"".
If it is any other data type where there is a default value provided, output: ""min None, max None, default [default]"".
If you are unable to determine any minimum, maximum, or default restrictions, output ""None"". If you are able to determine only one either the minimum or maximum, output the undetermined value as ""None"".

Assume any ""
"" values in the input indicate either new lines or spaces. 

Here are some examples of inputs and expected outputs:

Input:'An idea for a project. This and 'rating' are required.'
Output:None
Input:'The maximum value is 50. If nothing is put in, default to 0.'
Output:min None, max 50, default 0
Input:'The timer counter. The value must be between 15.0 and 120.'
Output:min 15.0, max 120, default None
Input:'The input range. The smallest value possible is -120.8. The largest should be 179.652.'
Output:min -120.8, max 179.652, default None
Input:'The number of items to be investigated. The maximum is 9,999.99'
Output:min None, max 9999.99, default None
Input:'The name of the movie. The movie name cannot be shorter than 10 characters and longer than 20 characters.'
Output:minLength 10, maxLength 20, default None
Input:'The country code which can be 1-letter, 2-letter, or 3-letter.'
Output:minLength 1, maxLength 3, default None
Input:'A supplied language code that can either be 2-letter or 3-letter which is used to parse through a list of common phrases.'
Output:minLength 2, maxLength 3, default None
Input:'Search via county areas.'
Output:None
Input:'Identifies synonyms through word inputs.'
Output:None
Input:'After searching through a list of ISO country codes, input 2-letter or 3-letter codes to find their data.'
Output:minLength 2, maxLength 3, default None
Input:A comma-separated list of item types to search across.
Valid types are: `album` , `artist`, `playlist`, `track`, `show` and `episode`.
Search results include hits from all the specified item types.
For example: `q=name:abacab&type=album,track` returns both albums ***and*** tracks with ""abacab"" included in their name.
Output:","minItems 1, maxItems None, default None"
type,0.2,256,"
Analyze the provided API parameter description and determine whether it clearly identifies the parameter's data type 
or formatting. 
The list of possible data types are as follows: string, number, integer, boolean, array, and object.
The list of format options are as follows: time, date, password, byte, binary, email, uuid, uri, url, hostname, ipv4, and ipv6. Use the types and formats available for the OpenAPI Specification. 
A list of collectionFormat types are as follows: csv, ssv, and pipes.
If the data type is an array, attempt to identify its item type. 
Output the answer as follows: ""type [type], items [item type], format [format], collectionFormat [collectionFormat]"". Output None when unable to determine any of the categories. 
For example, only output a non-None ""item type"" if the ""type"" is array.

Assume any ""
"" values in the input indicate either new lines or spaces. 

Here are some examples of inputs and expected outputs:

Input:'A space-separated list of percent grades corresponding to the student.'
Output:type array, items number, format None, collectionFormat ssv
Input:'This should contain the email of the sender.'
Output:type string, items None, format email, collectionFormat None
Input:'This value should be true if the assignment is available for regrade.'
Output:type boolean, items None, format None, collectionFormat None
Input:'A URL containing the website for evaluation.'
Output:type string, items None, format url, collectionFormat None
Input:'The date of the contest. The date must be within the last three months.'
Output:type string, items None, format date, collectionFormat None
Input:'The time that the project must be completed. Use Eastern Standard Timezone (EST).'
Output:type string, items None, format date-time, collectionFormat None
Input:'A list of region codes.'
Output:type array, items None, format None, collectionFormat None
Input:A comma-separated list of item types to search across.
Valid types are: `album` , `artist`, `playlist`, `track`, `show` and `episode`.
Search results include hits from all the specified item types.
For example: `q=name:abacab&type=album,track` returns both albums ***and*** tracks with ""abacab"" included in their name.
Output:",None
type,0.2,256,"
Identify the API parameter object by the grouping of its ""name"" and ""description"". Analyze the parameter description and extract logical constraints
in the provided format. Evaluate each case and determine whether it is applicable. Strictly follow the format and make no inferences. Only consider constraints
that are strictly required. Interpret the description in the least constraining manner, and assume Case 1 unless the other cases are obvious:

Case 1: The description isn't definitive about parameter requirements. Output ""None"".
Case 2: The description states the parameter ""name"" is required. Output: ""REQUIRED: name"". 
Case 3: The description states that parameter ""name"" or another parameter ""name"" is required. Output: ""Or(name, name)""
Case 4: The description states that given a set of parameters name, name_2, . . . , name_n, zero or one can be present in the API call: Output: ""ZeroOrOne(name, name_2, ... name_n)""
Case 5: The description states that given a set of parameters name, name_2, . . . , name_n, exactly one must be present in the API call: Output: ""OnlyOne(name, name_2, ... name_n)""
Case 6: The description states that given a set of parameters name, name_2, . . . , name_n, all of them or none must be present in the API call: Output: ""AllOrNone(name, name_2, ... name_n)""
Case 7: The description states that there is a relational relationship between some parameters: Output: ""name >= name_2"", where the standard relational operators can be used
Case 8: The description states that there is an arithmetic relationship between the value of parameters: Output: ""name_1 + name_2 <= value"", where the standard arithmetic operators can be used
Case 9: The description states there is a conditional relationship between parameters: Output: ""IF name THEN name_2"", where the standard logical operators can be used
Case 10: The description states that there exists a complex relationship between parameters, you can combine rules from the grammar to express a statement: Output: ""IF name==value THEN OnlyOne(name_2 AND name_3, name_4 AND name_5);

The grammar for statements is succinctly defined as follows:

Model:
    Dependency*;
Dependency:
    RelationalDependency | ArithmeticDependency |
    ConditionalDependency | PredefinedDependency;
RelationalDependency:
    Param RelationalOperator Param;
ArithmeticDependency:
    Operation RelationalOperator DOUBLE;
Operation:
    Param OperationContinuation |
    '(' Operation ')' OperationContinuation?;
OperationContinuation:
    ArithmeticOperator (Param | Operation);
ConditionalDependency:
    'IF' Predicate 'THEN' Predicate;
Predicate:
    Clause ClauseContinuation?;
Clause:
    (Term | RelationalDependency | ArithmeticDependency
    | PredefinedDependency) | 'NOT'? '(' Predicate ')';
Term:
    'NOT'? (Param | ParamValueRelation);
Param:
    ID | '[' ID ']';
ParamValueRelation:
    Param '==' STRING('|'STRING)* |
    Param 'LIKE' PATTERN_STRING | Param '==' BOOLEAN |
    Param RelationalOperator DOUBLE;
ClauseContinuation:
    ('AND' | 'OR') Predicate;
PredefinedDependency:
    'NOT'? ('Or' | 'OnlyOne' | 'AllOrNone' |
    'ZeroOrOne') '(' Clause (',' Clause)+ ')';
RelationalOperator:
    '<' | '>' | '<=' | '>=' | '==' | '!=';
ArithmeticOperator:
    '+' | '-' | '*' | '/';

If there are multiple dependency statements, return each one on a new line. Do not include any other text. Do not create dependencies on expected API responses.
Assume any ""
"" values in the input indicate either new lines or spaces. 
Here are some examples of expected outputs:

Input:
name: text 
description: The text to be checked. This or 'data' is required.
Output:Or(text, data);
Input: 
     name: idea
     description: 'An idea for a project. This and 'rating' are required.'
Output:OnlyOne(idea AND rating);
Input:
      name: partID
      description: 'The ID of the part. If partModel is specified partID must be specified'
Output:IF partModel THEN partID;
Input:
       name: language 
       description: The language of the client, not required if the country-code is USA or CAN.
Output:IF country-code!='USA' OR country-code=='CAN' THEN language;
Input:
        name: cost
        description: The cost of the product, this - profit must be greater than 500.
Output:cost - profit > 500;
Input:A comma-separated list of item types to search across.
Valid types are: `album` , `artist`, `playlist`, `track`, `show` and `episode`.
Search results include hits from all the specified item types.
For example: `q=name:abacab&type=album,track` returns both albums ***and*** tracks with ""abacab"" included in their name.
Output:",None
market,0.2,256,"
Analyze the provided API parameter description, and extract any example values for the parameter mentioned in the description. 
Then, generate a few additional example values that correspond to, or are in the same category as the provided values.
If there are no example values provided, simply generate values corresponding to the description, and always generate values when possible.  
If generating example values is not possible, return None. Consider the following cases: 

Case 1: The description contains example values USA, CAN, ZWE: Output: ""PROVIDED: USA, CAN, ZWE +++ GENERATED: BRA, FRA, GER ...""
Case 2: The description does not explicitly mention example values: Output: ""PROVIDED: None +++ GENERATED: BRA, FRA, GER, USA ...""
Case 3: The description does not explicitly mention example values, and it is not possible to generate example values: Output: ""None""

Assume any ""
"" values in the input represent spaces or new lines. Do not output any ""
"" strings.

Here are some examples of inputs and expected outputs:
Input:'The country code associated with the country. Examples are CAD, USD, etc...'
Output:PROVIDED: CAD, USD +++ GENERATED: AFG, ALA, ALB, DZA, ASM, AND, AGO, AIA, ATA, ATG, ARG, ARM, ABW, AUS, AUT, AZE, BHS, BHR, BGD, BRB, BLR, BEL, 
BLZ, BEN, BMU, BTN, BOL, BES, BIH, BWA, BVT, BRA, IOT, BRN, BGR, BFA, BDI, CPV, KHM, CMR, CAN, CYM, CAF, TCD, 
CHL, CHN, CXR, CCK, COL, COM, COG, COD, COK, CRI, CIV, HRV, CUB, CUW, CYP, CZE, DNK, DJI, DMA, DOM, ECU, EGY, 
SLV, GNQ, ERI, EST, SWZ, ETH, FLK, FRO, FJI, FIN, FRA, GUF, PYF, ATF, GAB, GMB, GEO, DEU, GHA, GIB, GRC, GRL, 
GRD, GLP, GUM, GTM, GGY, GIN, GNB, GUY, HTI, HMD, VAT, HND, HKG, HUN, ISL, IND, IDN, IRN, IRQ, IRL, IMN, ISR, 
ITA, JAM, JPN, JEY, JOR, KAZ, KEN, KIR, PRK, KOR, KWT, KGZ, LAO, LVA, LBN, LSO, LBR, LBY, LIE, LTU, LUX, MAC, 
MDG, MWI, MYS, MDV, MLI, MLT, MHL, MTQ, MRT, MUS, MYT, MEX, FSM, MDA, MCO, MNG, MNE, MSR, MAR, MOZ, MMR, NAM, 
NRU, NPL, NLD, NCL, NZL, NIC, NER, NGA, NIU, NFK, MKD, MNP, NOR, OMN, PAK, PLW, PSE, PAN, PNG, PRY, PER, PHL, 
PCN, POL, PRT, PRI, QAT, REU, ROU, RUS, RWA, BLM, SHN, KNA, LCA, MAF, SPM, VCT, WSM, SMR, STP, SAU, SEN, SRB, 
SYC, SLE, SGP, SXM, SVK, SVN, SLB, SOM, ZAF, SGS, SSD, ESP, LKA, SDN, SUR, SJM, SWE, CHE, SYR, TWN, TJK, TZA, 
THA, TLS, TGO, TKL, TON, TTO, TUN, TUR, TKM, TCA, TUV, UGA, UKR, ARE, GBR, USA, UMI, URY, UZB, VUT, VEN, VNM, 
VGB, VIR, WLF, ESH, YEM, ZMB, ZWE
Input:'The numbers for the percent grades must be to one decimal place (such as 10.6).'
Output:PROVIDED: 10.6 +++ GENERATED: 0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0, 2.1, 
2.2, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8, 2.9, 3.0, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6, 3.7, 3.8, 3.9, 4.0, 4.1, 4.2, 4.3, 4.4, 
4.5, 4.6, 4.7, 4.8, 4.9, 5.0, 5.1, 5.2, 5.3, 10.0, 99.9, 100.0
Input:'The title of the book to be rated.'
Output:PROVIDED: None +++ GENERATED: To Kill a Mockingbird, 1984, Pride and Prejudice, The Great Gatsby, Moby-Dick, The Catcher in the Rye, Harry Potter 
and the Sorcerer's Stone, The Lord of the Rings, One Hundred Years of Solitude, Brave New World, Sapiens: A Brief 
History of Humankind, The Immortal Life of Henrietta Lacks, Thinking, Fast and Slow, The Wright Brothers, The Diary of 
a Young Girl, Educated, The Art of War, The 7 Habits of Highly Effective People, Freakonomics, Quiet: The Power of 
Introverts in a World That Can't Stop Talking, Dune, Ender's Game, Neuromancer
Input:'The value for the number of products to consume. It must be greater than 12 and less than 50.'
Output:PROVIDED: None +++ GENERATED: None
Input:'The number of bank accounts associated. Cannot be less than 0.'
Output:PROVIDED: None +++ GENERATED: None
Input:An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) or the string `from_token`.
If a country code is specified, only content that is playable in that market is returned.
**Note** :
- Playlist results are not affected by the market parameter.
- If market is set to `from_token`, and a valid access token is specified in the request header, only content playable in the country associated with the user account, is returned.
- Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/). A user must grant access to the `user-read-private` scope prior to when the access token is issued.
Output:",None
market,0.2,256,"
Analyze the provided API parameter description and first estimate the parameter type. Then, according to the type, apply the following to determine restrictions on the parameter input:
If it is a number, determine if the description mentions minimum, maximum, or default possible values and output: ""min [minimum], max [maximum], default [default]"". 
If it's a string, word, or code, determine if the description mentions minimum or maximum possible character amounts or a default value, and output: ""minLength [minimum], maxLength [maximum], default [default]"". 
If it's an array or list, determine if the description mentions minimum or maximum possible list lengths or a default value, and output: ""minItems [minimum], maxItems [maximum], default [default]"".
If it's an object, determine if the description mentions minimum or maximum possible numbers of object properties or a default value, and output: ""minProperties [minimum], maxProperties [maximum], default [default]"".
If it is any other data type where there is a default value provided, output: ""min None, max None, default [default]"".
If you are unable to determine any minimum, maximum, or default restrictions, output ""None"". If you are able to determine only one either the minimum or maximum, output the undetermined value as ""None"".

Assume any ""
"" values in the input indicate either new lines or spaces. 

Here are some examples of inputs and expected outputs:

Input:'An idea for a project. This and 'rating' are required.'
Output:None
Input:'The maximum value is 50. If nothing is put in, default to 0.'
Output:min None, max 50, default 0
Input:'The timer counter. The value must be between 15.0 and 120.'
Output:min 15.0, max 120, default None
Input:'The input range. The smallest value possible is -120.8. The largest should be 179.652.'
Output:min -120.8, max 179.652, default None
Input:'The number of items to be investigated. The maximum is 9,999.99'
Output:min None, max 9999.99, default None
Input:'The name of the movie. The movie name cannot be shorter than 10 characters and longer than 20 characters.'
Output:minLength 10, maxLength 20, default None
Input:'The country code which can be 1-letter, 2-letter, or 3-letter.'
Output:minLength 1, maxLength 3, default None
Input:'A supplied language code that can either be 2-letter or 3-letter which is used to parse through a list of common phrases.'
Output:minLength 2, maxLength 3, default None
Input:'Search via county areas.'
Output:None
Input:'Identifies synonyms through word inputs.'
Output:None
Input:'After searching through a list of ISO country codes, input 2-letter or 3-letter codes to find their data.'
Output:minLength 2, maxLength 3, default None
Input:An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) or the string `from_token`.
If a country code is specified, only content that is playable in that market is returned.
**Note** :
- Playlist results are not affected by the market parameter.
- If market is set to `from_token`, and a valid access token is specified in the request header, only content playable in the country associated with the user account, is returned.
- Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/). A user must grant access to the `user-read-private` scope prior to when the access token is issued.
Output:",None
market,0.2,256,"
Analyze the provided API parameter description and determine whether it clearly identifies the parameter's data type 
or formatting. 
The list of possible data types are as follows: string, number, integer, boolean, array, and object.
The list of format options are as follows: time, date, password, byte, binary, email, uuid, uri, url, hostname, ipv4, and ipv6. Use the types and formats available for the OpenAPI Specification. 
A list of collectionFormat types are as follows: csv, ssv, and pipes.
If the data type is an array, attempt to identify its item type. 
Output the answer as follows: ""type [type], items [item type], format [format], collectionFormat [collectionFormat]"". Output None when unable to determine any of the categories. 
For example, only output a non-None ""item type"" if the ""type"" is array.

Assume any ""
"" values in the input indicate either new lines or spaces. 

Here are some examples of inputs and expected outputs:

Input:'A space-separated list of percent grades corresponding to the student.'
Output:type array, items number, format None, collectionFormat ssv
Input:'This should contain the email of the sender.'
Output:type string, items None, format email, collectionFormat None
Input:'This value should be true if the assignment is available for regrade.'
Output:type boolean, items None, format None, collectionFormat None
Input:'A URL containing the website for evaluation.'
Output:type string, items None, format url, collectionFormat None
Input:'The date of the contest. The date must be within the last three months.'
Output:type string, items None, format date, collectionFormat None
Input:'The time that the project must be completed. Use Eastern Standard Timezone (EST).'
Output:type string, items None, format date-time, collectionFormat None
Input:'A list of region codes.'
Output:type array, items None, format None, collectionFormat None
Input:An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) or the string `from_token`.
If a country code is specified, only content that is playable in that market is returned.
**Note** :
- Playlist results are not affected by the market parameter.
- If market is set to `from_token`, and a valid access token is specified in the request header, only content playable in the country associated with the user account, is returned.
- Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/). A user must grant access to the `user-read-private` scope prior to when the access token is issued.
Output:",None
market,0.2,256,"
Identify the API parameter object by the grouping of its ""name"" and ""description"". Analyze the parameter description and extract logical constraints
in the provided format. Evaluate each case and determine whether it is applicable. Strictly follow the format and make no inferences. Only consider constraints
that are strictly required. Interpret the description in the least constraining manner, and assume Case 1 unless the other cases are obvious:

Case 1: The description isn't definitive about parameter requirements. Output ""None"".
Case 2: The description states the parameter ""name"" is required. Output: ""REQUIRED: name"". 
Case 3: The description states that parameter ""name"" or another parameter ""name"" is required. Output: ""Or(name, name)""
Case 4: The description states that given a set of parameters name, name_2, . . . , name_n, zero or one can be present in the API call: Output: ""ZeroOrOne(name, name_2, ... name_n)""
Case 5: The description states that given a set of parameters name, name_2, . . . , name_n, exactly one must be present in the API call: Output: ""OnlyOne(name, name_2, ... name_n)""
Case 6: The description states that given a set of parameters name, name_2, . . . , name_n, all of them or none must be present in the API call: Output: ""AllOrNone(name, name_2, ... name_n)""
Case 7: The description states that there is a relational relationship between some parameters: Output: ""name >= name_2"", where the standard relational operators can be used
Case 8: The description states that there is an arithmetic relationship between the value of parameters: Output: ""name_1 + name_2 <= value"", where the standard arithmetic operators can be used
Case 9: The description states there is a conditional relationship between parameters: Output: ""IF name THEN name_2"", where the standard logical operators can be used
Case 10: The description states that there exists a complex relationship between parameters, you can combine rules from the grammar to express a statement: Output: ""IF name==value THEN OnlyOne(name_2 AND name_3, name_4 AND name_5);

The grammar for statements is succinctly defined as follows:

Model:
    Dependency*;
Dependency:
    RelationalDependency | ArithmeticDependency |
    ConditionalDependency | PredefinedDependency;
RelationalDependency:
    Param RelationalOperator Param;
ArithmeticDependency:
    Operation RelationalOperator DOUBLE;
Operation:
    Param OperationContinuation |
    '(' Operation ')' OperationContinuation?;
OperationContinuation:
    ArithmeticOperator (Param | Operation);
ConditionalDependency:
    'IF' Predicate 'THEN' Predicate;
Predicate:
    Clause ClauseContinuation?;
Clause:
    (Term | RelationalDependency | ArithmeticDependency
    | PredefinedDependency) | 'NOT'? '(' Predicate ')';
Term:
    'NOT'? (Param | ParamValueRelation);
Param:
    ID | '[' ID ']';
ParamValueRelation:
    Param '==' STRING('|'STRING)* |
    Param 'LIKE' PATTERN_STRING | Param '==' BOOLEAN |
    Param RelationalOperator DOUBLE;
ClauseContinuation:
    ('AND' | 'OR') Predicate;
PredefinedDependency:
    'NOT'? ('Or' | 'OnlyOne' | 'AllOrNone' |
    'ZeroOrOne') '(' Clause (',' Clause)+ ')';
RelationalOperator:
    '<' | '>' | '<=' | '>=' | '==' | '!=';
ArithmeticOperator:
    '+' | '-' | '*' | '/';

If there are multiple dependency statements, return each one on a new line. Do not include any other text. Do not create dependencies on expected API responses.
Assume any ""
"" values in the input indicate either new lines or spaces. 
Here are some examples of expected outputs:

Input:
name: text 
description: The text to be checked. This or 'data' is required.
Output:Or(text, data);
Input: 
     name: idea
     description: 'An idea for a project. This and 'rating' are required.'
Output:OnlyOne(idea AND rating);
Input:
      name: partID
      description: 'The ID of the part. If partModel is specified partID must be specified'
Output:IF partModel THEN partID;
Input:
       name: language 
       description: The language of the client, not required if the country-code is USA or CAN.
Output:IF country-code!='USA' OR country-code=='CAN' THEN language;
Input:
        name: cost
        description: The cost of the product, this - profit must be greater than 500.
Output:cost - profit > 500;
Input:An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) or the string `from_token`.
If a country code is specified, only content that is playable in that market is returned.
**Note** :
- Playlist results are not affected by the market parameter.
- If market is set to `from_token`, and a valid access token is specified in the request header, only content playable in the country associated with the user account, is returned.
- Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/). A user must grant access to the `user-read-private` scope prior to when the access token is issued.
Output:",None
limit,0.2,256,"
Analyze the provided API parameter description, and extract any example values for the parameter mentioned in the description. 
Then, generate a few additional example values that correspond to, or are in the same category as the provided values.
If there are no example values provided, simply generate values corresponding to the description, and always generate values when possible.  
If generating example values is not possible, return None. Consider the following cases: 

Case 1: The description contains example values USA, CAN, ZWE: Output: ""PROVIDED: USA, CAN, ZWE +++ GENERATED: BRA, FRA, GER ...""
Case 2: The description does not explicitly mention example values: Output: ""PROVIDED: None +++ GENERATED: BRA, FRA, GER, USA ...""
Case 3: The description does not explicitly mention example values, and it is not possible to generate example values: Output: ""None""

Assume any ""
"" values in the input represent spaces or new lines. Do not output any ""
"" strings.

Here are some examples of inputs and expected outputs:
Input:'The country code associated with the country. Examples are CAD, USD, etc...'
Output:PROVIDED: CAD, USD +++ GENERATED: AFG, ALA, ALB, DZA, ASM, AND, AGO, AIA, ATA, ATG, ARG, ARM, ABW, AUS, AUT, AZE, BHS, BHR, BGD, BRB, BLR, BEL, 
BLZ, BEN, BMU, BTN, BOL, BES, BIH, BWA, BVT, BRA, IOT, BRN, BGR, BFA, BDI, CPV, KHM, CMR, CAN, CYM, CAF, TCD, 
CHL, CHN, CXR, CCK, COL, COM, COG, COD, COK, CRI, CIV, HRV, CUB, CUW, CYP, CZE, DNK, DJI, DMA, DOM, ECU, EGY, 
SLV, GNQ, ERI, EST, SWZ, ETH, FLK, FRO, FJI, FIN, FRA, GUF, PYF, ATF, GAB, GMB, GEO, DEU, GHA, GIB, GRC, GRL, 
GRD, GLP, GUM, GTM, GGY, GIN, GNB, GUY, HTI, HMD, VAT, HND, HKG, HUN, ISL, IND, IDN, IRN, IRQ, IRL, IMN, ISR, 
ITA, JAM, JPN, JEY, JOR, KAZ, KEN, KIR, PRK, KOR, KWT, KGZ, LAO, LVA, LBN, LSO, LBR, LBY, LIE, LTU, LUX, MAC, 
MDG, MWI, MYS, MDV, MLI, MLT, MHL, MTQ, MRT, MUS, MYT, MEX, FSM, MDA, MCO, MNG, MNE, MSR, MAR, MOZ, MMR, NAM, 
NRU, NPL, NLD, NCL, NZL, NIC, NER, NGA, NIU, NFK, MKD, MNP, NOR, OMN, PAK, PLW, PSE, PAN, PNG, PRY, PER, PHL, 
PCN, POL, PRT, PRI, QAT, REU, ROU, RUS, RWA, BLM, SHN, KNA, LCA, MAF, SPM, VCT, WSM, SMR, STP, SAU, SEN, SRB, 
SYC, SLE, SGP, SXM, SVK, SVN, SLB, SOM, ZAF, SGS, SSD, ESP, LKA, SDN, SUR, SJM, SWE, CHE, SYR, TWN, TJK, TZA, 
THA, TLS, TGO, TKL, TON, TTO, TUN, TUR, TKM, TCA, TUV, UGA, UKR, ARE, GBR, USA, UMI, URY, UZB, VUT, VEN, VNM, 
VGB, VIR, WLF, ESH, YEM, ZMB, ZWE
Input:'The numbers for the percent grades must be to one decimal place (such as 10.6).'
Output:PROVIDED: 10.6 +++ GENERATED: 0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0, 2.1, 
2.2, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8, 2.9, 3.0, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6, 3.7, 3.8, 3.9, 4.0, 4.1, 4.2, 4.3, 4.4, 
4.5, 4.6, 4.7, 4.8, 4.9, 5.0, 5.1, 5.2, 5.3, 10.0, 99.9, 100.0
Input:'The title of the book to be rated.'
Output:PROVIDED: None +++ GENERATED: To Kill a Mockingbird, 1984, Pride and Prejudice, The Great Gatsby, Moby-Dick, The Catcher in the Rye, Harry Potter 
and the Sorcerer's Stone, The Lord of the Rings, One Hundred Years of Solitude, Brave New World, Sapiens: A Brief 
History of Humankind, The Immortal Life of Henrietta Lacks, Thinking, Fast and Slow, The Wright Brothers, The Diary of 
a Young Girl, Educated, The Art of War, The 7 Habits of Highly Effective People, Freakonomics, Quiet: The Power of 
Introverts in a World That Can't Stop Talking, Dune, Ender's Game, Neuromancer
Input:'The value for the number of products to consume. It must be greater than 12 and less than 50.'
Output:PROVIDED: None +++ GENERATED: None
Input:'The number of bank accounts associated. Cannot be less than 0.'
Output:PROVIDED: None +++ GENERATED: None
Input:Maximum number of results to return.
Default: 20
Minimum: 1
Maximum: 50
**Note** : The limit is applied within each type, not on the total response.
For example, if the limit value is 3 and the type is `artist,album`, the response contains 3 artists and 3 albums.
Output:",None
limit,0.2,256,"
Analyze the provided API parameter description and first estimate the parameter type. Then, according to the type, apply the following to determine restrictions on the parameter input:
If it is a number, determine if the description mentions minimum, maximum, or default possible values and output: ""min [minimum], max [maximum], default [default]"". 
If it's a string, word, or code, determine if the description mentions minimum or maximum possible character amounts or a default value, and output: ""minLength [minimum], maxLength [maximum], default [default]"". 
If it's an array or list, determine if the description mentions minimum or maximum possible list lengths or a default value, and output: ""minItems [minimum], maxItems [maximum], default [default]"".
If it's an object, determine if the description mentions minimum or maximum possible numbers of object properties or a default value, and output: ""minProperties [minimum], maxProperties [maximum], default [default]"".
If it is any other data type where there is a default value provided, output: ""min None, max None, default [default]"".
If you are unable to determine any minimum, maximum, or default restrictions, output ""None"". If you are able to determine only one either the minimum or maximum, output the undetermined value as ""None"".

Assume any ""
"" values in the input indicate either new lines or spaces. 

Here are some examples of inputs and expected outputs:

Input:'An idea for a project. This and 'rating' are required.'
Output:None
Input:'The maximum value is 50. If nothing is put in, default to 0.'
Output:min None, max 50, default 0
Input:'The timer counter. The value must be between 15.0 and 120.'
Output:min 15.0, max 120, default None
Input:'The input range. The smallest value possible is -120.8. The largest should be 179.652.'
Output:min -120.8, max 179.652, default None
Input:'The number of items to be investigated. The maximum is 9,999.99'
Output:min None, max 9999.99, default None
Input:'The name of the movie. The movie name cannot be shorter than 10 characters and longer than 20 characters.'
Output:minLength 10, maxLength 20, default None
Input:'The country code which can be 1-letter, 2-letter, or 3-letter.'
Output:minLength 1, maxLength 3, default None
Input:'A supplied language code that can either be 2-letter or 3-letter which is used to parse through a list of common phrases.'
Output:minLength 2, maxLength 3, default None
Input:'Search via county areas.'
Output:None
Input:'Identifies synonyms through word inputs.'
Output:None
Input:'After searching through a list of ISO country codes, input 2-letter or 3-letter codes to find their data.'
Output:minLength 2, maxLength 3, default None
Input:Maximum number of results to return.
Default: 20
Minimum: 1
Maximum: 50
**Note** : The limit is applied within each type, not on the total response.
For example, if the limit value is 3 and the type is `artist,album`, the response contains 3 artists and 3 albums.
Output:","min 1, max 50, default 20"
limit,0.2,256,"
Analyze the provided API parameter description and determine whether it clearly identifies the parameter's data type 
or formatting. 
The list of possible data types are as follows: string, number, integer, boolean, array, and object.
The list of format options are as follows: time, date, password, byte, binary, email, uuid, uri, url, hostname, ipv4, and ipv6. Use the types and formats available for the OpenAPI Specification. 
A list of collectionFormat types are as follows: csv, ssv, and pipes.
If the data type is an array, attempt to identify its item type. 
Output the answer as follows: ""type [type], items [item type], format [format], collectionFormat [collectionFormat]"". Output None when unable to determine any of the categories. 
For example, only output a non-None ""item type"" if the ""type"" is array.

Assume any ""
"" values in the input indicate either new lines or spaces. 

Here are some examples of inputs and expected outputs:

Input:'A space-separated list of percent grades corresponding to the student.'
Output:type array, items number, format None, collectionFormat ssv
Input:'This should contain the email of the sender.'
Output:type string, items None, format email, collectionFormat None
Input:'This value should be true if the assignment is available for regrade.'
Output:type boolean, items None, format None, collectionFormat None
Input:'A URL containing the website for evaluation.'
Output:type string, items None, format url, collectionFormat None
Input:'The date of the contest. The date must be within the last three months.'
Output:type string, items None, format date, collectionFormat None
Input:'The time that the project must be completed. Use Eastern Standard Timezone (EST).'
Output:type string, items None, format date-time, collectionFormat None
Input:'A list of region codes.'
Output:type array, items None, format None, collectionFormat None
Input:Maximum number of results to return.
Default: 20
Minimum: 1
Maximum: 50
**Note** : The limit is applied within each type, not on the total response.
For example, if the limit value is 3 and the type is `artist,album`, the response contains 3 artists and 3 albums.
Output:",None
limit,0.2,256,"
Identify the API parameter object by the grouping of its ""name"" and ""description"". Analyze the parameter description and extract logical constraints
in the provided format. Evaluate each case and determine whether it is applicable. Strictly follow the format and make no inferences. Only consider constraints
that are strictly required. Interpret the description in the least constraining manner, and assume Case 1 unless the other cases are obvious:

Case 1: The description isn't definitive about parameter requirements. Output ""None"".
Case 2: The description states the parameter ""name"" is required. Output: ""REQUIRED: name"". 
Case 3: The description states that parameter ""name"" or another parameter ""name"" is required. Output: ""Or(name, name)""
Case 4: The description states that given a set of parameters name, name_2, . . . , name_n, zero or one can be present in the API call: Output: ""ZeroOrOne(name, name_2, ... name_n)""
Case 5: The description states that given a set of parameters name, name_2, . . . , name_n, exactly one must be present in the API call: Output: ""OnlyOne(name, name_2, ... name_n)""
Case 6: The description states that given a set of parameters name, name_2, . . . , name_n, all of them or none must be present in the API call: Output: ""AllOrNone(name, name_2, ... name_n)""
Case 7: The description states that there is a relational relationship between some parameters: Output: ""name >= name_2"", where the standard relational operators can be used
Case 8: The description states that there is an arithmetic relationship between the value of parameters: Output: ""name_1 + name_2 <= value"", where the standard arithmetic operators can be used
Case 9: The description states there is a conditional relationship between parameters: Output: ""IF name THEN name_2"", where the standard logical operators can be used
Case 10: The description states that there exists a complex relationship between parameters, you can combine rules from the grammar to express a statement: Output: ""IF name==value THEN OnlyOne(name_2 AND name_3, name_4 AND name_5);

The grammar for statements is succinctly defined as follows:

Model:
    Dependency*;
Dependency:
    RelationalDependency | ArithmeticDependency |
    ConditionalDependency | PredefinedDependency;
RelationalDependency:
    Param RelationalOperator Param;
ArithmeticDependency:
    Operation RelationalOperator DOUBLE;
Operation:
    Param OperationContinuation |
    '(' Operation ')' OperationContinuation?;
OperationContinuation:
    ArithmeticOperator (Param | Operation);
ConditionalDependency:
    'IF' Predicate 'THEN' Predicate;
Predicate:
    Clause ClauseContinuation?;
Clause:
    (Term | RelationalDependency | ArithmeticDependency
    | PredefinedDependency) | 'NOT'? '(' Predicate ')';
Term:
    'NOT'? (Param | ParamValueRelation);
Param:
    ID | '[' ID ']';
ParamValueRelation:
    Param '==' STRING('|'STRING)* |
    Param 'LIKE' PATTERN_STRING | Param '==' BOOLEAN |
    Param RelationalOperator DOUBLE;
ClauseContinuation:
    ('AND' | 'OR') Predicate;
PredefinedDependency:
    'NOT'? ('Or' | 'OnlyOne' | 'AllOrNone' |
    'ZeroOrOne') '(' Clause (',' Clause)+ ')';
RelationalOperator:
    '<' | '>' | '<=' | '>=' | '==' | '!=';
ArithmeticOperator:
    '+' | '-' | '*' | '/';

If there are multiple dependency statements, return each one on a new line. Do not include any other text. Do not create dependencies on expected API responses.
Assume any ""
"" values in the input indicate either new lines or spaces. 
Here are some examples of expected outputs:

Input:
name: text 
description: The text to be checked. This or 'data' is required.
Output:Or(text, data);
Input: 
     name: idea
     description: 'An idea for a project. This and 'rating' are required.'
Output:OnlyOne(idea AND rating);
Input:
      name: partID
      description: 'The ID of the part. If partModel is specified partID must be specified'
Output:IF partModel THEN partID;
Input:
       name: language 
       description: The language of the client, not required if the country-code is USA or CAN.
Output:IF country-code!='USA' OR country-code=='CAN' THEN language;
Input:
        name: cost
        description: The cost of the product, this - profit must be greater than 500.
Output:cost - profit > 500;
Input:Maximum number of results to return.
Default: 20
Minimum: 1
Maximum: 50
**Note** : The limit is applied within each type, not on the total response.
For example, if the limit value is 3 and the type is `artist,album`, the response contains 3 artists and 3 albums.
Output:",None
offset,0.2,256,"
Analyze the provided API parameter description, and extract any example values for the parameter mentioned in the description. 
Then, generate a few additional example values that correspond to, or are in the same category as the provided values.
If there are no example values provided, simply generate values corresponding to the description, and always generate values when possible.  
If generating example values is not possible, return None. Consider the following cases: 

Case 1: The description contains example values USA, CAN, ZWE: Output: ""PROVIDED: USA, CAN, ZWE +++ GENERATED: BRA, FRA, GER ...""
Case 2: The description does not explicitly mention example values: Output: ""PROVIDED: None +++ GENERATED: BRA, FRA, GER, USA ...""
Case 3: The description does not explicitly mention example values, and it is not possible to generate example values: Output: ""None""

Assume any ""
"" values in the input represent spaces or new lines. Do not output any ""
"" strings.

Here are some examples of inputs and expected outputs:
Input:'The country code associated with the country. Examples are CAD, USD, etc...'
Output:PROVIDED: CAD, USD +++ GENERATED: AFG, ALA, ALB, DZA, ASM, AND, AGO, AIA, ATA, ATG, ARG, ARM, ABW, AUS, AUT, AZE, BHS, BHR, BGD, BRB, BLR, BEL, 
BLZ, BEN, BMU, BTN, BOL, BES, BIH, BWA, BVT, BRA, IOT, BRN, BGR, BFA, BDI, CPV, KHM, CMR, CAN, CYM, CAF, TCD, 
CHL, CHN, CXR, CCK, COL, COM, COG, COD, COK, CRI, CIV, HRV, CUB, CUW, CYP, CZE, DNK, DJI, DMA, DOM, ECU, EGY, 
SLV, GNQ, ERI, EST, SWZ, ETH, FLK, FRO, FJI, FIN, FRA, GUF, PYF, ATF, GAB, GMB, GEO, DEU, GHA, GIB, GRC, GRL, 
GRD, GLP, GUM, GTM, GGY, GIN, GNB, GUY, HTI, HMD, VAT, HND, HKG, HUN, ISL, IND, IDN, IRN, IRQ, IRL, IMN, ISR, 
ITA, JAM, JPN, JEY, JOR, KAZ, KEN, KIR, PRK, KOR, KWT, KGZ, LAO, LVA, LBN, LSO, LBR, LBY, LIE, LTU, LUX, MAC, 
MDG, MWI, MYS, MDV, MLI, MLT, MHL, MTQ, MRT, MUS, MYT, MEX, FSM, MDA, MCO, MNG, MNE, MSR, MAR, MOZ, MMR, NAM, 
NRU, NPL, NLD, NCL, NZL, NIC, NER, NGA, NIU, NFK, MKD, MNP, NOR, OMN, PAK, PLW, PSE, PAN, PNG, PRY, PER, PHL, 
PCN, POL, PRT, PRI, QAT, REU, ROU, RUS, RWA, BLM, SHN, KNA, LCA, MAF, SPM, VCT, WSM, SMR, STP, SAU, SEN, SRB, 
SYC, SLE, SGP, SXM, SVK, SVN, SLB, SOM, ZAF, SGS, SSD, ESP, LKA, SDN, SUR, SJM, SWE, CHE, SYR, TWN, TJK, TZA, 
THA, TLS, TGO, TKL, TON, TTO, TUN, TUR, TKM, TCA, TUV, UGA, UKR, ARE, GBR, USA, UMI, URY, UZB, VUT, VEN, VNM, 
VGB, VIR, WLF, ESH, YEM, ZMB, ZWE
Input:'The numbers for the percent grades must be to one decimal place (such as 10.6).'
Output:PROVIDED: 10.6 +++ GENERATED: 0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0, 2.1, 
2.2, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8, 2.9, 3.0, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6, 3.7, 3.8, 3.9, 4.0, 4.1, 4.2, 4.3, 4.4, 
4.5, 4.6, 4.7, 4.8, 4.9, 5.0, 5.1, 5.2, 5.3, 10.0, 99.9, 100.0
Input:'The title of the book to be rated.'
Output:PROVIDED: None +++ GENERATED: To Kill a Mockingbird, 1984, Pride and Prejudice, The Great Gatsby, Moby-Dick, The Catcher in the Rye, Harry Potter 
and the Sorcerer's Stone, The Lord of the Rings, One Hundred Years of Solitude, Brave New World, Sapiens: A Brief 
History of Humankind, The Immortal Life of Henrietta Lacks, Thinking, Fast and Slow, The Wright Brothers, The Diary of 
a Young Girl, Educated, The Art of War, The 7 Habits of Highly Effective People, Freakonomics, Quiet: The Power of 
Introverts in a World That Can't Stop Talking, Dune, Ender's Game, Neuromancer
Input:'The value for the number of products to consume. It must be greater than 12 and less than 50.'
Output:PROVIDED: None +++ GENERATED: None
Input:'The number of bank accounts associated. Cannot be less than 0.'
Output:PROVIDED: None +++ GENERATED: None
Input:The index of the first result to return.
Default: 0 (the first result).
Maximum offset (including limit): 1,000.
Use with limit to get the next page of search results.
Output:",None
offset,0.2,256,"
Analyze the provided API parameter description and first estimate the parameter type. Then, according to the type, apply the following to determine restrictions on the parameter input:
If it is a number, determine if the description mentions minimum, maximum, or default possible values and output: ""min [minimum], max [maximum], default [default]"". 
If it's a string, word, or code, determine if the description mentions minimum or maximum possible character amounts or a default value, and output: ""minLength [minimum], maxLength [maximum], default [default]"". 
If it's an array or list, determine if the description mentions minimum or maximum possible list lengths or a default value, and output: ""minItems [minimum], maxItems [maximum], default [default]"".
If it's an object, determine if the description mentions minimum or maximum possible numbers of object properties or a default value, and output: ""minProperties [minimum], maxProperties [maximum], default [default]"".
If it is any other data type where there is a default value provided, output: ""min None, max None, default [default]"".
If you are unable to determine any minimum, maximum, or default restrictions, output ""None"". If you are able to determine only one either the minimum or maximum, output the undetermined value as ""None"".

Assume any ""
"" values in the input indicate either new lines or spaces. 

Here are some examples of inputs and expected outputs:

Input:'An idea for a project. This and 'rating' are required.'
Output:None
Input:'The maximum value is 50. If nothing is put in, default to 0.'
Output:min None, max 50, default 0
Input:'The timer counter. The value must be between 15.0 and 120.'
Output:min 15.0, max 120, default None
Input:'The input range. The smallest value possible is -120.8. The largest should be 179.652.'
Output:min -120.8, max 179.652, default None
Input:'The number of items to be investigated. The maximum is 9,999.99'
Output:min None, max 9999.99, default None
Input:'The name of the movie. The movie name cannot be shorter than 10 characters and longer than 20 characters.'
Output:minLength 10, maxLength 20, default None
Input:'The country code which can be 1-letter, 2-letter, or 3-letter.'
Output:minLength 1, maxLength 3, default None
Input:'A supplied language code that can either be 2-letter or 3-letter which is used to parse through a list of common phrases.'
Output:minLength 2, maxLength 3, default None
Input:'Search via county areas.'
Output:None
Input:'Identifies synonyms through word inputs.'
Output:None
Input:'After searching through a list of ISO country codes, input 2-letter or 3-letter codes to find their data.'
Output:minLength 2, maxLength 3, default None
Input:The index of the first result to return.
Default: 0 (the first result).
Maximum offset (including limit): 1,000.
Use with limit to get the next page of search results.
Output:","min 0, max 1000, default 0"
offset,0.2,256,"
Analyze the provided API parameter description and determine whether it clearly identifies the parameter's data type 
or formatting. 
The list of possible data types are as follows: string, number, integer, boolean, array, and object.
The list of format options are as follows: time, date, password, byte, binary, email, uuid, uri, url, hostname, ipv4, and ipv6. Use the types and formats available for the OpenAPI Specification. 
A list of collectionFormat types are as follows: csv, ssv, and pipes.
If the data type is an array, attempt to identify its item type. 
Output the answer as follows: ""type [type], items [item type], format [format], collectionFormat [collectionFormat]"". Output None when unable to determine any of the categories. 
For example, only output a non-None ""item type"" if the ""type"" is array.

Assume any ""
"" values in the input indicate either new lines or spaces. 

Here are some examples of inputs and expected outputs:

Input:'A space-separated list of percent grades corresponding to the student.'
Output:type array, items number, format None, collectionFormat ssv
Input:'This should contain the email of the sender.'
Output:type string, items None, format email, collectionFormat None
Input:'This value should be true if the assignment is available for regrade.'
Output:type boolean, items None, format None, collectionFormat None
Input:'A URL containing the website for evaluation.'
Output:type string, items None, format url, collectionFormat None
Input:'The date of the contest. The date must be within the last three months.'
Output:type string, items None, format date, collectionFormat None
Input:'The time that the project must be completed. Use Eastern Standard Timezone (EST).'
Output:type string, items None, format date-time, collectionFormat None
Input:'A list of region codes.'
Output:type array, items None, format None, collectionFormat None
Input:The index of the first result to return.
Default: 0 (the first result).
Maximum offset (including limit): 1,000.
Use with limit to get the next page of search results.
Output:",None
offset,0.2,256,"
Identify the API parameter object by the grouping of its ""name"" and ""description"". Analyze the parameter description and extract logical constraints
in the provided format. Evaluate each case and determine whether it is applicable. Strictly follow the format and make no inferences. Only consider constraints
that are strictly required. Interpret the description in the least constraining manner, and assume Case 1 unless the other cases are obvious:

Case 1: The description isn't definitive about parameter requirements. Output ""None"".
Case 2: The description states the parameter ""name"" is required. Output: ""REQUIRED: name"". 
Case 3: The description states that parameter ""name"" or another parameter ""name"" is required. Output: ""Or(name, name)""
Case 4: The description states that given a set of parameters name, name_2, . . . , name_n, zero or one can be present in the API call: Output: ""ZeroOrOne(name, name_2, ... name_n)""
Case 5: The description states that given a set of parameters name, name_2, . . . , name_n, exactly one must be present in the API call: Output: ""OnlyOne(name, name_2, ... name_n)""
Case 6: The description states that given a set of parameters name, name_2, . . . , name_n, all of them or none must be present in the API call: Output: ""AllOrNone(name, name_2, ... name_n)""
Case 7: The description states that there is a relational relationship between some parameters: Output: ""name >= name_2"", where the standard relational operators can be used
Case 8: The description states that there is an arithmetic relationship between the value of parameters: Output: ""name_1 + name_2 <= value"", where the standard arithmetic operators can be used
Case 9: The description states there is a conditional relationship between parameters: Output: ""IF name THEN name_2"", where the standard logical operators can be used
Case 10: The description states that there exists a complex relationship between parameters, you can combine rules from the grammar to express a statement: Output: ""IF name==value THEN OnlyOne(name_2 AND name_3, name_4 AND name_5);

The grammar for statements is succinctly defined as follows:

Model:
    Dependency*;
Dependency:
    RelationalDependency | ArithmeticDependency |
    ConditionalDependency | PredefinedDependency;
RelationalDependency:
    Param RelationalOperator Param;
ArithmeticDependency:
    Operation RelationalOperator DOUBLE;
Operation:
    Param OperationContinuation |
    '(' Operation ')' OperationContinuation?;
OperationContinuation:
    ArithmeticOperator (Param | Operation);
ConditionalDependency:
    'IF' Predicate 'THEN' Predicate;
Predicate:
    Clause ClauseContinuation?;
Clause:
    (Term | RelationalDependency | ArithmeticDependency
    | PredefinedDependency) | 'NOT'? '(' Predicate ')';
Term:
    'NOT'? (Param | ParamValueRelation);
Param:
    ID | '[' ID ']';
ParamValueRelation:
    Param '==' STRING('|'STRING)* |
    Param 'LIKE' PATTERN_STRING | Param '==' BOOLEAN |
    Param RelationalOperator DOUBLE;
ClauseContinuation:
    ('AND' | 'OR') Predicate;
PredefinedDependency:
    'NOT'? ('Or' | 'OnlyOne' | 'AllOrNone' |
    'ZeroOrOne') '(' Clause (',' Clause)+ ')';
RelationalOperator:
    '<' | '>' | '<=' | '>=' | '==' | '!=';
ArithmeticOperator:
    '+' | '-' | '*' | '/';

If there are multiple dependency statements, return each one on a new line. Do not include any other text. Do not create dependencies on expected API responses.
Assume any ""
"" values in the input indicate either new lines or spaces. 
Here are some examples of expected outputs:

Input:
name: text 
description: The text to be checked. This or 'data' is required.
Output:Or(text, data);
Input: 
     name: idea
     description: 'An idea for a project. This and 'rating' are required.'
Output:OnlyOne(idea AND rating);
Input:
      name: partID
      description: 'The ID of the part. If partModel is specified partID must be specified'
Output:IF partModel THEN partID;
Input:
       name: language 
       description: The language of the client, not required if the country-code is USA or CAN.
Output:IF country-code!='USA' OR country-code=='CAN' THEN language;
Input:
        name: cost
        description: The cost of the product, this - profit must be greater than 500.
Output:cost - profit > 500;
Input:The index of the first result to return.
Default: 0 (the first result).
Maximum offset (including limit): 1,000.
Use with limit to get the next page of search results.
Output:",None
include_external,0.2,256,"
Analyze the provided API parameter description, and extract any example values for the parameter mentioned in the description. 
Then, generate a few additional example values that correspond to, or are in the same category as the provided values.
If there are no example values provided, simply generate values corresponding to the description, and always generate values when possible.  
If generating example values is not possible, return None. Consider the following cases: 

Case 1: The description contains example values USA, CAN, ZWE: Output: ""PROVIDED: USA, CAN, ZWE +++ GENERATED: BRA, FRA, GER ...""
Case 2: The description does not explicitly mention example values: Output: ""PROVIDED: None +++ GENERATED: BRA, FRA, GER, USA ...""
Case 3: The description does not explicitly mention example values, and it is not possible to generate example values: Output: ""None""

Assume any ""
"" values in the input represent spaces or new lines. Do not output any ""
"" strings.

Here are some examples of inputs and expected outputs:
Input:'The country code associated with the country. Examples are CAD, USD, etc...'
Output:PROVIDED: CAD, USD +++ GENERATED: AFG, ALA, ALB, DZA, ASM, AND, AGO, AIA, ATA, ATG, ARG, ARM, ABW, AUS, AUT, AZE, BHS, BHR, BGD, BRB, BLR, BEL, 
BLZ, BEN, BMU, BTN, BOL, BES, BIH, BWA, BVT, BRA, IOT, BRN, BGR, BFA, BDI, CPV, KHM, CMR, CAN, CYM, CAF, TCD, 
CHL, CHN, CXR, CCK, COL, COM, COG, COD, COK, CRI, CIV, HRV, CUB, CUW, CYP, CZE, DNK, DJI, DMA, DOM, ECU, EGY, 
SLV, GNQ, ERI, EST, SWZ, ETH, FLK, FRO, FJI, FIN, FRA, GUF, PYF, ATF, GAB, GMB, GEO, DEU, GHA, GIB, GRC, GRL, 
GRD, GLP, GUM, GTM, GGY, GIN, GNB, GUY, HTI, HMD, VAT, HND, HKG, HUN, ISL, IND, IDN, IRN, IRQ, IRL, IMN, ISR, 
ITA, JAM, JPN, JEY, JOR, KAZ, KEN, KIR, PRK, KOR, KWT, KGZ, LAO, LVA, LBN, LSO, LBR, LBY, LIE, LTU, LUX, MAC, 
MDG, MWI, MYS, MDV, MLI, MLT, MHL, MTQ, MRT, MUS, MYT, MEX, FSM, MDA, MCO, MNG, MNE, MSR, MAR, MOZ, MMR, NAM, 
NRU, NPL, NLD, NCL, NZL, NIC, NER, NGA, NIU, NFK, MKD, MNP, NOR, OMN, PAK, PLW, PSE, PAN, PNG, PRY, PER, PHL, 
PCN, POL, PRT, PRI, QAT, REU, ROU, RUS, RWA, BLM, SHN, KNA, LCA, MAF, SPM, VCT, WSM, SMR, STP, SAU, SEN, SRB, 
SYC, SLE, SGP, SXM, SVK, SVN, SLB, SOM, ZAF, SGS, SSD, ESP, LKA, SDN, SUR, SJM, SWE, CHE, SYR, TWN, TJK, TZA, 
THA, TLS, TGO, TKL, TON, TTO, TUN, TUR, TKM, TCA, TUV, UGA, UKR, ARE, GBR, USA, UMI, URY, UZB, VUT, VEN, VNM, 
VGB, VIR, WLF, ESH, YEM, ZMB, ZWE
Input:'The numbers for the percent grades must be to one decimal place (such as 10.6).'
Output:PROVIDED: 10.6 +++ GENERATED: 0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0, 2.1, 
2.2, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8, 2.9, 3.0, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6, 3.7, 3.8, 3.9, 4.0, 4.1, 4.2, 4.3, 4.4, 
4.5, 4.6, 4.7, 4.8, 4.9, 5.0, 5.1, 5.2, 5.3, 10.0, 99.9, 100.0
Input:'The title of the book to be rated.'
Output:PROVIDED: None +++ GENERATED: To Kill a Mockingbird, 1984, Pride and Prejudice, The Great Gatsby, Moby-Dick, The Catcher in the Rye, Harry Potter 
and the Sorcerer's Stone, The Lord of the Rings, One Hundred Years of Solitude, Brave New World, Sapiens: A Brief 
History of Humankind, The Immortal Life of Henrietta Lacks, Thinking, Fast and Slow, The Wright Brothers, The Diary of 
a Young Girl, Educated, The Art of War, The 7 Habits of Highly Effective People, Freakonomics, Quiet: The Power of 
Introverts in a World That Can't Stop Talking, Dune, Ender's Game, Neuromancer
Input:'The value for the number of products to consume. It must be greater than 12 and less than 50.'
Output:PROVIDED: None +++ GENERATED: None
Input:'The number of bank accounts associated. Cannot be less than 0.'
Output:PROVIDED: None +++ GENERATED: None
Input:Possible values: *audio*
If *include_external=audio* is specified the response will include any relevant audio content that is hosted externally.
By default external content is filtered out from responses.
Output:",None
include_external,0.2,256,"
Analyze the provided API parameter description and first estimate the parameter type. Then, according to the type, apply the following to determine restrictions on the parameter input:
If it is a number, determine if the description mentions minimum, maximum, or default possible values and output: ""min [minimum], max [maximum], default [default]"". 
If it's a string, word, or code, determine if the description mentions minimum or maximum possible character amounts or a default value, and output: ""minLength [minimum], maxLength [maximum], default [default]"". 
If it's an array or list, determine if the description mentions minimum or maximum possible list lengths or a default value, and output: ""minItems [minimum], maxItems [maximum], default [default]"".
If it's an object, determine if the description mentions minimum or maximum possible numbers of object properties or a default value, and output: ""minProperties [minimum], maxProperties [maximum], default [default]"".
If it is any other data type where there is a default value provided, output: ""min None, max None, default [default]"".
If you are unable to determine any minimum, maximum, or default restrictions, output ""None"". If you are able to determine only one either the minimum or maximum, output the undetermined value as ""None"".

Assume any ""
"" values in the input indicate either new lines or spaces. 

Here are some examples of inputs and expected outputs:

Input:'An idea for a project. This and 'rating' are required.'
Output:None
Input:'The maximum value is 50. If nothing is put in, default to 0.'
Output:min None, max 50, default 0
Input:'The timer counter. The value must be between 15.0 and 120.'
Output:min 15.0, max 120, default None
Input:'The input range. The smallest value possible is -120.8. The largest should be 179.652.'
Output:min -120.8, max 179.652, default None
Input:'The number of items to be investigated. The maximum is 9,999.99'
Output:min None, max 9999.99, default None
Input:'The name of the movie. The movie name cannot be shorter than 10 characters and longer than 20 characters.'
Output:minLength 10, maxLength 20, default None
Input:'The country code which can be 1-letter, 2-letter, or 3-letter.'
Output:minLength 1, maxLength 3, default None
Input:'A supplied language code that can either be 2-letter or 3-letter which is used to parse through a list of common phrases.'
Output:minLength 2, maxLength 3, default None
Input:'Search via county areas.'
Output:None
Input:'Identifies synonyms through word inputs.'
Output:None
Input:'After searching through a list of ISO country codes, input 2-letter or 3-letter codes to find their data.'
Output:minLength 2, maxLength 3, default None
Input:Possible values: *audio*
If *include_external=audio* is specified the response will include any relevant audio content that is hosted externally.
By default external content is filtered out from responses.
Output:","min None, max None, default filtered"
include_external,0.2,256,"
Analyze the provided API parameter description and determine whether it clearly identifies the parameter's data type 
or formatting. 
The list of possible data types are as follows: string, number, integer, boolean, array, and object.
The list of format options are as follows: time, date, password, byte, binary, email, uuid, uri, url, hostname, ipv4, and ipv6. Use the types and formats available for the OpenAPI Specification. 
A list of collectionFormat types are as follows: csv, ssv, and pipes.
If the data type is an array, attempt to identify its item type. 
Output the answer as follows: ""type [type], items [item type], format [format], collectionFormat [collectionFormat]"". Output None when unable to determine any of the categories. 
For example, only output a non-None ""item type"" if the ""type"" is array.

Assume any ""
"" values in the input indicate either new lines or spaces. 

Here are some examples of inputs and expected outputs:

Input:'A space-separated list of percent grades corresponding to the student.'
Output:type array, items number, format None, collectionFormat ssv
Input:'This should contain the email of the sender.'
Output:type string, items None, format email, collectionFormat None
Input:'This value should be true if the assignment is available for regrade.'
Output:type boolean, items None, format None, collectionFormat None
Input:'A URL containing the website for evaluation.'
Output:type string, items None, format url, collectionFormat None
Input:'The date of the contest. The date must be within the last three months.'
Output:type string, items None, format date, collectionFormat None
Input:'The time that the project must be completed. Use Eastern Standard Timezone (EST).'
Output:type string, items None, format date-time, collectionFormat None
Input:'A list of region codes.'
Output:type array, items None, format None, collectionFormat None
Input:Possible values: *audio*
If *include_external=audio* is specified the response will include any relevant audio content that is hosted externally.
By default external content is filtered out from responses.
Output:",None
include_external,0.2,256,"
Identify the API parameter object by the grouping of its ""name"" and ""description"". Analyze the parameter description and extract logical constraints
in the provided format. Evaluate each case and determine whether it is applicable. Strictly follow the format and make no inferences. Only consider constraints
that are strictly required. Interpret the description in the least constraining manner, and assume Case 1 unless the other cases are obvious:

Case 1: The description isn't definitive about parameter requirements. Output ""None"".
Case 2: The description states the parameter ""name"" is required. Output: ""REQUIRED: name"". 
Case 3: The description states that parameter ""name"" or another parameter ""name"" is required. Output: ""Or(name, name)""
Case 4: The description states that given a set of parameters name, name_2, . . . , name_n, zero or one can be present in the API call: Output: ""ZeroOrOne(name, name_2, ... name_n)""
Case 5: The description states that given a set of parameters name, name_2, . . . , name_n, exactly one must be present in the API call: Output: ""OnlyOne(name, name_2, ... name_n)""
Case 6: The description states that given a set of parameters name, name_2, . . . , name_n, all of them or none must be present in the API call: Output: ""AllOrNone(name, name_2, ... name_n)""
Case 7: The description states that there is a relational relationship between some parameters: Output: ""name >= name_2"", where the standard relational operators can be used
Case 8: The description states that there is an arithmetic relationship between the value of parameters: Output: ""name_1 + name_2 <= value"", where the standard arithmetic operators can be used
Case 9: The description states there is a conditional relationship between parameters: Output: ""IF name THEN name_2"", where the standard logical operators can be used
Case 10: The description states that there exists a complex relationship between parameters, you can combine rules from the grammar to express a statement: Output: ""IF name==value THEN OnlyOne(name_2 AND name_3, name_4 AND name_5);

The grammar for statements is succinctly defined as follows:

Model:
    Dependency*;
Dependency:
    RelationalDependency | ArithmeticDependency |
    ConditionalDependency | PredefinedDependency;
RelationalDependency:
    Param RelationalOperator Param;
ArithmeticDependency:
    Operation RelationalOperator DOUBLE;
Operation:
    Param OperationContinuation |
    '(' Operation ')' OperationContinuation?;
OperationContinuation:
    ArithmeticOperator (Param | Operation);
ConditionalDependency:
    'IF' Predicate 'THEN' Predicate;
Predicate:
    Clause ClauseContinuation?;
Clause:
    (Term | RelationalDependency | ArithmeticDependency
    | PredefinedDependency) | 'NOT'? '(' Predicate ')';
Term:
    'NOT'? (Param | ParamValueRelation);
Param:
    ID | '[' ID ']';
ParamValueRelation:
    Param '==' STRING('|'STRING)* |
    Param 'LIKE' PATTERN_STRING | Param '==' BOOLEAN |
    Param RelationalOperator DOUBLE;
ClauseContinuation:
    ('AND' | 'OR') Predicate;
PredefinedDependency:
    'NOT'? ('Or' | 'OnlyOne' | 'AllOrNone' |
    'ZeroOrOne') '(' Clause (',' Clause)+ ')';
RelationalOperator:
    '<' | '>' | '<=' | '>=' | '==' | '!=';
ArithmeticOperator:
    '+' | '-' | '*' | '/';

If there are multiple dependency statements, return each one on a new line. Do not include any other text. Do not create dependencies on expected API responses.
Assume any ""
"" values in the input indicate either new lines or spaces. 
Here are some examples of expected outputs:

Input:
name: text 
description: The text to be checked. This or 'data' is required.
Output:Or(text, data);
Input: 
     name: idea
     description: 'An idea for a project. This and 'rating' are required.'
Output:OnlyOne(idea AND rating);
Input:
      name: partID
      description: 'The ID of the part. If partModel is specified partID must be specified'
Output:IF partModel THEN partID;
Input:
       name: language 
       description: The language of the client, not required if the country-code is USA or CAN.
Output:IF country-code!='USA' OR country-code=='CAN' THEN language;
Input:
        name: cost
        description: The cost of the product, this - profit must be greater than 500.
Output:cost - profit > 500;
Input:Possible values: *audio*
If *include_external=audio* is specified the response will include any relevant audio content that is hosted externally.
By default external content is filtered out from responses.
Output:",None
user_id,0.2,256,"
Analyze the provided API parameter description, and extract any example values for the parameter mentioned in the description. 
Then, generate a few additional example values that correspond to, or are in the same category as the provided values.
If there are no example values provided, simply generate values corresponding to the description, and always generate values when possible.  
If generating example values is not possible, return None. Consider the following cases: 

Case 1: The description contains example values USA, CAN, ZWE: Output: ""PROVIDED: USA, CAN, ZWE +++ GENERATED: BRA, FRA, GER ...""
Case 2: The description does not explicitly mention example values: Output: ""PROVIDED: None +++ GENERATED: BRA, FRA, GER, USA ...""
Case 3: The description does not explicitly mention example values, and it is not possible to generate example values: Output: ""None""

Assume any ""
"" values in the input represent spaces or new lines. Do not output any ""
"" strings.

Here are some examples of inputs and expected outputs:
Input:'The country code associated with the country. Examples are CAD, USD, etc...'
Output:PROVIDED: CAD, USD +++ GENERATED: AFG, ALA, ALB, DZA, ASM, AND, AGO, AIA, ATA, ATG, ARG, ARM, ABW, AUS, AUT, AZE, BHS, BHR, BGD, BRB, BLR, BEL, 
BLZ, BEN, BMU, BTN, BOL, BES, BIH, BWA, BVT, BRA, IOT, BRN, BGR, BFA, BDI, CPV, KHM, CMR, CAN, CYM, CAF, TCD, 
CHL, CHN, CXR, CCK, COL, COM, COG, COD, COK, CRI, CIV, HRV, CUB, CUW, CYP, CZE, DNK, DJI, DMA, DOM, ECU, EGY, 
SLV, GNQ, ERI, EST, SWZ, ETH, FLK, FRO, FJI, FIN, FRA, GUF, PYF, ATF, GAB, GMB, GEO, DEU, GHA, GIB, GRC, GRL, 
GRD, GLP, GUM, GTM, GGY, GIN, GNB, GUY, HTI, HMD, VAT, HND, HKG, HUN, ISL, IND, IDN, IRN, IRQ, IRL, IMN, ISR, 
ITA, JAM, JPN, JEY, JOR, KAZ, KEN, KIR, PRK, KOR, KWT, KGZ, LAO, LVA, LBN, LSO, LBR, LBY, LIE, LTU, LUX, MAC, 
MDG, MWI, MYS, MDV, MLI, MLT, MHL, MTQ, MRT, MUS, MYT, MEX, FSM, MDA, MCO, MNG, MNE, MSR, MAR, MOZ, MMR, NAM, 
NRU, NPL, NLD, NCL, NZL, NIC, NER, NGA, NIU, NFK, MKD, MNP, NOR, OMN, PAK, PLW, PSE, PAN, PNG, PRY, PER, PHL, 
PCN, POL, PRT, PRI, QAT, REU, ROU, RUS, RWA, BLM, SHN, KNA, LCA, MAF, SPM, VCT, WSM, SMR, STP, SAU, SEN, SRB, 
SYC, SLE, SGP, SXM, SVK, SVN, SLB, SOM, ZAF, SGS, SSD, ESP, LKA, SDN, SUR, SJM, SWE, CHE, SYR, TWN, TJK, TZA, 
THA, TLS, TGO, TKL, TON, TTO, TUN, TUR, TKM, TCA, TUV, UGA, UKR, ARE, GBR, USA, UMI, URY, UZB, VUT, VEN, VNM, 
VGB, VIR, WLF, ESH, YEM, ZMB, ZWE
Input:'The numbers for the percent grades must be to one decimal place (such as 10.6).'
Output:PROVIDED: 10.6 +++ GENERATED: 0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0, 2.1, 
2.2, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8, 2.9, 3.0, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6, 3.7, 3.8, 3.9, 4.0, 4.1, 4.2, 4.3, 4.4, 
4.5, 4.6, 4.7, 4.8, 4.9, 5.0, 5.1, 5.2, 5.3, 10.0, 99.9, 100.0
Input:'The title of the book to be rated.'
Output:PROVIDED: None +++ GENERATED: To Kill a Mockingbird, 1984, Pride and Prejudice, The Great Gatsby, Moby-Dick, The Catcher in the Rye, Harry Potter 
and the Sorcerer's Stone, The Lord of the Rings, One Hundred Years of Solitude, Brave New World, Sapiens: A Brief 
History of Humankind, The Immortal Life of Henrietta Lacks, Thinking, Fast and Slow, The Wright Brothers, The Diary of 
a Young Girl, Educated, The Art of War, The 7 Habits of Highly Effective People, Freakonomics, Quiet: The Power of 
Introverts in a World That Can't Stop Talking, Dune, Ender's Game, Neuromancer
Input:'The value for the number of products to consume. It must be greater than 12 and less than 50.'
Output:PROVIDED: None +++ GENERATED: None
Input:'The number of bank accounts associated. Cannot be less than 0.'
Output:PROVIDED: None +++ GENERATED: None
Input:The user's [Spotify user ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids).
Output:",None
user_id,0.2,256,"
Analyze the provided API parameter description and first estimate the parameter type. Then, according to the type, apply the following to determine restrictions on the parameter input:
If it is a number, determine if the description mentions minimum, maximum, or default possible values and output: ""min [minimum], max [maximum], default [default]"". 
If it's a string, word, or code, determine if the description mentions minimum or maximum possible character amounts or a default value, and output: ""minLength [minimum], maxLength [maximum], default [default]"". 
If it's an array or list, determine if the description mentions minimum or maximum possible list lengths or a default value, and output: ""minItems [minimum], maxItems [maximum], default [default]"".
If it's an object, determine if the description mentions minimum or maximum possible numbers of object properties or a default value, and output: ""minProperties [minimum], maxProperties [maximum], default [default]"".
If it is any other data type where there is a default value provided, output: ""min None, max None, default [default]"".
If you are unable to determine any minimum, maximum, or default restrictions, output ""None"". If you are able to determine only one either the minimum or maximum, output the undetermined value as ""None"".

Assume any ""
"" values in the input indicate either new lines or spaces. 

Here are some examples of inputs and expected outputs:

Input:'An idea for a project. This and 'rating' are required.'
Output:None
Input:'The maximum value is 50. If nothing is put in, default to 0.'
Output:min None, max 50, default 0
Input:'The timer counter. The value must be between 15.0 and 120.'
Output:min 15.0, max 120, default None
Input:'The input range. The smallest value possible is -120.8. The largest should be 179.652.'
Output:min -120.8, max 179.652, default None
Input:'The number of items to be investigated. The maximum is 9,999.99'
Output:min None, max 9999.99, default None
Input:'The name of the movie. The movie name cannot be shorter than 10 characters and longer than 20 characters.'
Output:minLength 10, maxLength 20, default None
Input:'The country code which can be 1-letter, 2-letter, or 3-letter.'
Output:minLength 1, maxLength 3, default None
Input:'A supplied language code that can either be 2-letter or 3-letter which is used to parse through a list of common phrases.'
Output:minLength 2, maxLength 3, default None
Input:'Search via county areas.'
Output:None
Input:'Identifies synonyms through word inputs.'
Output:None
Input:'After searching through a list of ISO country codes, input 2-letter or 3-letter codes to find their data.'
Output:minLength 2, maxLength 3, default None
Input:The user's [Spotify user ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids).
Output:",None
user_id,0.2,256,"
Analyze the provided API parameter description and determine whether it clearly identifies the parameter's data type 
or formatting. 
The list of possible data types are as follows: string, number, integer, boolean, array, and object.
The list of format options are as follows: time, date, password, byte, binary, email, uuid, uri, url, hostname, ipv4, and ipv6. Use the types and formats available for the OpenAPI Specification. 
A list of collectionFormat types are as follows: csv, ssv, and pipes.
If the data type is an array, attempt to identify its item type. 
Output the answer as follows: ""type [type], items [item type], format [format], collectionFormat [collectionFormat]"". Output None when unable to determine any of the categories. 
For example, only output a non-None ""item type"" if the ""type"" is array.

Assume any ""
"" values in the input indicate either new lines or spaces. 

Here are some examples of inputs and expected outputs:

Input:'A space-separated list of percent grades corresponding to the student.'
Output:type array, items number, format None, collectionFormat ssv
Input:'This should contain the email of the sender.'
Output:type string, items None, format email, collectionFormat None
Input:'This value should be true if the assignment is available for regrade.'
Output:type boolean, items None, format None, collectionFormat None
Input:'A URL containing the website for evaluation.'
Output:type string, items None, format url, collectionFormat None
Input:'The date of the contest. The date must be within the last three months.'
Output:type string, items None, format date, collectionFormat None
Input:'The time that the project must be completed. Use Eastern Standard Timezone (EST).'
Output:type string, items None, format date-time, collectionFormat None
Input:'A list of region codes.'
Output:type array, items None, format None, collectionFormat None
Input:The user's [Spotify user ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids).
Output:",None
user_id,0.2,256,"
Identify the API parameter object by the grouping of its ""name"" and ""description"". Analyze the parameter description and extract logical constraints
in the provided format. Evaluate each case and determine whether it is applicable. Strictly follow the format and make no inferences. Only consider constraints
that are strictly required. Interpret the description in the least constraining manner, and assume Case 1 unless the other cases are obvious:

Case 1: The description isn't definitive about parameter requirements. Output ""None"".
Case 2: The description states the parameter ""name"" is required. Output: ""REQUIRED: name"". 
Case 3: The description states that parameter ""name"" or another parameter ""name"" is required. Output: ""Or(name, name)""
Case 4: The description states that given a set of parameters name, name_2, . . . , name_n, zero or one can be present in the API call: Output: ""ZeroOrOne(name, name_2, ... name_n)""
Case 5: The description states that given a set of parameters name, name_2, . . . , name_n, exactly one must be present in the API call: Output: ""OnlyOne(name, name_2, ... name_n)""
Case 6: The description states that given a set of parameters name, name_2, . . . , name_n, all of them or none must be present in the API call: Output: ""AllOrNone(name, name_2, ... name_n)""
Case 7: The description states that there is a relational relationship between some parameters: Output: ""name >= name_2"", where the standard relational operators can be used
Case 8: The description states that there is an arithmetic relationship between the value of parameters: Output: ""name_1 + name_2 <= value"", where the standard arithmetic operators can be used
Case 9: The description states there is a conditional relationship between parameters: Output: ""IF name THEN name_2"", where the standard logical operators can be used
Case 10: The description states that there exists a complex relationship between parameters, you can combine rules from the grammar to express a statement: Output: ""IF name==value THEN OnlyOne(name_2 AND name_3, name_4 AND name_5);

The grammar for statements is succinctly defined as follows:

Model:
    Dependency*;
Dependency:
    RelationalDependency | ArithmeticDependency |
    ConditionalDependency | PredefinedDependency;
RelationalDependency:
    Param RelationalOperator Param;
ArithmeticDependency:
    Operation RelationalOperator DOUBLE;
Operation:
    Param OperationContinuation |
    '(' Operation ')' OperationContinuation?;
OperationContinuation:
    ArithmeticOperator (Param | Operation);
ConditionalDependency:
    'IF' Predicate 'THEN' Predicate;
Predicate:
    Clause ClauseContinuation?;
Clause:
    (Term | RelationalDependency | ArithmeticDependency
    | PredefinedDependency) | 'NOT'? '(' Predicate ')';
Term:
    'NOT'? (Param | ParamValueRelation);
Param:
    ID | '[' ID ']';
ParamValueRelation:
    Param '==' STRING('|'STRING)* |
    Param 'LIKE' PATTERN_STRING | Param '==' BOOLEAN |
    Param RelationalOperator DOUBLE;
ClauseContinuation:
    ('AND' | 'OR') Predicate;
PredefinedDependency:
    'NOT'? ('Or' | 'OnlyOne' | 'AllOrNone' |
    'ZeroOrOne') '(' Clause (',' Clause)+ ')';
RelationalOperator:
    '<' | '>' | '<=' | '>=' | '==' | '!=';
ArithmeticOperator:
    '+' | '-' | '*' | '/';

If there are multiple dependency statements, return each one on a new line. Do not include any other text. Do not create dependencies on expected API responses.
Assume any ""
"" values in the input indicate either new lines or spaces. 
Here are some examples of expected outputs:

Input:
name: text 
description: The text to be checked. This or 'data' is required.
Output:Or(text, data);
Input: 
     name: idea
     description: 'An idea for a project. This and 'rating' are required.'
Output:OnlyOne(idea AND rating);
Input:
      name: partID
      description: 'The ID of the part. If partModel is specified partID must be specified'
Output:IF partModel THEN partID;
Input:
       name: language 
       description: The language of the client, not required if the country-code is USA or CAN.
Output:IF country-code!='USA' OR country-code=='CAN' THEN language;
Input:
        name: cost
        description: The cost of the product, this - profit must be greater than 500.
Output:cost - profit > 500;
Input:The user's [Spotify user ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids).
Output:",None
limit,0.2,256,"
Analyze the provided API parameter description, and extract any example values for the parameter mentioned in the description. 
Then, generate a few additional example values that correspond to, or are in the same category as the provided values.
If there are no example values provided, simply generate values corresponding to the description, and always generate values when possible.  
If generating example values is not possible, return None. Consider the following cases: 

Case 1: The description contains example values USA, CAN, ZWE: Output: ""PROVIDED: USA, CAN, ZWE +++ GENERATED: BRA, FRA, GER ...""
Case 2: The description does not explicitly mention example values: Output: ""PROVIDED: None +++ GENERATED: BRA, FRA, GER, USA ...""
Case 3: The description does not explicitly mention example values, and it is not possible to generate example values: Output: ""None""

Assume any ""
"" values in the input represent spaces or new lines. Do not output any ""
"" strings.

Here are some examples of inputs and expected outputs:
Input:'The country code associated with the country. Examples are CAD, USD, etc...'
Output:PROVIDED: CAD, USD +++ GENERATED: AFG, ALA, ALB, DZA, ASM, AND, AGO, AIA, ATA, ATG, ARG, ARM, ABW, AUS, AUT, AZE, BHS, BHR, BGD, BRB, BLR, BEL, 
BLZ, BEN, BMU, BTN, BOL, BES, BIH, BWA, BVT, BRA, IOT, BRN, BGR, BFA, BDI, CPV, KHM, CMR, CAN, CYM, CAF, TCD, 
CHL, CHN, CXR, CCK, COL, COM, COG, COD, COK, CRI, CIV, HRV, CUB, CUW, CYP, CZE, DNK, DJI, DMA, DOM, ECU, EGY, 
SLV, GNQ, ERI, EST, SWZ, ETH, FLK, FRO, FJI, FIN, FRA, GUF, PYF, ATF, GAB, GMB, GEO, DEU, GHA, GIB, GRC, GRL, 
GRD, GLP, GUM, GTM, GGY, GIN, GNB, GUY, HTI, HMD, VAT, HND, HKG, HUN, ISL, IND, IDN, IRN, IRQ, IRL, IMN, ISR, 
ITA, JAM, JPN, JEY, JOR, KAZ, KEN, KIR, PRK, KOR, KWT, KGZ, LAO, LVA, LBN, LSO, LBR, LBY, LIE, LTU, LUX, MAC, 
MDG, MWI, MYS, MDV, MLI, MLT, MHL, MTQ, MRT, MUS, MYT, MEX, FSM, MDA, MCO, MNG, MNE, MSR, MAR, MOZ, MMR, NAM, 
NRU, NPL, NLD, NCL, NZL, NIC, NER, NGA, NIU, NFK, MKD, MNP, NOR, OMN, PAK, PLW, PSE, PAN, PNG, PRY, PER, PHL, 
PCN, POL, PRT, PRI, QAT, REU, ROU, RUS, RWA, BLM, SHN, KNA, LCA, MAF, SPM, VCT, WSM, SMR, STP, SAU, SEN, SRB, 
SYC, SLE, SGP, SXM, SVK, SVN, SLB, SOM, ZAF, SGS, SSD, ESP, LKA, SDN, SUR, SJM, SWE, CHE, SYR, TWN, TJK, TZA, 
THA, TLS, TGO, TKL, TON, TTO, TUN, TUR, TKM, TCA, TUV, UGA, UKR, ARE, GBR, USA, UMI, URY, UZB, VUT, VEN, VNM, 
VGB, VIR, WLF, ESH, YEM, ZMB, ZWE
Input:'The numbers for the percent grades must be to one decimal place (such as 10.6).'
Output:PROVIDED: 10.6 +++ GENERATED: 0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0, 2.1, 
2.2, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8, 2.9, 3.0, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6, 3.7, 3.8, 3.9, 4.0, 4.1, 4.2, 4.3, 4.4, 
4.5, 4.6, 4.7, 4.8, 4.9, 5.0, 5.1, 5.2, 5.3, 10.0, 99.9, 100.0
Input:'The title of the book to be rated.'
Output:PROVIDED: None +++ GENERATED: To Kill a Mockingbird, 1984, Pride and Prejudice, The Great Gatsby, Moby-Dick, The Catcher in the Rye, Harry Potter 
and the Sorcerer's Stone, The Lord of the Rings, One Hundred Years of Solitude, Brave New World, Sapiens: A Brief 
History of Humankind, The Immortal Life of Henrietta Lacks, Thinking, Fast and Slow, The Wright Brothers, The Diary of 
a Young Girl, Educated, The Art of War, The 7 Habits of Highly Effective People, Freakonomics, Quiet: The Power of 
Introverts in a World That Can't Stop Talking, Dune, Ender's Game, Neuromancer
Input:'The value for the number of products to consume. It must be greater than 12 and less than 50.'
Output:PROVIDED: None +++ GENERATED: None
Input:'The number of bank accounts associated. Cannot be less than 0.'
Output:PROVIDED: None +++ GENERATED: None
Input:The maximum number of playlists to return. Default: 20. Minimum: 1. Maximum: 50.
Output:",None
limit,0.2,256,"
Analyze the provided API parameter description and first estimate the parameter type. Then, according to the type, apply the following to determine restrictions on the parameter input:
If it is a number, determine if the description mentions minimum, maximum, or default possible values and output: ""min [minimum], max [maximum], default [default]"". 
If it's a string, word, or code, determine if the description mentions minimum or maximum possible character amounts or a default value, and output: ""minLength [minimum], maxLength [maximum], default [default]"". 
If it's an array or list, determine if the description mentions minimum or maximum possible list lengths or a default value, and output: ""minItems [minimum], maxItems [maximum], default [default]"".
If it's an object, determine if the description mentions minimum or maximum possible numbers of object properties or a default value, and output: ""minProperties [minimum], maxProperties [maximum], default [default]"".
If it is any other data type where there is a default value provided, output: ""min None, max None, default [default]"".
If you are unable to determine any minimum, maximum, or default restrictions, output ""None"". If you are able to determine only one either the minimum or maximum, output the undetermined value as ""None"".

Assume any ""
"" values in the input indicate either new lines or spaces. 

Here are some examples of inputs and expected outputs:

Input:'An idea for a project. This and 'rating' are required.'
Output:None
Input:'The maximum value is 50. If nothing is put in, default to 0.'
Output:min None, max 50, default 0
Input:'The timer counter. The value must be between 15.0 and 120.'
Output:min 15.0, max 120, default None
Input:'The input range. The smallest value possible is -120.8. The largest should be 179.652.'
Output:min -120.8, max 179.652, default None
Input:'The number of items to be investigated. The maximum is 9,999.99'
Output:min None, max 9999.99, default None
Input:'The name of the movie. The movie name cannot be shorter than 10 characters and longer than 20 characters.'
Output:minLength 10, maxLength 20, default None
Input:'The country code which can be 1-letter, 2-letter, or 3-letter.'
Output:minLength 1, maxLength 3, default None
Input:'A supplied language code that can either be 2-letter or 3-letter which is used to parse through a list of common phrases.'
Output:minLength 2, maxLength 3, default None
Input:'Search via county areas.'
Output:None
Input:'Identifies synonyms through word inputs.'
Output:None
Input:'After searching through a list of ISO country codes, input 2-letter or 3-letter codes to find their data.'
Output:minLength 2, maxLength 3, default None
Input:The maximum number of playlists to return. Default: 20. Minimum: 1. Maximum: 50.
Output:","min 1, max 50, default 20"
limit,0.2,256,"
Analyze the provided API parameter description and determine whether it clearly identifies the parameter's data type 
or formatting. 
The list of possible data types are as follows: string, number, integer, boolean, array, and object.
The list of format options are as follows: time, date, password, byte, binary, email, uuid, uri, url, hostname, ipv4, and ipv6. Use the types and formats available for the OpenAPI Specification. 
A list of collectionFormat types are as follows: csv, ssv, and pipes.
If the data type is an array, attempt to identify its item type. 
Output the answer as follows: ""type [type], items [item type], format [format], collectionFormat [collectionFormat]"". Output None when unable to determine any of the categories. 
For example, only output a non-None ""item type"" if the ""type"" is array.

Assume any ""
"" values in the input indicate either new lines or spaces. 

Here are some examples of inputs and expected outputs:

Input:'A space-separated list of percent grades corresponding to the student.'
Output:type array, items number, format None, collectionFormat ssv
Input:'This should contain the email of the sender.'
Output:type string, items None, format email, collectionFormat None
Input:'This value should be true if the assignment is available for regrade.'
Output:type boolean, items None, format None, collectionFormat None
Input:'A URL containing the website for evaluation.'
Output:type string, items None, format url, collectionFormat None
Input:'The date of the contest. The date must be within the last three months.'
Output:type string, items None, format date, collectionFormat None
Input:'The time that the project must be completed. Use Eastern Standard Timezone (EST).'
Output:type string, items None, format date-time, collectionFormat None
Input:'A list of region codes.'
Output:type array, items None, format None, collectionFormat None
Input:The maximum number of playlists to return. Default: 20. Minimum: 1. Maximum: 50.
Output:",None
limit,0.2,256,"
Identify the API parameter object by the grouping of its ""name"" and ""description"". Analyze the parameter description and extract logical constraints
in the provided format. Evaluate each case and determine whether it is applicable. Strictly follow the format and make no inferences. Only consider constraints
that are strictly required. Interpret the description in the least constraining manner, and assume Case 1 unless the other cases are obvious:

Case 1: The description isn't definitive about parameter requirements. Output ""None"".
Case 2: The description states the parameter ""name"" is required. Output: ""REQUIRED: name"". 
Case 3: The description states that parameter ""name"" or another parameter ""name"" is required. Output: ""Or(name, name)""
Case 4: The description states that given a set of parameters name, name_2, . . . , name_n, zero or one can be present in the API call: Output: ""ZeroOrOne(name, name_2, ... name_n)""
Case 5: The description states that given a set of parameters name, name_2, . . . , name_n, exactly one must be present in the API call: Output: ""OnlyOne(name, name_2, ... name_n)""
Case 6: The description states that given a set of parameters name, name_2, . . . , name_n, all of them or none must be present in the API call: Output: ""AllOrNone(name, name_2, ... name_n)""
Case 7: The description states that there is a relational relationship between some parameters: Output: ""name >= name_2"", where the standard relational operators can be used
Case 8: The description states that there is an arithmetic relationship between the value of parameters: Output: ""name_1 + name_2 <= value"", where the standard arithmetic operators can be used
Case 9: The description states there is a conditional relationship between parameters: Output: ""IF name THEN name_2"", where the standard logical operators can be used
Case 10: The description states that there exists a complex relationship between parameters, you can combine rules from the grammar to express a statement: Output: ""IF name==value THEN OnlyOne(name_2 AND name_3, name_4 AND name_5);

The grammar for statements is succinctly defined as follows:

Model:
    Dependency*;
Dependency:
    RelationalDependency | ArithmeticDependency |
    ConditionalDependency | PredefinedDependency;
RelationalDependency:
    Param RelationalOperator Param;
ArithmeticDependency:
    Operation RelationalOperator DOUBLE;
Operation:
    Param OperationContinuation |
    '(' Operation ')' OperationContinuation?;
OperationContinuation:
    ArithmeticOperator (Param | Operation);
ConditionalDependency:
    'IF' Predicate 'THEN' Predicate;
Predicate:
    Clause ClauseContinuation?;
Clause:
    (Term | RelationalDependency | ArithmeticDependency
    | PredefinedDependency) | 'NOT'? '(' Predicate ')';
Term:
    'NOT'? (Param | ParamValueRelation);
Param:
    ID | '[' ID ']';
ParamValueRelation:
    Param '==' STRING('|'STRING)* |
    Param 'LIKE' PATTERN_STRING | Param '==' BOOLEAN |
    Param RelationalOperator DOUBLE;
ClauseContinuation:
    ('AND' | 'OR') Predicate;
PredefinedDependency:
    'NOT'? ('Or' | 'OnlyOne' | 'AllOrNone' |
    'ZeroOrOne') '(' Clause (',' Clause)+ ')';
RelationalOperator:
    '<' | '>' | '<=' | '>=' | '==' | '!=';
ArithmeticOperator:
    '+' | '-' | '*' | '/';

If there are multiple dependency statements, return each one on a new line. Do not include any other text. Do not create dependencies on expected API responses.
Assume any ""
"" values in the input indicate either new lines or spaces. 
Here are some examples of expected outputs:

Input:
name: text 
description: The text to be checked. This or 'data' is required.
Output:Or(text, data);
Input: 
     name: idea
     description: 'An idea for a project. This and 'rating' are required.'
Output:OnlyOne(idea AND rating);
Input:
      name: partID
      description: 'The ID of the part. If partModel is specified partID must be specified'
Output:IF partModel THEN partID;
Input:
       name: language 
       description: The language of the client, not required if the country-code is USA or CAN.
Output:IF country-code!='USA' OR country-code=='CAN' THEN language;
Input:
        name: cost
        description: The cost of the product, this - profit must be greater than 500.
Output:cost - profit > 500;
Input:The maximum number of playlists to return. Default: 20. Minimum: 1. Maximum: 50.
Output:",None
offset,0.2,256,"
Analyze the provided API parameter description, and extract any example values for the parameter mentioned in the description. 
Then, generate a few additional example values that correspond to, or are in the same category as the provided values.
If there are no example values provided, simply generate values corresponding to the description, and always generate values when possible.  
If generating example values is not possible, return None. Consider the following cases: 

Case 1: The description contains example values USA, CAN, ZWE: Output: ""PROVIDED: USA, CAN, ZWE +++ GENERATED: BRA, FRA, GER ...""
Case 2: The description does not explicitly mention example values: Output: ""PROVIDED: None +++ GENERATED: BRA, FRA, GER, USA ...""
Case 3: The description does not explicitly mention example values, and it is not possible to generate example values: Output: ""None""

Assume any ""
"" values in the input represent spaces or new lines. Do not output any ""
"" strings.

Here are some examples of inputs and expected outputs:
Input:'The country code associated with the country. Examples are CAD, USD, etc...'
Output:PROVIDED: CAD, USD +++ GENERATED: AFG, ALA, ALB, DZA, ASM, AND, AGO, AIA, ATA, ATG, ARG, ARM, ABW, AUS, AUT, AZE, BHS, BHR, BGD, BRB, BLR, BEL, 
BLZ, BEN, BMU, BTN, BOL, BES, BIH, BWA, BVT, BRA, IOT, BRN, BGR, BFA, BDI, CPV, KHM, CMR, CAN, CYM, CAF, TCD, 
CHL, CHN, CXR, CCK, COL, COM, COG, COD, COK, CRI, CIV, HRV, CUB, CUW, CYP, CZE, DNK, DJI, DMA, DOM, ECU, EGY, 
SLV, GNQ, ERI, EST, SWZ, ETH, FLK, FRO, FJI, FIN, FRA, GUF, PYF, ATF, GAB, GMB, GEO, DEU, GHA, GIB, GRC, GRL, 
GRD, GLP, GUM, GTM, GGY, GIN, GNB, GUY, HTI, HMD, VAT, HND, HKG, HUN, ISL, IND, IDN, IRN, IRQ, IRL, IMN, ISR, 
ITA, JAM, JPN, JEY, JOR, KAZ, KEN, KIR, PRK, KOR, KWT, KGZ, LAO, LVA, LBN, LSO, LBR, LBY, LIE, LTU, LUX, MAC, 
MDG, MWI, MYS, MDV, MLI, MLT, MHL, MTQ, MRT, MUS, MYT, MEX, FSM, MDA, MCO, MNG, MNE, MSR, MAR, MOZ, MMR, NAM, 
NRU, NPL, NLD, NCL, NZL, NIC, NER, NGA, NIU, NFK, MKD, MNP, NOR, OMN, PAK, PLW, PSE, PAN, PNG, PRY, PER, PHL, 
PCN, POL, PRT, PRI, QAT, REU, ROU, RUS, RWA, BLM, SHN, KNA, LCA, MAF, SPM, VCT, WSM, SMR, STP, SAU, SEN, SRB, 
SYC, SLE, SGP, SXM, SVK, SVN, SLB, SOM, ZAF, SGS, SSD, ESP, LKA, SDN, SUR, SJM, SWE, CHE, SYR, TWN, TJK, TZA, 
THA, TLS, TGO, TKL, TON, TTO, TUN, TUR, TKM, TCA, TUV, UGA, UKR, ARE, GBR, USA, UMI, URY, UZB, VUT, VEN, VNM, 
VGB, VIR, WLF, ESH, YEM, ZMB, ZWE
Input:'The numbers for the percent grades must be to one decimal place (such as 10.6).'
Output:PROVIDED: 10.6 +++ GENERATED: 0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0, 2.1, 
2.2, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8, 2.9, 3.0, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6, 3.7, 3.8, 3.9, 4.0, 4.1, 4.2, 4.3, 4.4, 
4.5, 4.6, 4.7, 4.8, 4.9, 5.0, 5.1, 5.2, 5.3, 10.0, 99.9, 100.0
Input:'The title of the book to be rated.'
Output:PROVIDED: None +++ GENERATED: To Kill a Mockingbird, 1984, Pride and Prejudice, The Great Gatsby, Moby-Dick, The Catcher in the Rye, Harry Potter 
and the Sorcerer's Stone, The Lord of the Rings, One Hundred Years of Solitude, Brave New World, Sapiens: A Brief 
History of Humankind, The Immortal Life of Henrietta Lacks, Thinking, Fast and Slow, The Wright Brothers, The Diary of 
a Young Girl, Educated, The Art of War, The 7 Habits of Highly Effective People, Freakonomics, Quiet: The Power of 
Introverts in a World That Can't Stop Talking, Dune, Ender's Game, Neuromancer
Input:'The value for the number of products to consume. It must be greater than 12 and less than 50.'
Output:PROVIDED: None +++ GENERATED: None
Input:'The number of bank accounts associated. Cannot be less than 0.'
Output:PROVIDED: None +++ GENERATED: None
Input:The index of the first playlist to return. Default: 0 (the first object). Maximum offset: 100.000. Use with `limit` to get the next set of playlists.
Output:",None
offset,0.2,256,"
Analyze the provided API parameter description and first estimate the parameter type. Then, according to the type, apply the following to determine restrictions on the parameter input:
If it is a number, determine if the description mentions minimum, maximum, or default possible values and output: ""min [minimum], max [maximum], default [default]"". 
If it's a string, word, or code, determine if the description mentions minimum or maximum possible character amounts or a default value, and output: ""minLength [minimum], maxLength [maximum], default [default]"". 
If it's an array or list, determine if the description mentions minimum or maximum possible list lengths or a default value, and output: ""minItems [minimum], maxItems [maximum], default [default]"".
If it's an object, determine if the description mentions minimum or maximum possible numbers of object properties or a default value, and output: ""minProperties [minimum], maxProperties [maximum], default [default]"".
If it is any other data type where there is a default value provided, output: ""min None, max None, default [default]"".
If you are unable to determine any minimum, maximum, or default restrictions, output ""None"". If you are able to determine only one either the minimum or maximum, output the undetermined value as ""None"".

Assume any ""
"" values in the input indicate either new lines or spaces. 

Here are some examples of inputs and expected outputs:

Input:'An idea for a project. This and 'rating' are required.'
Output:None
Input:'The maximum value is 50. If nothing is put in, default to 0.'
Output:min None, max 50, default 0
Input:'The timer counter. The value must be between 15.0 and 120.'
Output:min 15.0, max 120, default None
Input:'The input range. The smallest value possible is -120.8. The largest should be 179.652.'
Output:min -120.8, max 179.652, default None
Input:'The number of items to be investigated. The maximum is 9,999.99'
Output:min None, max 9999.99, default None
Input:'The name of the movie. The movie name cannot be shorter than 10 characters and longer than 20 characters.'
Output:minLength 10, maxLength 20, default None
Input:'The country code which can be 1-letter, 2-letter, or 3-letter.'
Output:minLength 1, maxLength 3, default None
Input:'A supplied language code that can either be 2-letter or 3-letter which is used to parse through a list of common phrases.'
Output:minLength 2, maxLength 3, default None
Input:'Search via county areas.'
Output:None
Input:'Identifies synonyms through word inputs.'
Output:None
Input:'After searching through a list of ISO country codes, input 2-letter or 3-letter codes to find their data.'
Output:minLength 2, maxLength 3, default None
Input:The index of the first playlist to return. Default: 0 (the first object). Maximum offset: 100.000. Use with `limit` to get the next set of playlists.
Output:","min 0, max 100000, default 0"
offset,0.2,256,"
Analyze the provided API parameter description and determine whether it clearly identifies the parameter's data type 
or formatting. 
The list of possible data types are as follows: string, number, integer, boolean, array, and object.
The list of format options are as follows: time, date, password, byte, binary, email, uuid, uri, url, hostname, ipv4, and ipv6. Use the types and formats available for the OpenAPI Specification. 
A list of collectionFormat types are as follows: csv, ssv, and pipes.
If the data type is an array, attempt to identify its item type. 
Output the answer as follows: ""type [type], items [item type], format [format], collectionFormat [collectionFormat]"". Output None when unable to determine any of the categories. 
For example, only output a non-None ""item type"" if the ""type"" is array.

Assume any ""
"" values in the input indicate either new lines or spaces. 

Here are some examples of inputs and expected outputs:

Input:'A space-separated list of percent grades corresponding to the student.'
Output:type array, items number, format None, collectionFormat ssv
Input:'This should contain the email of the sender.'
Output:type string, items None, format email, collectionFormat None
Input:'This value should be true if the assignment is available for regrade.'
Output:type boolean, items None, format None, collectionFormat None
Input:'A URL containing the website for evaluation.'
Output:type string, items None, format url, collectionFormat None
Input:'The date of the contest. The date must be within the last three months.'
Output:type string, items None, format date, collectionFormat None
Input:'The time that the project must be completed. Use Eastern Standard Timezone (EST).'
Output:type string, items None, format date-time, collectionFormat None
Input:'A list of region codes.'
Output:type array, items None, format None, collectionFormat None
Input:The index of the first playlist to return. Default: 0 (the first object). Maximum offset: 100.000. Use with `limit` to get the next set of playlists.
Output:",None
offset,0.2,256,"
Identify the API parameter object by the grouping of its ""name"" and ""description"". Analyze the parameter description and extract logical constraints
in the provided format. Evaluate each case and determine whether it is applicable. Strictly follow the format and make no inferences. Only consider constraints
that are strictly required. Interpret the description in the least constraining manner, and assume Case 1 unless the other cases are obvious:

Case 1: The description isn't definitive about parameter requirements. Output ""None"".
Case 2: The description states the parameter ""name"" is required. Output: ""REQUIRED: name"". 
Case 3: The description states that parameter ""name"" or another parameter ""name"" is required. Output: ""Or(name, name)""
Case 4: The description states that given a set of parameters name, name_2, . . . , name_n, zero or one can be present in the API call: Output: ""ZeroOrOne(name, name_2, ... name_n)""
Case 5: The description states that given a set of parameters name, name_2, . . . , name_n, exactly one must be present in the API call: Output: ""OnlyOne(name, name_2, ... name_n)""
Case 6: The description states that given a set of parameters name, name_2, . . . , name_n, all of them or none must be present in the API call: Output: ""AllOrNone(name, name_2, ... name_n)""
Case 7: The description states that there is a relational relationship between some parameters: Output: ""name >= name_2"", where the standard relational operators can be used
Case 8: The description states that there is an arithmetic relationship between the value of parameters: Output: ""name_1 + name_2 <= value"", where the standard arithmetic operators can be used
Case 9: The description states there is a conditional relationship between parameters: Output: ""IF name THEN name_2"", where the standard logical operators can be used
Case 10: The description states that there exists a complex relationship between parameters, you can combine rules from the grammar to express a statement: Output: ""IF name==value THEN OnlyOne(name_2 AND name_3, name_4 AND name_5);

The grammar for statements is succinctly defined as follows:

Model:
    Dependency*;
Dependency:
    RelationalDependency | ArithmeticDependency |
    ConditionalDependency | PredefinedDependency;
RelationalDependency:
    Param RelationalOperator Param;
ArithmeticDependency:
    Operation RelationalOperator DOUBLE;
Operation:
    Param OperationContinuation |
    '(' Operation ')' OperationContinuation?;
OperationContinuation:
    ArithmeticOperator (Param | Operation);
ConditionalDependency:
    'IF' Predicate 'THEN' Predicate;
Predicate:
    Clause ClauseContinuation?;
Clause:
    (Term | RelationalDependency | ArithmeticDependency
    | PredefinedDependency) | 'NOT'? '(' Predicate ')';
Term:
    'NOT'? (Param | ParamValueRelation);
Param:
    ID | '[' ID ']';
ParamValueRelation:
    Param '==' STRING('|'STRING)* |
    Param 'LIKE' PATTERN_STRING | Param '==' BOOLEAN |
    Param RelationalOperator DOUBLE;
ClauseContinuation:
    ('AND' | 'OR') Predicate;
PredefinedDependency:
    'NOT'? ('Or' | 'OnlyOne' | 'AllOrNone' |
    'ZeroOrOne') '(' Clause (',' Clause)+ ')';
RelationalOperator:
    '<' | '>' | '<=' | '>=' | '==' | '!=';
ArithmeticOperator:
    '+' | '-' | '*' | '/';

If there are multiple dependency statements, return each one on a new line. Do not include any other text. Do not create dependencies on expected API responses.
Assume any ""
"" values in the input indicate either new lines or spaces. 
Here are some examples of expected outputs:

Input:
name: text 
description: The text to be checked. This or 'data' is required.
Output:Or(text, data);
Input: 
     name: idea
     description: 'An idea for a project. This and 'rating' are required.'
Output:OnlyOne(idea AND rating);
Input:
      name: partID
      description: 'The ID of the part. If partModel is specified partID must be specified'
Output:IF partModel THEN partID;
Input:
       name: language 
       description: The language of the client, not required if the country-code is USA or CAN.
Output:IF country-code!='USA' OR country-code=='CAN' THEN language;
Input:
        name: cost
        description: The cost of the product, this - profit must be greater than 500.
Output:cost - profit > 500;
Input:The index of the first playlist to return. Default: 0 (the first object). Maximum offset: 100.000. Use with `limit` to get the next set of playlists.
Output:",None
user_id,0.2,256,"
Analyze the provided API parameter description, and extract any example values for the parameter mentioned in the description. 
Then, generate a few additional example values that correspond to, or are in the same category as the provided values.
If there are no example values provided, simply generate values corresponding to the description, and always generate values when possible.  
If generating example values is not possible, return None. Consider the following cases: 

Case 1: The description contains example values USA, CAN, ZWE: Output: ""PROVIDED: USA, CAN, ZWE +++ GENERATED: BRA, FRA, GER ...""
Case 2: The description does not explicitly mention example values: Output: ""PROVIDED: None +++ GENERATED: BRA, FRA, GER, USA ...""
Case 3: The description does not explicitly mention example values, and it is not possible to generate example values: Output: ""None""

Assume any ""
"" values in the input represent spaces or new lines. Do not output any ""
"" strings.

Here are some examples of inputs and expected outputs:
Input:'The country code associated with the country. Examples are CAD, USD, etc...'
Output:PROVIDED: CAD, USD +++ GENERATED: AFG, ALA, ALB, DZA, ASM, AND, AGO, AIA, ATA, ATG, ARG, ARM, ABW, AUS, AUT, AZE, BHS, BHR, BGD, BRB, BLR, BEL, 
BLZ, BEN, BMU, BTN, BOL, BES, BIH, BWA, BVT, BRA, IOT, BRN, BGR, BFA, BDI, CPV, KHM, CMR, CAN, CYM, CAF, TCD, 
CHL, CHN, CXR, CCK, COL, COM, COG, COD, COK, CRI, CIV, HRV, CUB, CUW, CYP, CZE, DNK, DJI, DMA, DOM, ECU, EGY, 
SLV, GNQ, ERI, EST, SWZ, ETH, FLK, FRO, FJI, FIN, FRA, GUF, PYF, ATF, GAB, GMB, GEO, DEU, GHA, GIB, GRC, GRL, 
GRD, GLP, GUM, GTM, GGY, GIN, GNB, GUY, HTI, HMD, VAT, HND, HKG, HUN, ISL, IND, IDN, IRN, IRQ, IRL, IMN, ISR, 
ITA, JAM, JPN, JEY, JOR, KAZ, KEN, KIR, PRK, KOR, KWT, KGZ, LAO, LVA, LBN, LSO, LBR, LBY, LIE, LTU, LUX, MAC, 
MDG, MWI, MYS, MDV, MLI, MLT, MHL, MTQ, MRT, MUS, MYT, MEX, FSM, MDA, MCO, MNG, MNE, MSR, MAR, MOZ, MMR, NAM, 
NRU, NPL, NLD, NCL, NZL, NIC, NER, NGA, NIU, NFK, MKD, MNP, NOR, OMN, PAK, PLW, PSE, PAN, PNG, PRY, PER, PHL, 
PCN, POL, PRT, PRI, QAT, REU, ROU, RUS, RWA, BLM, SHN, KNA, LCA, MAF, SPM, VCT, WSM, SMR, STP, SAU, SEN, SRB, 
SYC, SLE, SGP, SXM, SVK, SVN, SLB, SOM, ZAF, SGS, SSD, ESP, LKA, SDN, SUR, SJM, SWE, CHE, SYR, TWN, TJK, TZA, 
THA, TLS, TGO, TKL, TON, TTO, TUN, TUR, TKM, TCA, TUV, UGA, UKR, ARE, GBR, USA, UMI, URY, UZB, VUT, VEN, VNM, 
VGB, VIR, WLF, ESH, YEM, ZMB, ZWE
Input:'The numbers for the percent grades must be to one decimal place (such as 10.6).'
Output:PROVIDED: 10.6 +++ GENERATED: 0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0, 2.1, 
2.2, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8, 2.9, 3.0, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6, 3.7, 3.8, 3.9, 4.0, 4.1, 4.2, 4.3, 4.4, 
4.5, 4.6, 4.7, 4.8, 4.9, 5.0, 5.1, 5.2, 5.3, 10.0, 99.9, 100.0
Input:'The title of the book to be rated.'
Output:PROVIDED: None +++ GENERATED: To Kill a Mockingbird, 1984, Pride and Prejudice, The Great Gatsby, Moby-Dick, The Catcher in the Rye, Harry Potter 
and the Sorcerer's Stone, The Lord of the Rings, One Hundred Years of Solitude, Brave New World, Sapiens: A Brief 
History of Humankind, The Immortal Life of Henrietta Lacks, Thinking, Fast and Slow, The Wright Brothers, The Diary of 
a Young Girl, Educated, The Art of War, The 7 Habits of Highly Effective People, Freakonomics, Quiet: The Power of 
Introverts in a World That Can't Stop Talking, Dune, Ender's Game, Neuromancer
Input:'The value for the number of products to consume. It must be greater than 12 and less than 50.'
Output:PROVIDED: None +++ GENERATED: None
Input:'The number of bank accounts associated. Cannot be less than 0.'
Output:PROVIDED: None +++ GENERATED: None
Input:The user's [Spotify user ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids).
Output:",None
user_id,0.2,256,"
Analyze the provided API parameter description and first estimate the parameter type. Then, according to the type, apply the following to determine restrictions on the parameter input:
If it is a number, determine if the description mentions minimum, maximum, or default possible values and output: ""min [minimum], max [maximum], default [default]"". 
If it's a string, word, or code, determine if the description mentions minimum or maximum possible character amounts or a default value, and output: ""minLength [minimum], maxLength [maximum], default [default]"". 
If it's an array or list, determine if the description mentions minimum or maximum possible list lengths or a default value, and output: ""minItems [minimum], maxItems [maximum], default [default]"".
If it's an object, determine if the description mentions minimum or maximum possible numbers of object properties or a default value, and output: ""minProperties [minimum], maxProperties [maximum], default [default]"".
If it is any other data type where there is a default value provided, output: ""min None, max None, default [default]"".
If you are unable to determine any minimum, maximum, or default restrictions, output ""None"". If you are able to determine only one either the minimum or maximum, output the undetermined value as ""None"".

Assume any ""
"" values in the input indicate either new lines or spaces. 

Here are some examples of inputs and expected outputs:

Input:'An idea for a project. This and 'rating' are required.'
Output:None
Input:'The maximum value is 50. If nothing is put in, default to 0.'
Output:min None, max 50, default 0
Input:'The timer counter. The value must be between 15.0 and 120.'
Output:min 15.0, max 120, default None
Input:'The input range. The smallest value possible is -120.8. The largest should be 179.652.'
Output:min -120.8, max 179.652, default None
Input:'The number of items to be investigated. The maximum is 9,999.99'
Output:min None, max 9999.99, default None
Input:'The name of the movie. The movie name cannot be shorter than 10 characters and longer than 20 characters.'
Output:minLength 10, maxLength 20, default None
Input:'The country code which can be 1-letter, 2-letter, or 3-letter.'
Output:minLength 1, maxLength 3, default None
Input:'A supplied language code that can either be 2-letter or 3-letter which is used to parse through a list of common phrases.'
Output:minLength 2, maxLength 3, default None
Input:'Search via county areas.'
Output:None
Input:'Identifies synonyms through word inputs.'
Output:None
Input:'After searching through a list of ISO country codes, input 2-letter or 3-letter codes to find their data.'
Output:minLength 2, maxLength 3, default None
Input:The user's [Spotify user ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids).
Output:",None
user_id,0.2,256,"
Analyze the provided API parameter description and determine whether it clearly identifies the parameter's data type 
or formatting. 
The list of possible data types are as follows: string, number, integer, boolean, array, and object.
The list of format options are as follows: time, date, password, byte, binary, email, uuid, uri, url, hostname, ipv4, and ipv6. Use the types and formats available for the OpenAPI Specification. 
A list of collectionFormat types are as follows: csv, ssv, and pipes.
If the data type is an array, attempt to identify its item type. 
Output the answer as follows: ""type [type], items [item type], format [format], collectionFormat [collectionFormat]"". Output None when unable to determine any of the categories. 
For example, only output a non-None ""item type"" if the ""type"" is array.

Assume any ""
"" values in the input indicate either new lines or spaces. 

Here are some examples of inputs and expected outputs:

Input:'A space-separated list of percent grades corresponding to the student.'
Output:type array, items number, format None, collectionFormat ssv
Input:'This should contain the email of the sender.'
Output:type string, items None, format email, collectionFormat None
Input:'This value should be true if the assignment is available for regrade.'
Output:type boolean, items None, format None, collectionFormat None
Input:'A URL containing the website for evaluation.'
Output:type string, items None, format url, collectionFormat None
Input:'The date of the contest. The date must be within the last three months.'
Output:type string, items None, format date, collectionFormat None
Input:'The time that the project must be completed. Use Eastern Standard Timezone (EST).'
Output:type string, items None, format date-time, collectionFormat None
Input:'A list of region codes.'
Output:type array, items None, format None, collectionFormat None
Input:The user's [Spotify user ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids).
Output:",None
user_id,0.2,256,"
Identify the API parameter object by the grouping of its ""name"" and ""description"". Analyze the parameter description and extract logical constraints
in the provided format. Evaluate each case and determine whether it is applicable. Strictly follow the format and make no inferences. Only consider constraints
that are strictly required. Interpret the description in the least constraining manner, and assume Case 1 unless the other cases are obvious:

Case 1: The description isn't definitive about parameter requirements. Output ""None"".
Case 2: The description states the parameter ""name"" is required. Output: ""REQUIRED: name"". 
Case 3: The description states that parameter ""name"" or another parameter ""name"" is required. Output: ""Or(name, name)""
Case 4: The description states that given a set of parameters name, name_2, . . . , name_n, zero or one can be present in the API call: Output: ""ZeroOrOne(name, name_2, ... name_n)""
Case 5: The description states that given a set of parameters name, name_2, . . . , name_n, exactly one must be present in the API call: Output: ""OnlyOne(name, name_2, ... name_n)""
Case 6: The description states that given a set of parameters name, name_2, . . . , name_n, all of them or none must be present in the API call: Output: ""AllOrNone(name, name_2, ... name_n)""
Case 7: The description states that there is a relational relationship between some parameters: Output: ""name >= name_2"", where the standard relational operators can be used
Case 8: The description states that there is an arithmetic relationship between the value of parameters: Output: ""name_1 + name_2 <= value"", where the standard arithmetic operators can be used
Case 9: The description states there is a conditional relationship between parameters: Output: ""IF name THEN name_2"", where the standard logical operators can be used
Case 10: The description states that there exists a complex relationship between parameters, you can combine rules from the grammar to express a statement: Output: ""IF name==value THEN OnlyOne(name_2 AND name_3, name_4 AND name_5);

The grammar for statements is succinctly defined as follows:

Model:
    Dependency*;
Dependency:
    RelationalDependency | ArithmeticDependency |
    ConditionalDependency | PredefinedDependency;
RelationalDependency:
    Param RelationalOperator Param;
ArithmeticDependency:
    Operation RelationalOperator DOUBLE;
Operation:
    Param OperationContinuation |
    '(' Operation ')' OperationContinuation?;
OperationContinuation:
    ArithmeticOperator (Param | Operation);
ConditionalDependency:
    'IF' Predicate 'THEN' Predicate;
Predicate:
    Clause ClauseContinuation?;
Clause:
    (Term | RelationalDependency | ArithmeticDependency
    | PredefinedDependency) | 'NOT'? '(' Predicate ')';
Term:
    'NOT'? (Param | ParamValueRelation);
Param:
    ID | '[' ID ']';
ParamValueRelation:
    Param '==' STRING('|'STRING)* |
    Param 'LIKE' PATTERN_STRING | Param '==' BOOLEAN |
    Param RelationalOperator DOUBLE;
ClauseContinuation:
    ('AND' | 'OR') Predicate;
PredefinedDependency:
    'NOT'? ('Or' | 'OnlyOne' | 'AllOrNone' |
    'ZeroOrOne') '(' Clause (',' Clause)+ ')';
RelationalOperator:
    '<' | '>' | '<=' | '>=' | '==' | '!=';
ArithmeticOperator:
    '+' | '-' | '*' | '/';

If there are multiple dependency statements, return each one on a new line. Do not include any other text. Do not create dependencies on expected API responses.
Assume any ""
"" values in the input indicate either new lines or spaces. 
Here are some examples of expected outputs:

Input:
name: text 
description: The text to be checked. This or 'data' is required.
Output:Or(text, data);
Input: 
     name: idea
     description: 'An idea for a project. This and 'rating' are required.'
Output:OnlyOne(idea AND rating);
Input:
      name: partID
      description: 'The ID of the part. If partModel is specified partID must be specified'
Output:IF partModel THEN partID;
Input:
       name: language 
       description: The language of the client, not required if the country-code is USA or CAN.
Output:IF country-code!='USA' OR country-code=='CAN' THEN language;
Input:
        name: cost
        description: The cost of the product, this - profit must be greater than 500.
Output:cost - profit > 500;
Input:The user's [Spotify user ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids).
Output:",None
collaborative,0.2,256,"
Analyze the provided API parameter description, and extract any example values for the parameter mentioned in the description. 
Then, generate a few additional example values that correspond to, or are in the same category as the provided values.
If there are no example values provided, simply generate values corresponding to the description, and always generate values when possible.  
If generating example values is not possible, return None. Consider the following cases: 

Case 1: The description contains example values USA, CAN, ZWE: Output: ""PROVIDED: USA, CAN, ZWE +++ GENERATED: BRA, FRA, GER ...""
Case 2: The description does not explicitly mention example values: Output: ""PROVIDED: None +++ GENERATED: BRA, FRA, GER, USA ...""
Case 3: The description does not explicitly mention example values, and it is not possible to generate example values: Output: ""None""

Assume any ""
"" values in the input represent spaces or new lines. Do not output any ""
"" strings.

Here are some examples of inputs and expected outputs:
Input:'The country code associated with the country. Examples are CAD, USD, etc...'
Output:PROVIDED: CAD, USD +++ GENERATED: AFG, ALA, ALB, DZA, ASM, AND, AGO, AIA, ATA, ATG, ARG, ARM, ABW, AUS, AUT, AZE, BHS, BHR, BGD, BRB, BLR, BEL, 
BLZ, BEN, BMU, BTN, BOL, BES, BIH, BWA, BVT, BRA, IOT, BRN, BGR, BFA, BDI, CPV, KHM, CMR, CAN, CYM, CAF, TCD, 
CHL, CHN, CXR, CCK, COL, COM, COG, COD, COK, CRI, CIV, HRV, CUB, CUW, CYP, CZE, DNK, DJI, DMA, DOM, ECU, EGY, 
SLV, GNQ, ERI, EST, SWZ, ETH, FLK, FRO, FJI, FIN, FRA, GUF, PYF, ATF, GAB, GMB, GEO, DEU, GHA, GIB, GRC, GRL, 
GRD, GLP, GUM, GTM, GGY, GIN, GNB, GUY, HTI, HMD, VAT, HND, HKG, HUN, ISL, IND, IDN, IRN, IRQ, IRL, IMN, ISR, 
ITA, JAM, JPN, JEY, JOR, KAZ, KEN, KIR, PRK, KOR, KWT, KGZ, LAO, LVA, LBN, LSO, LBR, LBY, LIE, LTU, LUX, MAC, 
MDG, MWI, MYS, MDV, MLI, MLT, MHL, MTQ, MRT, MUS, MYT, MEX, FSM, MDA, MCO, MNG, MNE, MSR, MAR, MOZ, MMR, NAM, 
NRU, NPL, NLD, NCL, NZL, NIC, NER, NGA, NIU, NFK, MKD, MNP, NOR, OMN, PAK, PLW, PSE, PAN, PNG, PRY, PER, PHL, 
PCN, POL, PRT, PRI, QAT, REU, ROU, RUS, RWA, BLM, SHN, KNA, LCA, MAF, SPM, VCT, WSM, SMR, STP, SAU, SEN, SRB, 
SYC, SLE, SGP, SXM, SVK, SVN, SLB, SOM, ZAF, SGS, SSD, ESP, LKA, SDN, SUR, SJM, SWE, CHE, SYR, TWN, TJK, TZA, 
THA, TLS, TGO, TKL, TON, TTO, TUN, TUR, TKM, TCA, TUV, UGA, UKR, ARE, GBR, USA, UMI, URY, UZB, VUT, VEN, VNM, 
VGB, VIR, WLF, ESH, YEM, ZMB, ZWE
Input:'The numbers for the percent grades must be to one decimal place (such as 10.6).'
Output:PROVIDED: 10.6 +++ GENERATED: 0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0, 2.1, 
2.2, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8, 2.9, 3.0, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6, 3.7, 3.8, 3.9, 4.0, 4.1, 4.2, 4.3, 4.4, 
4.5, 4.6, 4.7, 4.8, 4.9, 5.0, 5.1, 5.2, 5.3, 10.0, 99.9, 100.0
Input:'The title of the book to be rated.'
Output:PROVIDED: None +++ GENERATED: To Kill a Mockingbird, 1984, Pride and Prejudice, The Great Gatsby, Moby-Dick, The Catcher in the Rye, Harry Potter 
and the Sorcerer's Stone, The Lord of the Rings, One Hundred Years of Solitude, Brave New World, Sapiens: A Brief 
History of Humankind, The Immortal Life of Henrietta Lacks, Thinking, Fast and Slow, The Wright Brothers, The Diary of 
a Young Girl, Educated, The Art of War, The 7 Habits of Highly Effective People, Freakonomics, Quiet: The Power of 
Introverts in a World That Can't Stop Talking, Dune, Ender's Game, Neuromancer
Input:'The value for the number of products to consume. It must be greater than 12 and less than 50.'
Output:PROVIDED: None +++ GENERATED: None
Input:'The number of bank accounts associated. Cannot be less than 0.'
Output:PROVIDED: None +++ GENERATED: None
Input:Defaults to `false` . If `true` the playlist will be collaborative. Note that to create a collaborative playlist you must also set `public` to `false` . To create collaborative playlists you must have granted `playlist-modify-private` and `playlist-modify-public` [scopes](https://developer.spotify.com/documentation/general/guides/authorization-guide/#list-of-scopes) .
Output:",None
collaborative,0.2,256,"
Analyze the provided API parameter description and first estimate the parameter type. Then, according to the type, apply the following to determine restrictions on the parameter input:
If it is a number, determine if the description mentions minimum, maximum, or default possible values and output: ""min [minimum], max [maximum], default [default]"". 
If it's a string, word, or code, determine if the description mentions minimum or maximum possible character amounts or a default value, and output: ""minLength [minimum], maxLength [maximum], default [default]"". 
If it's an array or list, determine if the description mentions minimum or maximum possible list lengths or a default value, and output: ""minItems [minimum], maxItems [maximum], default [default]"".
If it's an object, determine if the description mentions minimum or maximum possible numbers of object properties or a default value, and output: ""minProperties [minimum], maxProperties [maximum], default [default]"".
If it is any other data type where there is a default value provided, output: ""min None, max None, default [default]"".
If you are unable to determine any minimum, maximum, or default restrictions, output ""None"". If you are able to determine only one either the minimum or maximum, output the undetermined value as ""None"".

Assume any ""
"" values in the input indicate either new lines or spaces. 

Here are some examples of inputs and expected outputs:

Input:'An idea for a project. This and 'rating' are required.'
Output:None
Input:'The maximum value is 50. If nothing is put in, default to 0.'
Output:min None, max 50, default 0
Input:'The timer counter. The value must be between 15.0 and 120.'
Output:min 15.0, max 120, default None
Input:'The input range. The smallest value possible is -120.8. The largest should be 179.652.'
Output:min -120.8, max 179.652, default None
Input:'The number of items to be investigated. The maximum is 9,999.99'
Output:min None, max 9999.99, default None
Input:'The name of the movie. The movie name cannot be shorter than 10 characters and longer than 20 characters.'
Output:minLength 10, maxLength 20, default None
Input:'The country code which can be 1-letter, 2-letter, or 3-letter.'
Output:minLength 1, maxLength 3, default None
Input:'A supplied language code that can either be 2-letter or 3-letter which is used to parse through a list of common phrases.'
Output:minLength 2, maxLength 3, default None
Input:'Search via county areas.'
Output:None
Input:'Identifies synonyms through word inputs.'
Output:None
Input:'After searching through a list of ISO country codes, input 2-letter or 3-letter codes to find their data.'
Output:minLength 2, maxLength 3, default None
Input:Defaults to `false` . If `true` the playlist will be collaborative. Note that to create a collaborative playlist you must also set `public` to `false` . To create collaborative playlists you must have granted `playlist-modify-private` and `playlist-modify-public` [scopes](https://developer.spotify.com/documentation/general/guides/authorization-guide/#list-of-scopes) .
Output:","min None, max None, default false"
collaborative,0.2,256,"
Analyze the provided API parameter description and determine whether it clearly identifies the parameter's data type 
or formatting. 
The list of possible data types are as follows: string, number, integer, boolean, array, and object.
The list of format options are as follows: time, date, password, byte, binary, email, uuid, uri, url, hostname, ipv4, and ipv6. Use the types and formats available for the OpenAPI Specification. 
A list of collectionFormat types are as follows: csv, ssv, and pipes.
If the data type is an array, attempt to identify its item type. 
Output the answer as follows: ""type [type], items [item type], format [format], collectionFormat [collectionFormat]"". Output None when unable to determine any of the categories. 
For example, only output a non-None ""item type"" if the ""type"" is array.

Assume any ""
"" values in the input indicate either new lines or spaces. 

Here are some examples of inputs and expected outputs:

Input:'A space-separated list of percent grades corresponding to the student.'
Output:type array, items number, format None, collectionFormat ssv
Input:'This should contain the email of the sender.'
Output:type string, items None, format email, collectionFormat None
Input:'This value should be true if the assignment is available for regrade.'
Output:type boolean, items None, format None, collectionFormat None
Input:'A URL containing the website for evaluation.'
Output:type string, items None, format url, collectionFormat None
Input:'The date of the contest. The date must be within the last three months.'
Output:type string, items None, format date, collectionFormat None
Input:'The time that the project must be completed. Use Eastern Standard Timezone (EST).'
Output:type string, items None, format date-time, collectionFormat None
Input:'A list of region codes.'
Output:type array, items None, format None, collectionFormat None
Input:Defaults to `false` . If `true` the playlist will be collaborative. Note that to create a collaborative playlist you must also set `public` to `false` . To create collaborative playlists you must have granted `playlist-modify-private` and `playlist-modify-public` [scopes](https://developer.spotify.com/documentation/general/guides/authorization-guide/#list-of-scopes) .
Output:",None
collaborative,0.2,256,"
Identify the API parameter object by the grouping of its ""name"" and ""description"". Analyze the parameter description and extract logical constraints
in the provided format. Evaluate each case and determine whether it is applicable. Strictly follow the format and make no inferences. Only consider constraints
that are strictly required. Interpret the description in the least constraining manner, and assume Case 1 unless the other cases are obvious:

Case 1: The description isn't definitive about parameter requirements. Output ""None"".
Case 2: The description states the parameter ""name"" is required. Output: ""REQUIRED: name"". 
Case 3: The description states that parameter ""name"" or another parameter ""name"" is required. Output: ""Or(name, name)""
Case 4: The description states that given a set of parameters name, name_2, . . . , name_n, zero or one can be present in the API call: Output: ""ZeroOrOne(name, name_2, ... name_n)""
Case 5: The description states that given a set of parameters name, name_2, . . . , name_n, exactly one must be present in the API call: Output: ""OnlyOne(name, name_2, ... name_n)""
Case 6: The description states that given a set of parameters name, name_2, . . . , name_n, all of them or none must be present in the API call: Output: ""AllOrNone(name, name_2, ... name_n)""
Case 7: The description states that there is a relational relationship between some parameters: Output: ""name >= name_2"", where the standard relational operators can be used
Case 8: The description states that there is an arithmetic relationship between the value of parameters: Output: ""name_1 + name_2 <= value"", where the standard arithmetic operators can be used
Case 9: The description states there is a conditional relationship between parameters: Output: ""IF name THEN name_2"", where the standard logical operators can be used
Case 10: The description states that there exists a complex relationship between parameters, you can combine rules from the grammar to express a statement: Output: ""IF name==value THEN OnlyOne(name_2 AND name_3, name_4 AND name_5);

The grammar for statements is succinctly defined as follows:

Model:
    Dependency*;
Dependency:
    RelationalDependency | ArithmeticDependency |
    ConditionalDependency | PredefinedDependency;
RelationalDependency:
    Param RelationalOperator Param;
ArithmeticDependency:
    Operation RelationalOperator DOUBLE;
Operation:
    Param OperationContinuation |
    '(' Operation ')' OperationContinuation?;
OperationContinuation:
    ArithmeticOperator (Param | Operation);
ConditionalDependency:
    'IF' Predicate 'THEN' Predicate;
Predicate:
    Clause ClauseContinuation?;
Clause:
    (Term | RelationalDependency | ArithmeticDependency
    | PredefinedDependency) | 'NOT'? '(' Predicate ')';
Term:
    'NOT'? (Param | ParamValueRelation);
Param:
    ID | '[' ID ']';
ParamValueRelation:
    Param '==' STRING('|'STRING)* |
    Param 'LIKE' PATTERN_STRING | Param '==' BOOLEAN |
    Param RelationalOperator DOUBLE;
ClauseContinuation:
    ('AND' | 'OR') Predicate;
PredefinedDependency:
    'NOT'? ('Or' | 'OnlyOne' | 'AllOrNone' |
    'ZeroOrOne') '(' Clause (',' Clause)+ ')';
RelationalOperator:
    '<' | '>' | '<=' | '>=' | '==' | '!=';
ArithmeticOperator:
    '+' | '-' | '*' | '/';

If there are multiple dependency statements, return each one on a new line. Do not include any other text. Do not create dependencies on expected API responses.
Assume any ""
"" values in the input indicate either new lines or spaces. 
Here are some examples of expected outputs:

Input:
name: text 
description: The text to be checked. This or 'data' is required.
Output:Or(text, data);
Input: 
     name: idea
     description: 'An idea for a project. This and 'rating' are required.'
Output:OnlyOne(idea AND rating);
Input:
      name: partID
      description: 'The ID of the part. If partModel is specified partID must be specified'
Output:IF partModel THEN partID;
Input:
       name: language 
       description: The language of the client, not required if the country-code is USA or CAN.
Output:IF country-code!='USA' OR country-code=='CAN' THEN language;
Input:
        name: cost
        description: The cost of the product, this - profit must be greater than 500.
Output:cost - profit > 500;
Input:Defaults to `false` . If `true` the playlist will be collaborative. Note that to create a collaborative playlist you must also set `public` to `false` . To create collaborative playlists you must have granted `playlist-modify-private` and `playlist-modify-public` [scopes](https://developer.spotify.com/documentation/general/guides/authorization-guide/#list-of-scopes) .
Output:",None
description,0.2,256,"
Analyze the provided API parameter description, and extract any example values for the parameter mentioned in the description. 
Then, generate a few additional example values that correspond to, or are in the same category as the provided values.
If there are no example values provided, simply generate values corresponding to the description, and always generate values when possible.  
If generating example values is not possible, return None. Consider the following cases: 

Case 1: The description contains example values USA, CAN, ZWE: Output: ""PROVIDED: USA, CAN, ZWE +++ GENERATED: BRA, FRA, GER ...""
Case 2: The description does not explicitly mention example values: Output: ""PROVIDED: None +++ GENERATED: BRA, FRA, GER, USA ...""
Case 3: The description does not explicitly mention example values, and it is not possible to generate example values: Output: ""None""

Assume any ""
"" values in the input represent spaces or new lines. Do not output any ""
"" strings.

Here are some examples of inputs and expected outputs:
Input:'The country code associated with the country. Examples are CAD, USD, etc...'
Output:PROVIDED: CAD, USD +++ GENERATED: AFG, ALA, ALB, DZA, ASM, AND, AGO, AIA, ATA, ATG, ARG, ARM, ABW, AUS, AUT, AZE, BHS, BHR, BGD, BRB, BLR, BEL, 
BLZ, BEN, BMU, BTN, BOL, BES, BIH, BWA, BVT, BRA, IOT, BRN, BGR, BFA, BDI, CPV, KHM, CMR, CAN, CYM, CAF, TCD, 
CHL, CHN, CXR, CCK, COL, COM, COG, COD, COK, CRI, CIV, HRV, CUB, CUW, CYP, CZE, DNK, DJI, DMA, DOM, ECU, EGY, 
SLV, GNQ, ERI, EST, SWZ, ETH, FLK, FRO, FJI, FIN, FRA, GUF, PYF, ATF, GAB, GMB, GEO, DEU, GHA, GIB, GRC, GRL, 
GRD, GLP, GUM, GTM, GGY, GIN, GNB, GUY, HTI, HMD, VAT, HND, HKG, HUN, ISL, IND, IDN, IRN, IRQ, IRL, IMN, ISR, 
ITA, JAM, JPN, JEY, JOR, KAZ, KEN, KIR, PRK, KOR, KWT, KGZ, LAO, LVA, LBN, LSO, LBR, LBY, LIE, LTU, LUX, MAC, 
MDG, MWI, MYS, MDV, MLI, MLT, MHL, MTQ, MRT, MUS, MYT, MEX, FSM, MDA, MCO, MNG, MNE, MSR, MAR, MOZ, MMR, NAM, 
NRU, NPL, NLD, NCL, NZL, NIC, NER, NGA, NIU, NFK, MKD, MNP, NOR, OMN, PAK, PLW, PSE, PAN, PNG, PRY, PER, PHL, 
PCN, POL, PRT, PRI, QAT, REU, ROU, RUS, RWA, BLM, SHN, KNA, LCA, MAF, SPM, VCT, WSM, SMR, STP, SAU, SEN, SRB, 
SYC, SLE, SGP, SXM, SVK, SVN, SLB, SOM, ZAF, SGS, SSD, ESP, LKA, SDN, SUR, SJM, SWE, CHE, SYR, TWN, TJK, TZA, 
THA, TLS, TGO, TKL, TON, TTO, TUN, TUR, TKM, TCA, TUV, UGA, UKR, ARE, GBR, USA, UMI, URY, UZB, VUT, VEN, VNM, 
VGB, VIR, WLF, ESH, YEM, ZMB, ZWE
Input:'The numbers for the percent grades must be to one decimal place (such as 10.6).'
Output:PROVIDED: 10.6 +++ GENERATED: 0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0, 2.1, 
2.2, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8, 2.9, 3.0, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6, 3.7, 3.8, 3.9, 4.0, 4.1, 4.2, 4.3, 4.4, 
4.5, 4.6, 4.7, 4.8, 4.9, 5.0, 5.1, 5.2, 5.3, 10.0, 99.9, 100.0
Input:'The title of the book to be rated.'
Output:PROVIDED: None +++ GENERATED: To Kill a Mockingbird, 1984, Pride and Prejudice, The Great Gatsby, Moby-Dick, The Catcher in the Rye, Harry Potter 
and the Sorcerer's Stone, The Lord of the Rings, One Hundred Years of Solitude, Brave New World, Sapiens: A Brief 
History of Humankind, The Immortal Life of Henrietta Lacks, Thinking, Fast and Slow, The Wright Brothers, The Diary of 
a Young Girl, Educated, The Art of War, The 7 Habits of Highly Effective People, Freakonomics, Quiet: The Power of 
Introverts in a World That Can't Stop Talking, Dune, Ender's Game, Neuromancer
Input:'The value for the number of products to consume. It must be greater than 12 and less than 50.'
Output:PROVIDED: None +++ GENERATED: None
Input:'The number of bank accounts associated. Cannot be less than 0.'
Output:PROVIDED: None +++ GENERATED: None
Input:value for playlist description as displayed in Spotify Clients and in the Web API.
Output:",None
description,0.2,256,"
Analyze the provided API parameter description and first estimate the parameter type. Then, according to the type, apply the following to determine restrictions on the parameter input:
If it is a number, determine if the description mentions minimum, maximum, or default possible values and output: ""min [minimum], max [maximum], default [default]"". 
If it's a string, word, or code, determine if the description mentions minimum or maximum possible character amounts or a default value, and output: ""minLength [minimum], maxLength [maximum], default [default]"". 
If it's an array or list, determine if the description mentions minimum or maximum possible list lengths or a default value, and output: ""minItems [minimum], maxItems [maximum], default [default]"".
If it's an object, determine if the description mentions minimum or maximum possible numbers of object properties or a default value, and output: ""minProperties [minimum], maxProperties [maximum], default [default]"".
If it is any other data type where there is a default value provided, output: ""min None, max None, default [default]"".
If you are unable to determine any minimum, maximum, or default restrictions, output ""None"". If you are able to determine only one either the minimum or maximum, output the undetermined value as ""None"".

Assume any ""
"" values in the input indicate either new lines or spaces. 

Here are some examples of inputs and expected outputs:

Input:'An idea for a project. This and 'rating' are required.'
Output:None
Input:'The maximum value is 50. If nothing is put in, default to 0.'
Output:min None, max 50, default 0
Input:'The timer counter. The value must be between 15.0 and 120.'
Output:min 15.0, max 120, default None
Input:'The input range. The smallest value possible is -120.8. The largest should be 179.652.'
Output:min -120.8, max 179.652, default None
Input:'The number of items to be investigated. The maximum is 9,999.99'
Output:min None, max 9999.99, default None
Input:'The name of the movie. The movie name cannot be shorter than 10 characters and longer than 20 characters.'
Output:minLength 10, maxLength 20, default None
Input:'The country code which can be 1-letter, 2-letter, or 3-letter.'
Output:minLength 1, maxLength 3, default None
Input:'A supplied language code that can either be 2-letter or 3-letter which is used to parse through a list of common phrases.'
Output:minLength 2, maxLength 3, default None
Input:'Search via county areas.'
Output:None
Input:'Identifies synonyms through word inputs.'
Output:None
Input:'After searching through a list of ISO country codes, input 2-letter or 3-letter codes to find their data.'
Output:minLength 2, maxLength 3, default None
Input:value for playlist description as displayed in Spotify Clients and in the Web API.
Output:",None
description,0.2,256,"
Analyze the provided API parameter description and determine whether it clearly identifies the parameter's data type 
or formatting. 
The list of possible data types are as follows: string, number, integer, boolean, array, and object.
The list of format options are as follows: time, date, password, byte, binary, email, uuid, uri, url, hostname, ipv4, and ipv6. Use the types and formats available for the OpenAPI Specification. 
A list of collectionFormat types are as follows: csv, ssv, and pipes.
If the data type is an array, attempt to identify its item type. 
Output the answer as follows: ""type [type], items [item type], format [format], collectionFormat [collectionFormat]"". Output None when unable to determine any of the categories. 
For example, only output a non-None ""item type"" if the ""type"" is array.

Assume any ""
"" values in the input indicate either new lines or spaces. 

Here are some examples of inputs and expected outputs:

Input:'A space-separated list of percent grades corresponding to the student.'
Output:type array, items number, format None, collectionFormat ssv
Input:'This should contain the email of the sender.'
Output:type string, items None, format email, collectionFormat None
Input:'This value should be true if the assignment is available for regrade.'
Output:type boolean, items None, format None, collectionFormat None
Input:'A URL containing the website for evaluation.'
Output:type string, items None, format url, collectionFormat None
Input:'The date of the contest. The date must be within the last three months.'
Output:type string, items None, format date, collectionFormat None
Input:'The time that the project must be completed. Use Eastern Standard Timezone (EST).'
Output:type string, items None, format date-time, collectionFormat None
Input:'A list of region codes.'
Output:type array, items None, format None, collectionFormat None
Input:value for playlist description as displayed in Spotify Clients and in the Web API.
Output:",None
description,0.2,256,"
Identify the API parameter object by the grouping of its ""name"" and ""description"". Analyze the parameter description and extract logical constraints
in the provided format. Evaluate each case and determine whether it is applicable. Strictly follow the format and make no inferences. Only consider constraints
that are strictly required. Interpret the description in the least constraining manner, and assume Case 1 unless the other cases are obvious:

Case 1: The description isn't definitive about parameter requirements. Output ""None"".
Case 2: The description states the parameter ""name"" is required. Output: ""REQUIRED: name"". 
Case 3: The description states that parameter ""name"" or another parameter ""name"" is required. Output: ""Or(name, name)""
Case 4: The description states that given a set of parameters name, name_2, . . . , name_n, zero or one can be present in the API call: Output: ""ZeroOrOne(name, name_2, ... name_n)""
Case 5: The description states that given a set of parameters name, name_2, . . . , name_n, exactly one must be present in the API call: Output: ""OnlyOne(name, name_2, ... name_n)""
Case 6: The description states that given a set of parameters name, name_2, . . . , name_n, all of them or none must be present in the API call: Output: ""AllOrNone(name, name_2, ... name_n)""
Case 7: The description states that there is a relational relationship between some parameters: Output: ""name >= name_2"", where the standard relational operators can be used
Case 8: The description states that there is an arithmetic relationship between the value of parameters: Output: ""name_1 + name_2 <= value"", where the standard arithmetic operators can be used
Case 9: The description states there is a conditional relationship between parameters: Output: ""IF name THEN name_2"", where the standard logical operators can be used
Case 10: The description states that there exists a complex relationship between parameters, you can combine rules from the grammar to express a statement: Output: ""IF name==value THEN OnlyOne(name_2 AND name_3, name_4 AND name_5);

The grammar for statements is succinctly defined as follows:

Model:
    Dependency*;
Dependency:
    RelationalDependency | ArithmeticDependency |
    ConditionalDependency | PredefinedDependency;
RelationalDependency:
    Param RelationalOperator Param;
ArithmeticDependency:
    Operation RelationalOperator DOUBLE;
Operation:
    Param OperationContinuation |
    '(' Operation ')' OperationContinuation?;
OperationContinuation:
    ArithmeticOperator (Param | Operation);
ConditionalDependency:
    'IF' Predicate 'THEN' Predicate;
Predicate:
    Clause ClauseContinuation?;
Clause:
    (Term | RelationalDependency | ArithmeticDependency
    | PredefinedDependency) | 'NOT'? '(' Predicate ')';
Term:
    'NOT'? (Param | ParamValueRelation);
Param:
    ID | '[' ID ']';
ParamValueRelation:
    Param '==' STRING('|'STRING)* |
    Param 'LIKE' PATTERN_STRING | Param '==' BOOLEAN |
    Param RelationalOperator DOUBLE;
ClauseContinuation:
    ('AND' | 'OR') Predicate;
PredefinedDependency:
    'NOT'? ('Or' | 'OnlyOne' | 'AllOrNone' |
    'ZeroOrOne') '(' Clause (',' Clause)+ ')';
RelationalOperator:
    '<' | '>' | '<=' | '>=' | '==' | '!=';
ArithmeticOperator:
    '+' | '-' | '*' | '/';

If there are multiple dependency statements, return each one on a new line. Do not include any other text. Do not create dependencies on expected API responses.
Assume any ""
"" values in the input indicate either new lines or spaces. 
Here are some examples of expected outputs:

Input:
name: text 
description: The text to be checked. This or 'data' is required.
Output:Or(text, data);
Input: 
     name: idea
     description: 'An idea for a project. This and 'rating' are required.'
Output:OnlyOne(idea AND rating);
Input:
      name: partID
      description: 'The ID of the part. If partModel is specified partID must be specified'
Output:IF partModel THEN partID;
Input:
       name: language 
       description: The language of the client, not required if the country-code is USA or CAN.
Output:IF country-code!='USA' OR country-code=='CAN' THEN language;
Input:
        name: cost
        description: The cost of the product, this - profit must be greater than 500.
Output:cost - profit > 500;
Input:value for playlist description as displayed in Spotify Clients and in the Web API.
Output:",None
name,0.2,256,"
Analyze the provided API parameter description, and extract any example values for the parameter mentioned in the description. 
Then, generate a few additional example values that correspond to, or are in the same category as the provided values.
If there are no example values provided, simply generate values corresponding to the description, and always generate values when possible.  
If generating example values is not possible, return None. Consider the following cases: 

Case 1: The description contains example values USA, CAN, ZWE: Output: ""PROVIDED: USA, CAN, ZWE +++ GENERATED: BRA, FRA, GER ...""
Case 2: The description does not explicitly mention example values: Output: ""PROVIDED: None +++ GENERATED: BRA, FRA, GER, USA ...""
Case 3: The description does not explicitly mention example values, and it is not possible to generate example values: Output: ""None""

Assume any ""
"" values in the input represent spaces or new lines. Do not output any ""
"" strings.

Here are some examples of inputs and expected outputs:
Input:'The country code associated with the country. Examples are CAD, USD, etc...'
Output:PROVIDED: CAD, USD +++ GENERATED: AFG, ALA, ALB, DZA, ASM, AND, AGO, AIA, ATA, ATG, ARG, ARM, ABW, AUS, AUT, AZE, BHS, BHR, BGD, BRB, BLR, BEL, 
BLZ, BEN, BMU, BTN, BOL, BES, BIH, BWA, BVT, BRA, IOT, BRN, BGR, BFA, BDI, CPV, KHM, CMR, CAN, CYM, CAF, TCD, 
CHL, CHN, CXR, CCK, COL, COM, COG, COD, COK, CRI, CIV, HRV, CUB, CUW, CYP, CZE, DNK, DJI, DMA, DOM, ECU, EGY, 
SLV, GNQ, ERI, EST, SWZ, ETH, FLK, FRO, FJI, FIN, FRA, GUF, PYF, ATF, GAB, GMB, GEO, DEU, GHA, GIB, GRC, GRL, 
GRD, GLP, GUM, GTM, GGY, GIN, GNB, GUY, HTI, HMD, VAT, HND, HKG, HUN, ISL, IND, IDN, IRN, IRQ, IRL, IMN, ISR, 
ITA, JAM, JPN, JEY, JOR, KAZ, KEN, KIR, PRK, KOR, KWT, KGZ, LAO, LVA, LBN, LSO, LBR, LBY, LIE, LTU, LUX, MAC, 
MDG, MWI, MYS, MDV, MLI, MLT, MHL, MTQ, MRT, MUS, MYT, MEX, FSM, MDA, MCO, MNG, MNE, MSR, MAR, MOZ, MMR, NAM, 
NRU, NPL, NLD, NCL, NZL, NIC, NER, NGA, NIU, NFK, MKD, MNP, NOR, OMN, PAK, PLW, PSE, PAN, PNG, PRY, PER, PHL, 
PCN, POL, PRT, PRI, QAT, REU, ROU, RUS, RWA, BLM, SHN, KNA, LCA, MAF, SPM, VCT, WSM, SMR, STP, SAU, SEN, SRB, 
SYC, SLE, SGP, SXM, SVK, SVN, SLB, SOM, ZAF, SGS, SSD, ESP, LKA, SDN, SUR, SJM, SWE, CHE, SYR, TWN, TJK, TZA, 
THA, TLS, TGO, TKL, TON, TTO, TUN, TUR, TKM, TCA, TUV, UGA, UKR, ARE, GBR, USA, UMI, URY, UZB, VUT, VEN, VNM, 
VGB, VIR, WLF, ESH, YEM, ZMB, ZWE
Input:'The numbers for the percent grades must be to one decimal place (such as 10.6).'
Output:PROVIDED: 10.6 +++ GENERATED: 0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0, 2.1, 
2.2, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8, 2.9, 3.0, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6, 3.7, 3.8, 3.9, 4.0, 4.1, 4.2, 4.3, 4.4, 
4.5, 4.6, 4.7, 4.8, 4.9, 5.0, 5.1, 5.2, 5.3, 10.0, 99.9, 100.0
Input:'The title of the book to be rated.'
Output:PROVIDED: None +++ GENERATED: To Kill a Mockingbird, 1984, Pride and Prejudice, The Great Gatsby, Moby-Dick, The Catcher in the Rye, Harry Potter 
and the Sorcerer's Stone, The Lord of the Rings, One Hundred Years of Solitude, Brave New World, Sapiens: A Brief 
History of Humankind, The Immortal Life of Henrietta Lacks, Thinking, Fast and Slow, The Wright Brothers, The Diary of 
a Young Girl, Educated, The Art of War, The 7 Habits of Highly Effective People, Freakonomics, Quiet: The Power of 
Introverts in a World That Can't Stop Talking, Dune, Ender's Game, Neuromancer
Input:'The value for the number of products to consume. It must be greater than 12 and less than 50.'
Output:PROVIDED: None +++ GENERATED: None
Input:'The number of bank accounts associated. Cannot be less than 0.'
Output:PROVIDED: None +++ GENERATED: None
Input:The name for the new playlist, for example `""Your Coolest Playlist""` . This name does not need to be unique; a user may have several playlists with the same name.
Output:",None
name,0.2,256,"
Analyze the provided API parameter description and first estimate the parameter type. Then, according to the type, apply the following to determine restrictions on the parameter input:
If it is a number, determine if the description mentions minimum, maximum, or default possible values and output: ""min [minimum], max [maximum], default [default]"". 
If it's a string, word, or code, determine if the description mentions minimum or maximum possible character amounts or a default value, and output: ""minLength [minimum], maxLength [maximum], default [default]"". 
If it's an array or list, determine if the description mentions minimum or maximum possible list lengths or a default value, and output: ""minItems [minimum], maxItems [maximum], default [default]"".
If it's an object, determine if the description mentions minimum or maximum possible numbers of object properties or a default value, and output: ""minProperties [minimum], maxProperties [maximum], default [default]"".
If it is any other data type where there is a default value provided, output: ""min None, max None, default [default]"".
If you are unable to determine any minimum, maximum, or default restrictions, output ""None"". If you are able to determine only one either the minimum or maximum, output the undetermined value as ""None"".

Assume any ""
"" values in the input indicate either new lines or spaces. 

Here are some examples of inputs and expected outputs:

Input:'An idea for a project. This and 'rating' are required.'
Output:None
Input:'The maximum value is 50. If nothing is put in, default to 0.'
Output:min None, max 50, default 0
Input:'The timer counter. The value must be between 15.0 and 120.'
Output:min 15.0, max 120, default None
Input:'The input range. The smallest value possible is -120.8. The largest should be 179.652.'
Output:min -120.8, max 179.652, default None
Input:'The number of items to be investigated. The maximum is 9,999.99'
Output:min None, max 9999.99, default None
Input:'The name of the movie. The movie name cannot be shorter than 10 characters and longer than 20 characters.'
Output:minLength 10, maxLength 20, default None
Input:'The country code which can be 1-letter, 2-letter, or 3-letter.'
Output:minLength 1, maxLength 3, default None
Input:'A supplied language code that can either be 2-letter or 3-letter which is used to parse through a list of common phrases.'
Output:minLength 2, maxLength 3, default None
Input:'Search via county areas.'
Output:None
Input:'Identifies synonyms through word inputs.'
Output:None
Input:'After searching through a list of ISO country codes, input 2-letter or 3-letter codes to find their data.'
Output:minLength 2, maxLength 3, default None
Input:The name for the new playlist, for example `""Your Coolest Playlist""` . This name does not need to be unique; a user may have several playlists with the same name.
Output:","minLength 1, maxLength None, default ""Your"
name,0.2,256,"
Analyze the provided API parameter description and determine whether it clearly identifies the parameter's data type 
or formatting. 
The list of possible data types are as follows: string, number, integer, boolean, array, and object.
The list of format options are as follows: time, date, password, byte, binary, email, uuid, uri, url, hostname, ipv4, and ipv6. Use the types and formats available for the OpenAPI Specification. 
A list of collectionFormat types are as follows: csv, ssv, and pipes.
If the data type is an array, attempt to identify its item type. 
Output the answer as follows: ""type [type], items [item type], format [format], collectionFormat [collectionFormat]"". Output None when unable to determine any of the categories. 
For example, only output a non-None ""item type"" if the ""type"" is array.

Assume any ""
"" values in the input indicate either new lines or spaces. 

Here are some examples of inputs and expected outputs:

Input:'A space-separated list of percent grades corresponding to the student.'
Output:type array, items number, format None, collectionFormat ssv
Input:'This should contain the email of the sender.'
Output:type string, items None, format email, collectionFormat None
Input:'This value should be true if the assignment is available for regrade.'
Output:type boolean, items None, format None, collectionFormat None
Input:'A URL containing the website for evaluation.'
Output:type string, items None, format url, collectionFormat None
Input:'The date of the contest. The date must be within the last three months.'
Output:type string, items None, format date, collectionFormat None
Input:'The time that the project must be completed. Use Eastern Standard Timezone (EST).'
Output:type string, items None, format date-time, collectionFormat None
Input:'A list of region codes.'
Output:type array, items None, format None, collectionFormat None
Input:The name for the new playlist, for example `""Your Coolest Playlist""` . This name does not need to be unique; a user may have several playlists with the same name.
Output:",None
name,0.2,256,"
Identify the API parameter object by the grouping of its ""name"" and ""description"". Analyze the parameter description and extract logical constraints
in the provided format. Evaluate each case and determine whether it is applicable. Strictly follow the format and make no inferences. Only consider constraints
that are strictly required. Interpret the description in the least constraining manner, and assume Case 1 unless the other cases are obvious:

Case 1: The description isn't definitive about parameter requirements. Output ""None"".
Case 2: The description states the parameter ""name"" is required. Output: ""REQUIRED: name"". 
Case 3: The description states that parameter ""name"" or another parameter ""name"" is required. Output: ""Or(name, name)""
Case 4: The description states that given a set of parameters name, name_2, . . . , name_n, zero or one can be present in the API call: Output: ""ZeroOrOne(name, name_2, ... name_n)""
Case 5: The description states that given a set of parameters name, name_2, . . . , name_n, exactly one must be present in the API call: Output: ""OnlyOne(name, name_2, ... name_n)""
Case 6: The description states that given a set of parameters name, name_2, . . . , name_n, all of them or none must be present in the API call: Output: ""AllOrNone(name, name_2, ... name_n)""
Case 7: The description states that there is a relational relationship between some parameters: Output: ""name >= name_2"", where the standard relational operators can be used
Case 8: The description states that there is an arithmetic relationship between the value of parameters: Output: ""name_1 + name_2 <= value"", where the standard arithmetic operators can be used
Case 9: The description states there is a conditional relationship between parameters: Output: ""IF name THEN name_2"", where the standard logical operators can be used
Case 10: The description states that there exists a complex relationship between parameters, you can combine rules from the grammar to express a statement: Output: ""IF name==value THEN OnlyOne(name_2 AND name_3, name_4 AND name_5);

The grammar for statements is succinctly defined as follows:

Model:
    Dependency*;
Dependency:
    RelationalDependency | ArithmeticDependency |
    ConditionalDependency | PredefinedDependency;
RelationalDependency:
    Param RelationalOperator Param;
ArithmeticDependency:
    Operation RelationalOperator DOUBLE;
Operation:
    Param OperationContinuation |
    '(' Operation ')' OperationContinuation?;
OperationContinuation:
    ArithmeticOperator (Param | Operation);
ConditionalDependency:
    'IF' Predicate 'THEN' Predicate;
Predicate:
    Clause ClauseContinuation?;
Clause:
    (Term | RelationalDependency | ArithmeticDependency
    | PredefinedDependency) | 'NOT'? '(' Predicate ')';
Term:
    'NOT'? (Param | ParamValueRelation);
Param:
    ID | '[' ID ']';
ParamValueRelation:
    Param '==' STRING('|'STRING)* |
    Param 'LIKE' PATTERN_STRING | Param '==' BOOLEAN |
    Param RelationalOperator DOUBLE;
ClauseContinuation:
    ('AND' | 'OR') Predicate;
PredefinedDependency:
    'NOT'? ('Or' | 'OnlyOne' | 'AllOrNone' |
    'ZeroOrOne') '(' Clause (',' Clause)+ ')';
RelationalOperator:
    '<' | '>' | '<=' | '>=' | '==' | '!=';
ArithmeticOperator:
    '+' | '-' | '*' | '/';

If there are multiple dependency statements, return each one on a new line. Do not include any other text. Do not create dependencies on expected API responses.
Assume any ""
"" values in the input indicate either new lines or spaces. 
Here are some examples of expected outputs:

Input:
name: text 
description: The text to be checked. This or 'data' is required.
Output:Or(text, data);
Input: 
     name: idea
     description: 'An idea for a project. This and 'rating' are required.'
Output:OnlyOne(idea AND rating);
Input:
      name: partID
      description: 'The ID of the part. If partModel is specified partID must be specified'
Output:IF partModel THEN partID;
Input:
       name: language 
       description: The language of the client, not required if the country-code is USA or CAN.
Output:IF country-code!='USA' OR country-code=='CAN' THEN language;
Input:
        name: cost
        description: The cost of the product, this - profit must be greater than 500.
Output:cost - profit > 500;
Input:The name for the new playlist, for example `""Your Coolest Playlist""` . This name does not need to be unique; a user may have several playlists with the same name.
Output:",None
public,0.2,256,"
Analyze the provided API parameter description, and extract any example values for the parameter mentioned in the description. 
Then, generate a few additional example values that correspond to, or are in the same category as the provided values.
If there are no example values provided, simply generate values corresponding to the description, and always generate values when possible.  
If generating example values is not possible, return None. Consider the following cases: 

Case 1: The description contains example values USA, CAN, ZWE: Output: ""PROVIDED: USA, CAN, ZWE +++ GENERATED: BRA, FRA, GER ...""
Case 2: The description does not explicitly mention example values: Output: ""PROVIDED: None +++ GENERATED: BRA, FRA, GER, USA ...""
Case 3: The description does not explicitly mention example values, and it is not possible to generate example values: Output: ""None""

Assume any ""
"" values in the input represent spaces or new lines. Do not output any ""
"" strings.

Here are some examples of inputs and expected outputs:
Input:'The country code associated with the country. Examples are CAD, USD, etc...'
Output:PROVIDED: CAD, USD +++ GENERATED: AFG, ALA, ALB, DZA, ASM, AND, AGO, AIA, ATA, ATG, ARG, ARM, ABW, AUS, AUT, AZE, BHS, BHR, BGD, BRB, BLR, BEL, 
BLZ, BEN, BMU, BTN, BOL, BES, BIH, BWA, BVT, BRA, IOT, BRN, BGR, BFA, BDI, CPV, KHM, CMR, CAN, CYM, CAF, TCD, 
CHL, CHN, CXR, CCK, COL, COM, COG, COD, COK, CRI, CIV, HRV, CUB, CUW, CYP, CZE, DNK, DJI, DMA, DOM, ECU, EGY, 
SLV, GNQ, ERI, EST, SWZ, ETH, FLK, FRO, FJI, FIN, FRA, GUF, PYF, ATF, GAB, GMB, GEO, DEU, GHA, GIB, GRC, GRL, 
GRD, GLP, GUM, GTM, GGY, GIN, GNB, GUY, HTI, HMD, VAT, HND, HKG, HUN, ISL, IND, IDN, IRN, IRQ, IRL, IMN, ISR, 
ITA, JAM, JPN, JEY, JOR, KAZ, KEN, KIR, PRK, KOR, KWT, KGZ, LAO, LVA, LBN, LSO, LBR, LBY, LIE, LTU, LUX, MAC, 
MDG, MWI, MYS, MDV, MLI, MLT, MHL, MTQ, MRT, MUS, MYT, MEX, FSM, MDA, MCO, MNG, MNE, MSR, MAR, MOZ, MMR, NAM, 
NRU, NPL, NLD, NCL, NZL, NIC, NER, NGA, NIU, NFK, MKD, MNP, NOR, OMN, PAK, PLW, PSE, PAN, PNG, PRY, PER, PHL, 
PCN, POL, PRT, PRI, QAT, REU, ROU, RUS, RWA, BLM, SHN, KNA, LCA, MAF, SPM, VCT, WSM, SMR, STP, SAU, SEN, SRB, 
SYC, SLE, SGP, SXM, SVK, SVN, SLB, SOM, ZAF, SGS, SSD, ESP, LKA, SDN, SUR, SJM, SWE, CHE, SYR, TWN, TJK, TZA, 
THA, TLS, TGO, TKL, TON, TTO, TUN, TUR, TKM, TCA, TUV, UGA, UKR, ARE, GBR, USA, UMI, URY, UZB, VUT, VEN, VNM, 
VGB, VIR, WLF, ESH, YEM, ZMB, ZWE
Input:'The numbers for the percent grades must be to one decimal place (such as 10.6).'
Output:PROVIDED: 10.6 +++ GENERATED: 0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0, 2.1, 
2.2, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8, 2.9, 3.0, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6, 3.7, 3.8, 3.9, 4.0, 4.1, 4.2, 4.3, 4.4, 
4.5, 4.6, 4.7, 4.8, 4.9, 5.0, 5.1, 5.2, 5.3, 10.0, 99.9, 100.0
Input:'The title of the book to be rated.'
Output:PROVIDED: None +++ GENERATED: To Kill a Mockingbird, 1984, Pride and Prejudice, The Great Gatsby, Moby-Dick, The Catcher in the Rye, Harry Potter 
and the Sorcerer's Stone, The Lord of the Rings, One Hundred Years of Solitude, Brave New World, Sapiens: A Brief 
History of Humankind, The Immortal Life of Henrietta Lacks, Thinking, Fast and Slow, The Wright Brothers, The Diary of 
a Young Girl, Educated, The Art of War, The 7 Habits of Highly Effective People, Freakonomics, Quiet: The Power of 
Introverts in a World That Can't Stop Talking, Dune, Ender's Game, Neuromancer
Input:'The value for the number of products to consume. It must be greater than 12 and less than 50.'
Output:PROVIDED: None +++ GENERATED: None
Input:'The number of bank accounts associated. Cannot be less than 0.'
Output:PROVIDED: None +++ GENERATED: None
Input:Defaults to `true` . If `true` the playlist will be public, if `false` it will be private. To be able to create private playlists, the user must have granted the `playlist-modify-private` [scope](https://developer.spotify.com/documentation/general/guides/authorization-guide/#list-of-scopes)
Output:",None
public,0.2,256,"
Analyze the provided API parameter description and first estimate the parameter type. Then, according to the type, apply the following to determine restrictions on the parameter input:
If it is a number, determine if the description mentions minimum, maximum, or default possible values and output: ""min [minimum], max [maximum], default [default]"". 
If it's a string, word, or code, determine if the description mentions minimum or maximum possible character amounts or a default value, and output: ""minLength [minimum], maxLength [maximum], default [default]"". 
If it's an array or list, determine if the description mentions minimum or maximum possible list lengths or a default value, and output: ""minItems [minimum], maxItems [maximum], default [default]"".
If it's an object, determine if the description mentions minimum or maximum possible numbers of object properties or a default value, and output: ""minProperties [minimum], maxProperties [maximum], default [default]"".
If it is any other data type where there is a default value provided, output: ""min None, max None, default [default]"".
If you are unable to determine any minimum, maximum, or default restrictions, output ""None"". If you are able to determine only one either the minimum or maximum, output the undetermined value as ""None"".

Assume any ""
"" values in the input indicate either new lines or spaces. 

Here are some examples of inputs and expected outputs:

Input:'An idea for a project. This and 'rating' are required.'
Output:None
Input:'The maximum value is 50. If nothing is put in, default to 0.'
Output:min None, max 50, default 0
Input:'The timer counter. The value must be between 15.0 and 120.'
Output:min 15.0, max 120, default None
Input:'The input range. The smallest value possible is -120.8. The largest should be 179.652.'
Output:min -120.8, max 179.652, default None
Input:'The number of items to be investigated. The maximum is 9,999.99'
Output:min None, max 9999.99, default None
Input:'The name of the movie. The movie name cannot be shorter than 10 characters and longer than 20 characters.'
Output:minLength 10, maxLength 20, default None
Input:'The country code which can be 1-letter, 2-letter, or 3-letter.'
Output:minLength 1, maxLength 3, default None
Input:'A supplied language code that can either be 2-letter or 3-letter which is used to parse through a list of common phrases.'
Output:minLength 2, maxLength 3, default None
Input:'Search via county areas.'
Output:None
Input:'Identifies synonyms through word inputs.'
Output:None
Input:'After searching through a list of ISO country codes, input 2-letter or 3-letter codes to find their data.'
Output:minLength 2, maxLength 3, default None
Input:Defaults to `true` . If `true` the playlist will be public, if `false` it will be private. To be able to create private playlists, the user must have granted the `playlist-modify-private` [scope](https://developer.spotify.com/documentation/general/guides/authorization-guide/#list-of-scopes)
Output:","min None, max None, default true"
public,0.2,256,"
Analyze the provided API parameter description and determine whether it clearly identifies the parameter's data type 
or formatting. 
The list of possible data types are as follows: string, number, integer, boolean, array, and object.
The list of format options are as follows: time, date, password, byte, binary, email, uuid, uri, url, hostname, ipv4, and ipv6. Use the types and formats available for the OpenAPI Specification. 
A list of collectionFormat types are as follows: csv, ssv, and pipes.
If the data type is an array, attempt to identify its item type. 
Output the answer as follows: ""type [type], items [item type], format [format], collectionFormat [collectionFormat]"". Output None when unable to determine any of the categories. 
For example, only output a non-None ""item type"" if the ""type"" is array.

Assume any ""
"" values in the input indicate either new lines or spaces. 

Here are some examples of inputs and expected outputs:

Input:'A space-separated list of percent grades corresponding to the student.'
Output:type array, items number, format None, collectionFormat ssv
Input:'This should contain the email of the sender.'
Output:type string, items None, format email, collectionFormat None
Input:'This value should be true if the assignment is available for regrade.'
Output:type boolean, items None, format None, collectionFormat None
Input:'A URL containing the website for evaluation.'
Output:type string, items None, format url, collectionFormat None
Input:'The date of the contest. The date must be within the last three months.'
Output:type string, items None, format date, collectionFormat None
Input:'The time that the project must be completed. Use Eastern Standard Timezone (EST).'
Output:type string, items None, format date-time, collectionFormat None
Input:'A list of region codes.'
Output:type array, items None, format None, collectionFormat None
Input:Defaults to `true` . If `true` the playlist will be public, if `false` it will be private. To be able to create private playlists, the user must have granted the `playlist-modify-private` [scope](https://developer.spotify.com/documentation/general/guides/authorization-guide/#list-of-scopes)
Output:",None
public,0.2,256,"
Identify the API parameter object by the grouping of its ""name"" and ""description"". Analyze the parameter description and extract logical constraints
in the provided format. Evaluate each case and determine whether it is applicable. Strictly follow the format and make no inferences. Only consider constraints
that are strictly required. Interpret the description in the least constraining manner, and assume Case 1 unless the other cases are obvious:

Case 1: The description isn't definitive about parameter requirements. Output ""None"".
Case 2: The description states the parameter ""name"" is required. Output: ""REQUIRED: name"". 
Case 3: The description states that parameter ""name"" or another parameter ""name"" is required. Output: ""Or(name, name)""
Case 4: The description states that given a set of parameters name, name_2, . . . , name_n, zero or one can be present in the API call: Output: ""ZeroOrOne(name, name_2, ... name_n)""
Case 5: The description states that given a set of parameters name, name_2, . . . , name_n, exactly one must be present in the API call: Output: ""OnlyOne(name, name_2, ... name_n)""
Case 6: The description states that given a set of parameters name, name_2, . . . , name_n, all of them or none must be present in the API call: Output: ""AllOrNone(name, name_2, ... name_n)""
Case 7: The description states that there is a relational relationship between some parameters: Output: ""name >= name_2"", where the standard relational operators can be used
Case 8: The description states that there is an arithmetic relationship between the value of parameters: Output: ""name_1 + name_2 <= value"", where the standard arithmetic operators can be used
Case 9: The description states there is a conditional relationship between parameters: Output: ""IF name THEN name_2"", where the standard logical operators can be used
Case 10: The description states that there exists a complex relationship between parameters, you can combine rules from the grammar to express a statement: Output: ""IF name==value THEN OnlyOne(name_2 AND name_3, name_4 AND name_5);

The grammar for statements is succinctly defined as follows:

Model:
    Dependency*;
Dependency:
    RelationalDependency | ArithmeticDependency |
    ConditionalDependency | PredefinedDependency;
RelationalDependency:
    Param RelationalOperator Param;
ArithmeticDependency:
    Operation RelationalOperator DOUBLE;
Operation:
    Param OperationContinuation |
    '(' Operation ')' OperationContinuation?;
OperationContinuation:
    ArithmeticOperator (Param | Operation);
ConditionalDependency:
    'IF' Predicate 'THEN' Predicate;
Predicate:
    Clause ClauseContinuation?;
Clause:
    (Term | RelationalDependency | ArithmeticDependency
    | PredefinedDependency) | 'NOT'? '(' Predicate ')';
Term:
    'NOT'? (Param | ParamValueRelation);
Param:
    ID | '[' ID ']';
ParamValueRelation:
    Param '==' STRING('|'STRING)* |
    Param 'LIKE' PATTERN_STRING | Param '==' BOOLEAN |
    Param RelationalOperator DOUBLE;
ClauseContinuation:
    ('AND' | 'OR') Predicate;
PredefinedDependency:
    'NOT'? ('Or' | 'OnlyOne' | 'AllOrNone' |
    'ZeroOrOne') '(' Clause (',' Clause)+ ')';
RelationalOperator:
    '<' | '>' | '<=' | '>=' | '==' | '!=';
ArithmeticOperator:
    '+' | '-' | '*' | '/';

If there are multiple dependency statements, return each one on a new line. Do not include any other text. Do not create dependencies on expected API responses.
Assume any ""
"" values in the input indicate either new lines or spaces. 
Here are some examples of expected outputs:

Input:
name: text 
description: The text to be checked. This or 'data' is required.
Output:Or(text, data);
Input: 
     name: idea
     description: 'An idea for a project. This and 'rating' are required.'
Output:OnlyOne(idea AND rating);
Input:
      name: partID
      description: 'The ID of the part. If partModel is specified partID must be specified'
Output:IF partModel THEN partID;
Input:
       name: language 
       description: The language of the client, not required if the country-code is USA or CAN.
Output:IF country-code!='USA' OR country-code=='CAN' THEN language;
Input:
        name: cost
        description: The cost of the product, this - profit must be greater than 500.
Output:cost - profit > 500;
Input:Defaults to `true` . If `true` the playlist will be public, if `false` it will be private. To be able to create private playlists, the user must have granted the `playlist-modify-private` [scope](https://developer.spotify.com/documentation/general/guides/authorization-guide/#list-of-scopes)
Output:",None
