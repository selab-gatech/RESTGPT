openapi: 3.0.1
servers:
  - url: http://localhost:9008/v1
info:
  contact:
    name: sonallux
    url: https://github.com/sonallux/spotify-web-api
  title: Spotify Web API
  version: 2021.8.15
  x-apisguru-categories:
    - media
  x-logo:
    url: https://logo-core.clearbit.com/spotify.com
  x-origin:
    - format: openapi
      url: https://raw.githubusercontent.com/sonallux/spotify-web-api/master/spotify-web-api-generator-open-api/spotify-web-api-openapi.yml
      version: '3.0'
  x-providerName: spotify.com
  x-unofficialSpec: true
externalDocs:
  description: Find more info on the official Spotify Web API Reference
  url: https://developer.spotify.com/documentation/web-api/reference
tags:
  - description: Albums API
    externalDocs:
      description: Find more info on the official Spotify Web API Reference
      url: https://developer.spotify.com/documentation/web-api/reference/#category-albums
    name: category-albums
  - description: Artists API
    externalDocs:
      description: Find more info on the official Spotify Web API Reference
      url: https://developer.spotify.com/documentation/web-api/reference/#category-artists
    name: category-artists
  - description: Browse API
    externalDocs:
      description: Find more info on the official Spotify Web API Reference
      url: https://developer.spotify.com/documentation/web-api/reference/#category-browse
    name: category-browse
  - description: Episodes API
    externalDocs:
      description: Find more info on the official Spotify Web API Reference
      url: https://developer.spotify.com/documentation/web-api/reference/#category-episodes
    name: category-episodes
  - description: Follow API
    externalDocs:
      description: Find more info on the official Spotify Web API Reference
      url: https://developer.spotify.com/documentation/web-api/reference/#category-follow
    name: category-follow
  - description: Library API
    externalDocs:
      description: Find more info on the official Spotify Web API Reference
      url: https://developer.spotify.com/documentation/web-api/reference/#category-library
    name: category-library
  - description: Markets API
    externalDocs:
      description: Find more info on the official Spotify Web API Reference
      url: https://developer.spotify.com/documentation/web-api/reference/#category-markets
    name: category-markets
  - description: Personalization API
    externalDocs:
      description: Find more info on the official Spotify Web API Reference
      url: https://developer.spotify.com/documentation/web-api/reference/#category-personalization
    name: category-personalization
  - description: Player API
    externalDocs:
      description: Find more info on the official Spotify Web API Reference
      url: https://developer.spotify.com/documentation/web-api/reference/#category-player
    name: category-player
  - description: Playlists API
    externalDocs:
      description: Find more info on the official Spotify Web API Reference
      url: https://developer.spotify.com/documentation/web-api/reference/#category-playlists
    name: category-playlists
  - description: Search API
    externalDocs:
      description: Find more info on the official Spotify Web API Reference
      url: https://developer.spotify.com/documentation/web-api/reference/#category-search
    name: category-search
  - description: Shows API
    externalDocs:
      description: Find more info on the official Spotify Web API Reference
      url: https://developer.spotify.com/documentation/web-api/reference/#category-shows
    name: category-shows
  - description: Tracks API
    externalDocs:
      description: Find more info on the official Spotify Web API Reference
      url: https://developer.spotify.com/documentation/web-api/reference/#category-tracks
    name: category-tracks
  - description: Users Profile API
    externalDocs:
      description: Find more info on the official Spotify Web API Reference
      url: https://developer.spotify.com/documentation/web-api/reference/#category-users-profile
    name: category-users-profile
paths:
  /me:
    get:
      description: |-
        Get detailed profile information about the current user (including the
        current user's username).
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-current-users-profile
      operationId: endpoint-get-current-users-profile
      parameters: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PrivateUserObject'
          description: |-
            On success, the HTTP status code in the response header is `200` OK and the response body contains a [user object](https://developer.spotify.com/documentation/web-api/reference/#object-privateuserobject) in JSON format. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema). When requesting fields that you don't have the user's authorization to access, it will return error `403` Forbidden.

            **Important!** If the `user-read-email` scope is authorized, the returned JSON will include the email address that was entered when the user created their Spotify account. **This email address is unverified**; do not assume that the email address belongs to the user.
        default:
          $ref: '#/components/responses/ErrorResponse'
      security:
        - spotify_auth:
            - user-read-email
            - user-read-private
      summary: Get Current User's Profile
      tags:
        - category-users-profile
  /me/playlists:
    get:
      description: |-
        Get a list of the playlists owned or followed by the current Spotify
        user.
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-a-list-of-current-users-playlists
      operationId: endpoint-get-a-list-of-current-users-playlists
      parameters:
        - description: '''The maximum number of playlists to return. Default: 20. Minimum: 1. Maximum: 50.'''
          in: query
          name: limit
          required: false
          schema:
            format: int32
            type: integer
        - description: '''The index of the first playlist to return. Default: 0 (the first object). Maximum offset: 100.000. Use with `limit` to get the next set of playlists.'''
          in: query
          name: offset
          required: false
          schema:
            format: int32
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                externalDocs:
                  description: Find more info on the official Spotify Web API Reference
                  url: https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject
                properties:
                  href:
                    description: A link to the Web API endpoint returning the full result of the request
                    type: string
                  items:
                    description: The requested data.
                    items:
                      $ref: '#/components/schemas/SimplifiedPlaylistObject'
                    type: array
                  limit:
                    description: The maximum number of items in the response (as set in the query or by default).
                    format: int32
                    type: integer
                  next:
                    description: URL to the next page of items. ( `null` if none)
                    type: string
                  offset:
                    description: The offset of the items returned (as set in the query or by default)
                    format: int32
                    type: integer
                  previous:
                    description: URL to the previous page of items. ( `null` if none)
                    type: string
                  total:
                    description: The total number of items available to return.
                    format: int32
                    type: integer
                type: object
          description: On success, the HTTP status code in the response header is `200` OK and the response body contains an array of simplified [playlist objects](https://developer.spotify.com/documentation/web-api/reference/#object-simplifiedplaylistobject) (wrapped in a [paging object](https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject)) in JSON format. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema). Please note that the access token has to be tied to a user.
        default:
          $ref: '#/components/responses/ErrorResponse'
      security:
        - spotify_auth:
            - playlist-read-private
            - playlist-read-collaborative
      summary: Get a List of Current User's Playlists
      tags:
        - category-playlists
  /playlists/{playlist_id}:
    get:
      description: Get a playlist owned by a Spotify user.
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-playlist
      operationId: endpoint-get-playlist
      parameters:
        - description: The [Spotify ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for the playlist.
          in: path
          name: playlist_id
          required: true
          schema:
            type: string
        - description: |-
            An [ISO 3166-1 alpha-2 country code](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) or the string `from_token`. Provide this parameter if you want to apply [Track
            Relinking](https://developer.spotify.com/documentation/general/guides/track-relinking-guide/). For episodes, if a valid user access token is specified in the request header, the country associated with the user account will take priority over this parameter.
            *Note: If neither market or user country are provided, the episode is considered unavailable for the client.*
          in: query
          name: market
          required: false
          schema:
            type: string
        - description: 'Filters for the query: a comma-separated list of the fields to return. If omitted, all fields are returned. For example, to get just the playlist''''s description and URI: `fields=description,uri`. A dot separator can be used to specify non-reoccurring fields, while parentheses can be used to specify reoccurring fields within objects. For example, to get just the added date and user ID of the adder: `fields=tracks.items(added_at,added_by.id)`. Use multiple parentheses to drill down into nested objects, for example: `fields=tracks.items(track(name,href,album(name,href)))`. Fields can be excluded by prefixing them with an exclamation mark, for example: `fields=tracks.items(track(name,href,album(!name,href)))`'
          in: query
          name: fields
          required: false
          schema:
            type: string
        - description: 'A comma-separated list of item types that your client supports besides the default `track` type. Valid types are: `track` and `episode`. **Note** : This parameter was introduced to allow existing clients to maintain their current behaviour and might be deprecated in the future. In addition to providing this parameter, make sure that your client properly handles cases of new types in the future by checking against the `type` field of each object.'
          in: query
          name: additional_types
          required: false
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlaylistObject'
          description: On success, the response body contains a [playlist object](https://developer.spotify.com/documentation/web-api/reference/#object-playlistobject) in JSON format and the HTTP status code in the response header is `200` OK. If an episode is unavailable in the given `market`, its information will not be included in the response. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema). Requesting playlists that you do not have the user's authorization to access returns error `403` Forbidden.
        default:
          $ref: '#/components/responses/ErrorResponse'
      security:
        - spotify_auth: []
      summary: Get a Playlist
      tags:
        - category-playlists
    put:
      description: |-
        Change a playlist's name and public/private state. (The user must, of
        course, own the playlist.)
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/#endpoint-change-playlist-details
      operationId: endpoint-change-playlist-details
      parameters:
        - description: The [Spotify ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for the playlist.
          in: path
          name: playlist_id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                collaborative:
                  description: 'If `true` , the playlist will become collaborative and other users will be able to modify the playlist in their Spotify client. *Note: You can only set `collaborative` to `true` on non-public playlists.*'
                  type: boolean
                description:
                  description: Value for playlist description as displayed in Spotify Clients and in the Web API.
                  type: string
                name:
                  description: The new name for the playlist, for example `"My New Playlist Title"`
                  type: string
                public:
                  description: If `true` the playlist will be public, if `false` it will be private.
                  type: boolean
              type: object
        required: false
      responses:
        '200':
          description: |-
            On success the HTTP status code in the response header is `200` OK.

            On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema). Trying to change a playlist when you do not have the user's authorization returns error `403` Forbidden.
        default:
          $ref: '#/components/responses/ErrorResponse'
      security:
        - spotify_auth:
            - playlist-modify-public
            - playlist-modify-private
      summary: Change a Playlist's Details
      tags:
        - category-playlists
  /playlists/{playlist_id}/images:
    get:
      description: Get the current image associated with a specific playlist.
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-playlist-cover
      operationId: endpoint-get-playlist-cover
      parameters:
        - description: The [Spotify ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for the playlist.
          in: path
          name: playlist_id
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ImageObject'
                type: array
          description: |-
            On success, the response body contains a list of [image objects](https://developer.spotify.com/documentation/web-api/reference/#object-imageobject) in JSON format and the HTTP status code in the response header is `200` OK
            On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).
        default:
          $ref: '#/components/responses/ErrorResponse'
      security:
        - spotify_auth: []
      summary: Get a Playlist Cover Image
      tags:
        - category-playlists
  /playlists/{playlist_id}/tracks:
    delete:
      description: Remove one or more items from a user's playlist.
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/#endpoint-remove-tracks-playlist
      operationId: endpoint-remove-tracks-playlist
      parameters:
        - description: The [Spotify ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)
          in: path
          name: playlist_id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                snapshot_id:
                  description: The playlist's snapshot ID against which you want to make the changes. The API will validate that the specified items exist and in the specified positions and make the changes, even if more recent changes have been made to the playlist.
                  type: string
                tracks:
                  description: 'An array of objects containing [Spotify URIs](https://developer.spotify.com/spotify-documentation/web-api/#spotify-uris-and-ids) of the tracks or episodes to remove. For example: `{ "tracks": [{ "uri": "spotify:track:4iV5W9uYEdYUVa79Axb7Rh" },{ "uri": "spotify:track:1301WleyT98MSxVHPZCA6M" }] }`. A maximum of 100 objects can be sent at once.'
                  items:
                    type: object
                    properties:
                      uri:
                        type: string
                  type: array
              required:
                - tracks
              type: object
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SnapshotIdObject'
          description: |-
            On success, the response body contains a `snapshot_id` in JSON format
            and the HTTP status code in the response header is `200` OK. The `snapshot_id`
            can be used to identify your playlist version in future requests.

            On error, the header status code is an [error code](https://developer.spotify.com/spotify-documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/spotify-documentation/web-api/#response-schema).
            Trying to remove an item when you do not have the user's authorization returns error `403` Forbidden.
            Attempting to use several different ways to remove items returns `400` Bad Request.
            Other client errors returning `400` Bad Request include specifying invalid positions.
        default:
          $ref: '#/components/responses/ErrorResponse'
      security:
        - spotify_auth:
            - playlist-modify-public
            - playlist-modify-private
      summary: Remove Items from a Playlist
      tags:
        - category-playlists
    get:
      description: Get full details of the items of a playlist owned by a Spotify user.
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-playlists-tracks
      operationId: endpoint-get-playlists-tracks
      parameters:
        - description: The [Spotify ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for the playlist.
          in: path
          name: playlist_id
          required: true
          schema:
            type: string
        - description: |-
            An [ISO 3166-1 alpha-2 country code](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) or the string `from_token`. Provide this parameter if you want to apply [Track
            Relinking](https://developer.spotify.com/documentation/general/guides/track-relinking-guide/). For episodes, if a valid user access token is specified in the request header, the country associated with the user account will take priority over this parameter.
            *Note: If neither market or user country are provided, the episode is considered unavailable for the client.*
          in: query
          name: market
          required: false
          schema:
            type: string
        - description: |-
            Filters for the query: a comma-separated list of the fields to return. If omitted, all fields are returned. For example, to get just the total number of items and the request limit:
            `fields=total,limit`
            A dot separator can be used to specify non-reoccurring fields, while parentheses can be used to specify reoccurring fields within objects. For example, to get just the added date and user ID of the adder:
            `fields=items(added_at,added_by.id)`
            Use multiple parentheses to drill down into nested objects, for example:
            `fields=items(track(name,href,album(name,href)))`
            Fields can be excluded by prefixing them with an exclamation mark, for example:
            `fields=items.track.album(!external_urls,images)`
          in: query
          name: fields
          required: false
          schema:
            type: string
        - description: 'The maximum number of items to return. Default: 100. Minimum: 1. Maximum: 100.'
          in: query
          name: limit
          required: false
          schema:
            format: int32
            type: integer
        - description: 'The index of the first item to return. Default: 0 (the first object).'
          in: query
          name: offset
          required: false
          schema:
            format: int32
            type: integer
        - description: 'A comma-separated list of item types that your client supports besides the default `track` type. Valid types are: `track` and `episode`. **Note** : This parameter was introduced to allow existing clients to maintain their current behaviour and might be deprecated in the future. In addition to providing this parameter, make sure that your client properly handles cases of new types in the future by checking against the `type` field of each object.'
          in: query
          name: additional_types
          required: false
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                externalDocs:
                  description: Find more info on the official Spotify Web API Reference
                  url: https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject
                properties:
                  href:
                    description: A link to the Web API endpoint returning the full result of the request
                    type: string
                  items:
                    description: The requested data.
                    items:
                      $ref: '#/components/schemas/PlaylistTrackObject'
                    type: array
                  limit:
                    description: The maximum number of items in the response (as set in the query or by default).
                    format: int32
                    type: integer
                  next:
                    description: URL to the next page of items. ( `null` if none)
                    type: string
                  offset:
                    description: The offset of the items returned (as set in the query or by default)
                    format: int32
                    type: integer
                  previous:
                    description: URL to the previous page of items. ( `null` if none)
                    type: string
                  total:
                    description: The total number of items available to return.
                    format: int32
                    type: integer
                type: object
          description: On success, the response body contains an array of [track objects](https://developer.spotify.com/documentation/web-api/reference/#object-simplifiedtrackobject) and [episode objects](https://developer.spotify.com/documentation/web-api/reference/#object-simplifiedepisodeobject) (depends on the `additional_types` parameter), wrapped in a [paging object](https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject) in JSON format and the HTTP status code in the response header is `200` OK. If an episode is unavailable in the given `market`, its information will not be included in the response. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema). Requesting playlists that you do not have the user's authorization to access returns error `403` Forbidden.
        default:
          $ref: '#/components/responses/ErrorResponse'
      security:
        - spotify_auth: []
      summary: Get a Playlist's Items
      tags:
        - category-playlists
    post:
      description: Add one or more items to a user's playlist.
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/#endpoint-add-tracks-to-playlist
      operationId: endpoint-add-tracks-to-playlist
      parameters:
        - description: The [Spotify ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for the playlist.
          in: path
          name: playlist_id
          required: true
          schema:
            type: string
        - description: 'The position to insert the items, a zero-based index. For example, to insert the items in the first position: `position=0`; to insert the items in the third position: `position=2` . If omitted, the items will be appended to the playlist. Items are added in the order they are listed in the query string or request body.'
          in: query
          name: position
          required: false
          schema:
            format: int32
            type: integer
        - description: |-
            A comma-separated list of [Spotify URIs](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) to add, can be track or episode URIs. For example:
            `uris=spotify:track:4iV5W9uYEdYUVa79Axb7Rh, spotify:track:1301WleyT98MSxVHPZCA6M, spotify:episode:512ojhOuo1ktJprKbVcKyQ`
            A maximum of 100 items can be added in one request. *Note: it is likely that passing a large number of item URIs as a query parameter will exceed the maximum length of the request URI. When adding a large number of items, it is recommended to pass them in the request body, see below.*
          in: query
          name: uris
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                position:
                  description: 'The position to insert the items, a zero-based index. For example, to insert the items in the first position: `position=0` ; to insert the items in the third position: `position=2`. If omitted, the items will be appended to the playlist. Items are added in the order they appear in the uris array. For example: `{"uris": ["spotify:track:4iV5W9uYEdYUVa79Axb7Rh","spotify:track:1301WleyT98MSxVHPZCA6M"], "position": 3}`'
                  format: int32
                  type: integer
                uris:
                  description: |-
                    A JSON array of the [Spotify URIs](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) to add. For example: `{"uris": ["spotify:track:4iV5W9uYEdYUVa79Axb7Rh","spotify:track:1301WleyT98MSxVHPZCA6M", "spotify:episode:512ojhOuo1ktJprKbVcKyQ"]}`
                    A maximum of 100 items can be added in one request. *Note: if the `uris` parameter is present in the query string, any URIs listed here in the body will be ignored.*
                  items:
                    type: string
                  type: array
              type: object
        required: false
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SnapshotIdObject'
          description: On success, the HTTP status code in the response header is `201` Created. The response body contains a `snapshot_id` in JSON format. The `snapshot_id` can be used to identify your playlist version in future requests. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema). Trying to add an item when you do not have the user's authorization, or when there are more than 10.000 items in the playlist, returns error `403` Forbidden.
        default:
          $ref: '#/components/responses/ErrorResponse'
      security:
        - spotify_auth:
            - playlist-modify-public
            - playlist-modify-private
      summary: Add Items to a Playlist
      tags:
        - category-playlists
    put:
      description: |-
        Either reorder or replace items in a playlist depending on the request's parameters.
        To reorder items, include `range_start`, `insert_before`, `range_length` and `snapshot_id` in the request's body.
        To replace items, include `uris` as either a query parameter or in the request's body.
        Replacing items in a playlist will overwrite its existing items. This operation can be used for replacing or clearing items in a playlist.


        **Note**: Replace and reorder are mutually exclusive operations which share the same endpoint, but have different parameters.
        These operations can't be applied together in a single request.
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/#endpoint-reorder-or-replace-playlists-tracks
      operationId: endpoint-reorder-or-replace-playlists-tracks
      parameters:
        - description: The [Spotify ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for the playlist.
          in: path
          name: playlist_id
          required: true
          schema:
            type: string
        - description: |-
            A comma-separated list of [Spotify URIs](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) to set, can be track or episode URIs. For example: `uris=spotify:track:4iV5W9uYEdYUVa79Axb7Rh,spotify:track:1301WleyT98MSxVHPZCA6M,spotify:episode:512ojhOuo1ktJprKbVcKyQ`
            A maximum of 100 items can be set in one request.
          in: query
          name: uris
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                insert_before:
                  description: |-
                    The position where the items should be inserted.
                    To reorder the items to the end of the playlist, simply set *insert_before* to the position after the last item.
                    Examples:
                    To reorder the first item to the last position in a playlist with 10 items, set *range_start* to 0, and *insert_before* to 10.
                    To reorder the last item in a playlist with 10 items to the start of the playlist, set *range_start* to 9, and *insert_before* to 0.
                  format: int32
                  type: integer
                range_length:
                  description: |-
                    The amount of items to be reordered. Defaults to 1 if not set.
                    The range of items to be reordered begins from the *range_start* position, and includes the *range_length* subsequent items.
                    Example:
                    To move the items at index 9-10 to the start of the playlist, *range_start* is set to 9, and *range_length* is set to 2.
                  format: int32
                  type: integer
                range_start:
                  description: The position of the first item to be reordered.
                  format: int32
                  type: integer
                snapshot_id:
                  description: The playlist's snapshot ID against which you want to make the changes.
                  type: string
                uris:
                  description: |-
                    A comma-separated list of [Spotify URIs](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) to set, can be track or episode URIs. For example: `uris=spotify:track:4iV5W9uYEdYUVa79Axb7Rh,spotify:track:1301WleyT98MSxVHPZCA6M,spotify:episode:512ojhOuo1ktJprKbVcKyQ`
                    A maximum of 100 items can be set in one request.
                  items:
                    type: string
                  type: array
              type: object
        required: false
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SnapshotIdObject'
          description: |-
            On a successful **reorder** operation, the response body contains a `snapshot_id` in JSON format
            and the HTTP status code in the response header is `200` OK. The `snapshot_id`
            can be used to identify your playlist version in future requests.

            On a successful **replace** operation, the HTTP status code in the response header is `201`
            Created.

            On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes),
            the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema),
            and the existing playlist is unmodified.
            Trying to set an item when you do not have the user's authorization returns error `403` Forbidden.
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SnapshotIdObject'
          description: |-
            On a successful **reorder** operation, the response body contains a `snapshot_id` in JSON format
            and the HTTP status code in the response header is `200` OK. The `snapshot_id`
            can be used to identify your playlist version in future requests.

            On a successful **replace** operation, the HTTP status code in the response header is `201`
            Created.

            On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes),
            the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema),
            and the existing playlist is unmodified.
            Trying to set an item when you do not have the user's authorization returns error `403` Forbidden.
        default:
          $ref: '#/components/responses/ErrorResponse'
      security:
        - spotify_auth:
            - playlist-modify-public
            - playlist-modify-private
      summary: Reorder or Replace a Playlist's Items
      tags:
        - category-playlists
  /search:
    get:
      description: |-
        Get Spotify Catalog information about albums, artists, playlists, tracks, shows or episodes
        that match a keyword string.
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/#endpoint-search
      operationId: endpoint-search
      parameters:
        - description: |-
            Search [query](#writing-a-query---guidelines) keywords and optional field filters and operators.
            For example:
            `q=roadhouse%20blues`.
          in: query
          name: q
          required: true
          schema:
            type: string
        - description: |-
            A comma-separated list of item types to search across.
            Valid types are: `album` , `artist`, `playlist`, `track`, `show` and `episode`.
            Search results include hits from all the specified item types.
            For example: `q=name:abacab&type=album,track` returns both albums ***and*** tracks with "abacab" included in their name.
          in: query
          name: type
          required: true
          schema:
            type: string
        - description: |-
            An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) or the string `from_token`.
            If a country code is specified, only content that is playable in that market is returned.
            **Note** :
            - Playlist results are not affected by the market parameter.
            - If market is set to `from_token`, and a valid access token is specified in the request header, only content playable in the country associated with the user account, is returned.
            - Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/). A user must grant access to the `user-read-private` scope prior to when the access token is issued.
          in: query
          name: market
          required: false
          schema:
            type: string
        - description: |-
            Maximum number of results to return.
            Default: 20
            Minimum: 1
            Maximum: 50
            **Note** : The limit is applied within each type, not on the total response.
            For example, if the limit value is 3 and the type is `artist,album`, the response contains 3 artists and 3 albums.
          in: query
          name: limit
          required: false
          schema:
            format: int32
            type: integer
        - description: |-
            The index of the first result to return.
            Default: 0 (the first result).
            Maximum offset (including limit): 1,000.
            Use with limit to get the next page of search results.
          in: query
          name: offset
          required: false
          schema:
            format: int32
            type: integer
        - description: |-
            Possible values: *audio*
            If *include_external=audio* is specified the response will include any relevant audio content that is hosted externally.
            By default external content is filtered out from responses.
          in: query
          name: include_external
          required: false
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchResponseObject'
          description: |-
            **On success**:

            - In the response ***header*** the HTTP status code is `200` OK.
            - For each type provided in the `type` parameter, the response ***body*** contains an array of [artist objects](https://developer.spotify.com/documentation/web-api/reference/#object-artistobject) / [simplified album objects](https://developer.spotify.com/documentation/web-api/reference/#object-simplifiedalbumobject) / [track objects](https://developer.spotify.com/documentation/web-api/reference/#object-trackobject) / [simplified show objects](https://developer.spotify.com/documentation/web-api/reference/#object-simplifiedshowobject) / [simplified episode objects](https://developer.spotify.com/documentation/web-api/reference/#object-simplifiedepisodeobject) wrapped in a [paging object](https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject) in JSON.

            **On error**:

            - The ***header*** status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes).
            - The response ***body*** contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).
        default:
          $ref: '#/components/responses/ErrorResponse'
      security:
        - spotify_auth: []
      summary: Search for an Item
      tags:
        - category-search
  /users/{user_id}/playlists:
    get:
      description: Get a list of the playlists owned or followed by a Spotify user.
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-list-users-playlists
      operationId: endpoint-get-list-users-playlists
      parameters:
        - description: The user's [Spotify user ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids).
          in: path
          name: user_id
          required: true
          schema:
            type: string
        - description: 'The maximum number of playlists to return. Default: 20. Minimum: 1. Maximum: 50.'
          in: query
          name: limit
          required: false
          schema:
            format: int32
            type: integer
        - description: 'The index of the first playlist to return. Default: 0 (the first object). Maximum offset: 100.000. Use with `limit` to get the next set of playlists.'
          in: query
          name: offset
          required: false
          schema:
            format: int32
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                externalDocs:
                  description: Find more info on the official Spotify Web API Reference
                  url: https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject
                properties:
                  href:
                    description: A link to the Web API endpoint returning the full result of the request
                    type: string
                  items:
                    description: The requested data.
                    items:
                      $ref: '#/components/schemas/SimplifiedPlaylistObject'
                    type: array
                  limit:
                    description: The maximum number of items in the response (as set in the query or by default).
                    format: int32
                    type: integer
                  next:
                    description: URL to the next page of items. ( `null` if none)
                    type: string
                  offset:
                    description: The offset of the items returned (as set in the query or by default)
                    format: int32
                    type: integer
                  previous:
                    description: URL to the previous page of items. ( `null` if none)
                    type: string
                  total:
                    description: The total number of items available to return.
                    format: int32
                    type: integer
                type: object
          description: On success, the HTTP status code in the response header is `200` OK and the response body contains an array of simplified [playlist objects](https://developer.spotify.com/documentation/web-api/reference/#object-simplifiedplaylistobject) (wrapped in a [paging object](https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject)) in JSON format. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).
        default:
          $ref: '#/components/responses/ErrorResponse'
      security:
        - spotify_auth:
            - playlist-read-private
            - playlist-read-collaborative
      summary: Get a List of a User's Playlists
      tags:
        - category-playlists
    post:
      description: |-
        Create a playlist for a Spotify user. (The playlist will be empty until
        you [add tracks](https://developer.spotify.com/documentation/web-api/reference/#endpoint-add-tracks-to-playlist).)
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/#endpoint-create-playlist
      operationId: endpoint-create-playlist
      parameters:
        - description: The user's [Spotify user ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids).
          in: path
          name: user_id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                collaborative:
                  description: Defaults to `false` . If `true` the playlist will be collaborative. Note that to create a collaborative playlist you must also set `public` to `false` . To create collaborative playlists you must have granted `playlist-modify-private` and `playlist-modify-public` [scopes](https://developer.spotify.com/documentation/general/guides/authorization-guide/#list-of-scopes) .
                  type: boolean
                description:
                  description: value for playlist description as displayed in Spotify Clients and in the Web API.
                  type: string
                name:
                  description: The name for the new playlist, for example `"Your Coolest Playlist"` . This name does not need to be unique; a user may have several playlists with the same name.
                  type: string
                public:
                  description: Defaults to `true` . If `true` the playlist will be public, if `false` it will be private. To be able to create private playlists, the user must have granted the `playlist-modify-private` [scope](https://developer.spotify.com/documentation/general/guides/authorization-guide/#list-of-scopes)
                  type: boolean
              required:
                - name
              type: object
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlaylistObject'
          description: |-
            On success, the response body contains the created [playlist object](https://developer.spotify.com/documentation/web-api/reference/#object-playlistobject)
            in JSON format and the HTTP status code in the response header is `200` OK or
            `201` Created. There is also a `Location` response header giving the Web API
            endpoint for the new playlist.

            On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema). Trying to create a playlist when you do not have the user's authorization returns error `403` Forbidden.
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlaylistObject'
          description: |-
            On success, the response body contains the created [playlist object](https://developer.spotify.com/documentation/web-api/reference/#object-playlistobject)
            in JSON format and the HTTP status code in the response header is `200` OK or
            `201` Created. There is also a `Location` response header giving the Web API
            endpoint for the new playlist.

            On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema). Trying to create a playlist when you do not have the user's authorization returns error `403` Forbidden.
        default:
          $ref: '#/components/responses/ErrorResponse'
      security:
        - spotify_auth:
            - playlist-modify-public
            - playlist-modify-private
      summary: Create a Playlist
      tags:
        - category-playlists
components:
  responses:
    ErrorResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponseObject'
      description: Unexpected error
  schemas:
    AlbumObject:
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/#object-albumobject
      properties:
        album_type:
          description: The type of the album.
          type: string
        artists:
          description: The artists of the album. Each artist object includes a link in `href` to more detailed information about the artist.
          items:
            $ref: '#/components/schemas/ArtistObject'
          type: array
        available_markets:
          description: 'The markets in which the album is available: [ISO 3166-1 alpha-2 country codes](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). Note that an album is considered available in a market when at least one of its tracks is available in that market.'
          items:
            type: string
          type: array
        copyrights:
          description: The copyright statements of the album.
          items:
            $ref: '#/components/schemas/CopyrightObject'
          type: array
        external_ids:
          $ref: '#/components/schemas/ExternalIdObject'
        external_urls:
          $ref: '#/components/schemas/ExternalUrlObject'
        genres:
          description: A list of the genres used to classify the album. (If not yet classified, the array is empty.)
          items:
            type: string
          type: array
        href:
          description: A link to the Web API endpoint providing full details of the album.
          type: string
        id:
          description: The Spotify ID for the album.
          type: string
        images:
          description: The cover art for the album in various sizes, widest first.
          items:
            $ref: '#/components/schemas/ImageObject'
          type: array
        label:
          description: The label for the album.
          type: string
        name:
          description: The name of the album. In case of an album takedown, the value may be an empty string.
          type: string
        popularity:
          description: The popularity of the album, with 100 being the most popular. The popularity is calculated from the popularity of the album's individual tracks.
          format: int32
          type: integer
        release_date:
          description: The date the album was first released. Depending on the precision, it might be shown as "1981" or "1981-12".
          type: string
        release_date_precision:
          description: The precision with which release_date value is known.
          type: string
        restrictions:
          $ref: '#/components/schemas/AlbumRestrictionObject'
        total_tracks:
          description: The total number of tracks in the album.
          format: int32
          type: integer
        tracks:
          description: The tracks of the album.
          externalDocs:
            description: Find more info on the official Spotify Web API Reference
            url: https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject
          properties:
            href:
              description: A link to the Web API endpoint returning the full result of the request
              type: string
            items:
              description: The requested data.
              items:
                $ref: '#/components/schemas/SimplifiedTrackObject'
              type: array
            limit:
              description: The maximum number of items in the response (as set in the query or by default).
              format: int32
              type: integer
            next:
              description: URL to the next page of items. ( `null` if none)
              type: string
            offset:
              description: The offset of the items returned (as set in the query or by default)
              format: int32
              type: integer
            previous:
              description: URL to the previous page of items. ( `null` if none)
              type: string
            total:
              description: The total number of items available to return.
              format: int32
              type: integer
          type: object
        type:
          description: The object type.
          type: string
        uri:
          description: The Spotify URI for the album.
          type: string
      type: object
    AlbumRestrictionObject:
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/#object-albumrestrictionobject
      properties:
        reason:
          description: The reason for the restriction. Albums may be restricted if the content is not available in a given market, to the user's subscription type, or when the user's account is set to not play explicit content. Additional reasons may be added in the future.
          type: string
      type: object
    AlbumsObject:
      properties:
        albums:
          description: ''
          items:
            $ref: '#/components/schemas/AlbumObject'
          type: array
      type: object
    ArtistObject:
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/#object-artistobject
      properties:
        external_urls:
          $ref: '#/components/schemas/ExternalUrlObject'
        followers:
          $ref: '#/components/schemas/FollowersObject'
        genres:
          description: A list of the genres the artist is associated with. If not yet classified, the array is empty.
          items:
            type: string
          type: array
        href:
          description: A link to the Web API endpoint providing full details of the artist.
          type: string
        id:
          description: The [Spotify ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for the artist.
          type: string
        images:
          description: Images of the artist in various sizes, widest first.
          items:
            $ref: '#/components/schemas/ImageObject'
          type: array
        name:
          description: The name of the artist.
          type: string
        popularity:
          description: The popularity of the artist. The value will be between 0 and 100, with 100 being the most popular. The artist's popularity is calculated from the popularity of all the artist's tracks.
          format: int32
          type: integer
        type:
          description: The object type.
          type: string
        uri:
          description: The [Spotify URI](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for the artist.
          type: string
      type: object
    ArtistsObject:
      properties:
        artists:
          description: ''
          items:
            $ref: '#/components/schemas/ArtistObject'
          type: array
      type: object
    AudioAnalysisObject:
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/tracks/get-audio-analysis/#audio-analysis-object
      properties:
        bars:
          description: The time intervals of the bars throughout the track. A bar (or measure) is a segment of time defined as a given number of beats. Bar offsets also indicate downbeats, the first beat of the measure.
          items:
            $ref: '#/components/schemas/TimeIntervalObject'
          type: array
        beats:
          description: The time intervals of beats throughout the track. A beat is the basic time unit of a piece of music; for example, each tick of a metronome. Beats are typically multiples of tatums.
          items:
            $ref: '#/components/schemas/TimeIntervalObject'
          type: array
        sections:
          description: Sections are defined by large variations in rhythm or timbre, e.g. chorus, verse, bridge, guitar solo, etc. Each section contains its own descriptions of tempo, key, mode, time_signature, and loudness.
          items:
            $ref: '#/components/schemas/SectionObject'
          type: array
        segments:
          description: Audio segments attempts to subdivide a song into many segments, with each segment containing a roughly consistent sound throughout its duration.
          items:
            $ref: '#/components/schemas/SegmentObject'
          type: array
        tatums:
          description: A tatum represents the lowest regular pulse train that a listener intuitively infers from the timing of perceived musical events (segments).
          items:
            $ref: '#/components/schemas/TimeIntervalObject'
          type: array
      type: object
    AudioFeaturesArrayObject:
      properties:
        audio_features:
          description: ''
          items:
            $ref: '#/components/schemas/AudioFeaturesObject'
          type: array
      type: object
    AudioFeaturesObject:
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/#object-audiofeaturesobject
      properties:
        acousticness:
          description: A confidence measure from 0.0 to 1.0 of whether the track is acoustic. 1.0 represents high confidence the track is acoustic.
          type: number
        analysis_url:
          description: An HTTP URL to access the full audio analysis of this track. An access token is required to access this data.
          type: string
        danceability:
          description: Danceability describes how suitable a track is for dancing based on a combination of musical elements including tempo, rhythm stability, beat strength, and overall regularity. A value of 0.0 is least danceable and 1.0 is most danceable.
          type: number
        duration_ms:
          description: The duration of the track in milliseconds.
          format: int32
          type: integer
        energy:
          description: Energy is a measure from 0.0 to 1.0 and represents a perceptual measure of intensity and activity. Typically, energetic tracks feel fast, loud, and noisy. For example, death metal has high energy, while a Bach prelude scores low on the scale. Perceptual features contributing to this attribute include dynamic range, perceived loudness, timbre, onset rate, and general entropy.
          type: number
        id:
          description: The Spotify ID for the track.
          type: string
        instrumentalness:
          description: Predicts whether a track contains no vocals. "Ooh" and "aah" sounds are treated as instrumental in this context. Rap or spoken word tracks are clearly "vocal". The closer the instrumentalness value is to 1.0, the greater likelihood the track contains no vocal content. Values above 0.5 are intended to represent instrumental tracks, but confidence is higher as the value approaches 1.0.
          type: number
        key:
          description: The key the track is in. Integers map to pitches using standard [Pitch Class notation](https://en.wikipedia.org/wiki/Pitch_class) . E.g. 0 = C, 1 = C♯/D♭, 2 = D, and so on.
          format: int32
          type: integer
        liveness:
          description: Detects the presence of an audience in the recording. Higher liveness values represent an increased probability that the track was performed live. A value above 0.8 provides strong likelihood that the track is live.
          type: number
        loudness:
          description: The overall loudness of a track in decibels (dB). Loudness values are averaged across the entire track and are useful for comparing relative loudness of tracks. Loudness is the quality of a sound that is the primary psychological correlate of physical strength (amplitude). Values typical range between -60 and 0 db.
          type: number
        mode:
          description: Mode indicates the modality (major or minor) of a track, the type of scale from which its melodic content is derived. Major is represented by 1 and minor is 0.
          format: int32
          type: integer
        speechiness:
          description: Speechiness detects the presence of spoken words in a track. The more exclusively speech-like the recording (e.g. talk show, audio book, poetry), the closer to 1.0 the attribute value. Values above 0.66 describe tracks that are probably made entirely of spoken words. Values between 0.33 and 0.66 describe tracks that may contain both music and speech, either in sections or layered, including such cases as rap music. Values below 0.33 most likely represent music and other non-speech-like tracks.
          type: number
        tempo:
          description: The overall estimated tempo of a track in beats per minute (BPM). In musical terminology, tempo is the speed or pace of a given piece and derives directly from the average beat duration.
          type: number
        time_signature:
          description: An estimated overall time signature of a track. The time signature (meter) is a notational convention to specify how many beats are in each bar (or measure).
          format: int32
          type: integer
        track_href:
          description: A link to the Web API endpoint providing full details of the track.
          type: string
        type:
          description: 'The object type: "audio_features"'
          type: string
        uri:
          description: The Spotify URI for the track.
          type: string
        valence:
          description: A measure from 0.0 to 1.0 describing the musical positiveness conveyed by a track. Tracks with high valence sound more positive (e.g. happy, cheerful, euphoric), while tracks with low valence sound more negative (e.g. sad, depressed, angry).
          type: number
      type: object
    CategoriesObject:
      properties:
        categories:
          description: ''
          externalDocs:
            description: Find more info on the official Spotify Web API Reference
            url: https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject
          properties:
            href:
              description: A link to the Web API endpoint returning the full result of the request
              type: string
            items:
              description: The requested data.
              items:
                $ref: '#/components/schemas/CategoryObject'
              type: array
            limit:
              description: The maximum number of items in the response (as set in the query or by default).
              format: int32
              type: integer
            next:
              description: URL to the next page of items. ( `null` if none)
              type: string
            offset:
              description: The offset of the items returned (as set in the query or by default)
              format: int32
              type: integer
            previous:
              description: URL to the previous page of items. ( `null` if none)
              type: string
            total:
              description: The total number of items available to return.
              format: int32
              type: integer
          type: object
      type: object
    CategoryObject:
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/#object-categoryobject
      properties:
        href:
          description: A link to the Web API endpoint returning full details of the category.
          type: string
        icons:
          description: The category icon, in various sizes.
          items:
            $ref: '#/components/schemas/ImageObject'
          type: array
        id:
          description: The [Spotify category ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) of the category.
          type: string
        name:
          description: The name of the category.
          type: string
      type: object
    ContextObject:
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/#object-contextobject
      properties:
        external_urls:
          $ref: '#/components/schemas/ExternalUrlObject'
        href:
          description: A link to the Web API endpoint providing full details of the track.
          type: string
        type:
          description: The object type, e.g. "artist", "playlist", "album", "show".
          type: string
        uri:
          description: The [Spotify URI](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for the context.
          type: string
      type: object
    CopyrightObject:
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/#object-copyrightobject
      properties:
        text:
          description: The copyright text for this content.
          type: string
        type:
          description: 'The type of copyright: `C` = the copyright, `P` = the sound recording (performance) copyright.'
          type: string
      type: object
    CurrentlyPlayingContextObject:
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/#object-currentlyplayingcontextobject
      properties:
        actions:
          $ref: '#/components/schemas/DisallowsObject'
        context:
          $ref: '#/components/schemas/ContextObject'
        currently_playing_type:
          description: The object type of the currently playing item. Can be one of `track`, `episode`, `ad` or `unknown`.
          type: string
        device:
          $ref: '#/components/schemas/DeviceObject'
        is_playing:
          description: If something is currently playing, return `true`.
          type: boolean
        item:
          description: The currently playing track or episode. Can be `null`.
          oneOf:
            - $ref: '#/components/schemas/TrackObject'
            - $ref: '#/components/schemas/EpisodeObject'
        progress_ms:
          description: Progress into the currently playing track or episode. Can be `null`.
          format: int32
          type: integer
        repeat_state:
          description: off, track, context
          type: string
        shuffle_state:
          description: If shuffle is on or off.
          type: string
        timestamp:
          description: Unix Millisecond Timestamp when data was fetched.
          format: int32
          type: integer
      type: object
    CurrentlyPlayingObject:
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/#object-currentlyplayingobject
      properties:
        context:
          $ref: '#/components/schemas/ContextObject'
        currently_playing_type:
          description: The object type of the currently playing item. Can be one of `track`, `episode`, `ad` or `unknown`.
          type: string
        is_playing:
          description: If something is currently playing, return `true`.
          type: boolean
        item:
          description: The currently playing track or episode. Can be `null`.
          oneOf:
            - $ref: '#/components/schemas/TrackObject'
            - $ref: '#/components/schemas/EpisodeObject'
        progress_ms:
          description: Progress into the currently playing track or episode. Can be `null`.
          format: int32
          type: integer
        timestamp:
          description: Unix Millisecond Timestamp when data was fetched
          format: int32
          type: integer
      type: object
    CursorObject:
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/#object-cursorobject
      properties:
        after:
          description: The cursor to use as key to find the next page of items.
          type: string
      type: object
    CursorPagingObject:
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/#object-cursorpagingobject
      properties:
        cursors:
          $ref: '#/components/schemas/CursorObject'
        href:
          description: A link to the Web API endpoint returning the full result of the request.
          type: string
        items:
          description: The requested data.
          items:
            type: object
          type: array
        limit:
          description: The maximum number of items in the response (as set in the query or by default).
          format: int32
          type: integer
        next:
          description: URL to the next page of items. ( `null` if none)
          type: string
        total:
          description: The total number of items available to return.
          format: int32
          type: integer
      type: object
    DeviceObject:
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/#object-deviceobject
      properties:
        id:
          description: The device ID.
          type: string
        is_active:
          description: If this device is the currently active device.
          type: boolean
        is_private_session:
          description: If this device is currently in a private session.
          type: boolean
        is_restricted:
          description: Whether controlling this device is restricted. At present if this is "true" then no Web API commands will be accepted by this device.
          type: boolean
        name:
          description: The name of the device.
          type: string
        type:
          description: Device type, such as "computer", "smartphone" or "speaker".
          type: string
        volume_percent:
          description: The current volume in percent.
          format: int32
          type: integer
      type: object
    DevicesObject:
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/#object-devicesobject
      properties:
        devices:
          description: A list of 0..n Device objects
          items:
            $ref: '#/components/schemas/DeviceObject'
          type: array
      type: object
    DisallowsObject:
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/#object-disallowsobject
      properties:
        interrupting_playback:
          description: Interrupting playback. Optional field.
          type: boolean
        pausing:
          description: Pausing. Optional field.
          type: boolean
        resuming:
          description: Resuming. Optional field.
          type: boolean
        seeking:
          description: Seeking playback location. Optional field.
          type: boolean
        skipping_next:
          description: Skipping to the next context. Optional field.
          type: boolean
        skipping_prev:
          description: Skipping to the previous context. Optional field.
          type: boolean
        toggling_repeat_context:
          description: Toggling repeat context flag. Optional field.
          type: boolean
        toggling_repeat_track:
          description: Toggling repeat track flag. Optional field.
          type: boolean
        toggling_shuffle:
          description: Toggling shuffle flag. Optional field.
          type: boolean
        transferring_playback:
          description: Transfering playback between devices. Optional field.
          type: boolean
      type: object
    EpisodeObject:
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/#object-episodeobject
      properties:
        audio_preview_url:
          description: A URL to a 30 second preview (MP3 format) of the episode. `null` if not available.
          type: string
        description:
          description: A description of the episode. HTML tags are stripped away from this field, use `html_description` field in case HTML tags are needed.
          type: string
        duration_ms:
          description: The episode length in milliseconds.
          format: int32
          type: integer
        explicit:
          description: Whether or not the episode has explicit content (true = yes it does; false = no it does not OR unknown).
          type: boolean
        external_urls:
          $ref: '#/components/schemas/ExternalUrlObject'
        href:
          description: A link to the Web API endpoint providing full details of the episode.
          type: string
        html_description:
          description: A description of the episode. This field may contain HTML tags.
          type: string
        id:
          description: The [Spotify ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for the episode.
          type: string
        images:
          description: The cover art for the episode in various sizes, widest first.
          items:
            $ref: '#/components/schemas/ImageObject'
          type: array
        is_externally_hosted:
          description: True if the episode is hosted outside of Spotify's CDN.
          type: boolean
        is_playable:
          description: True if the episode is playable in the given market. Otherwise false.
          type: boolean
        language:
          description: '**Note: This field is deprecated and might be removed in the future. Please use the `languages` field instead.** The language used in the episode, identified by a [ISO 639](https://en.wikipedia.org/wiki/ISO_639) code.'
          type: string
        languages:
          description: A list of the languages used in the episode, identified by their [ISO 639](https://en.wikipedia.org/wiki/ISO_639) code.
          items:
            type: string
          type: array
        name:
          description: The name of the episode.
          type: string
        release_date:
          description: The date the episode was first released, for example `"1981-12-15"`. Depending on the precision, it might be shown as `"1981"` or `"1981-12"`.
          type: string
        release_date_precision:
          description: The precision with which `release_date` value is known.
          type: string
        restrictions:
          $ref: '#/components/schemas/EpisodeRestrictionObject'
        resume_point:
          $ref: '#/components/schemas/ResumePointObject'
        show:
          $ref: '#/components/schemas/SimplifiedShowObject'
        type:
          description: The object type.
          type: string
        uri:
          description: The [Spotify URI](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for the episode.
          type: string
      type: object
    EpisodeRestrictionObject:
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/#object-episoderestrictionobject
      properties:
        reason:
          description: |-
            The reason for the restriction. Supported values:  

            - `market` - The content item is not available in the given market.  
            - `product` - The content item is not available for the user's subscription type.  
            - `explicit` - The content item is explicit and the user's account is set to not play explicit content.  
              Additional reasons may be added in the future. **Note**: If you use this field, make sure that your application safely handles unknown values.
          type: string
      type: object
    EpisodesObject:
      properties:
        episodes:
          description: ''
          items:
            $ref: '#/components/schemas/EpisodeObject'
          type: array
      type: object
    ErrorObject:
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/#object-errorobject
      properties:
        message:
          description: A short description of the cause of the error.
          type: string
        status:
          description: The HTTP status code (also returned in the response header; see [Response Status Codes](https://developer.spotify.com/documentation/web-api/#response-status-codes) for more information).
          format: int32
          type: integer
      type: object
    ErrorResponseObject:
      properties:
        error:
          $ref: '#/components/schemas/ErrorObject'
      type: object
    ExplicitContentSettingsObject:
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/#object-explicitcontentsettingsobject
      properties:
        filter_enabled:
          description: When `true`, indicates that explicit content should not be played.
          type: boolean
        filter_locked:
          description: When `true`, indicates that the explicit content setting is locked and can't be changed by the user.
          type: boolean
      type: object
    ExternalIdObject:
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/#object-externalidobject
      properties:
        ean:
          description: '[International Article Number](http://en.wikipedia.org/wiki/International_Article_Number_%28EAN%29)'
          type: string
        isrc:
          description: '[International Standard Recording Code](http://en.wikipedia.org/wiki/International_Standard_Recording_Code)'
          type: string
        upc:
          description: '[Universal Product Code](http://en.wikipedia.org/wiki/Universal_Product_Code)'
          type: string
      type: object
    ExternalUrlObject:
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/#object-externalurlobject
      properties:
        spotify:
          description: The [Spotify URL](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for the object.
          type: string
      type: object
    FeaturedPlaylistObject:
      properties:
        message:
          description: ''
          type: string
        playlists:
          description: ''
          externalDocs:
            description: Find more info on the official Spotify Web API Reference
            url: https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject
          properties:
            href:
              description: A link to the Web API endpoint returning the full result of the request
              type: string
            items:
              description: The requested data.
              items:
                $ref: '#/components/schemas/SimplifiedPlaylistObject'
              type: array
            limit:
              description: The maximum number of items in the response (as set in the query or by default).
              format: int32
              type: integer
            next:
              description: URL to the next page of items. ( `null` if none)
              type: string
            offset:
              description: The offset of the items returned (as set in the query or by default)
              format: int32
              type: integer
            previous:
              description: URL to the previous page of items. ( `null` if none)
              type: string
            total:
              description: The total number of items available to return.
              format: int32
              type: integer
          type: object
      type: object
    FollowersObject:
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/#object-followersobject
      properties:
        href:
          description: A link to the Web API endpoint providing full details of the followers; `null` if not available. Please note that this will always be set to null, as the Web API does not support it at the moment.
          type: string
        total:
          description: The total number of followers.
          format: int32
          type: integer
      type: object
    FollowingArtistsObject:
      properties:
        artists:
          description: ''
          externalDocs:
            description: Find more info on the official Spotify Web API Reference
            url: https://developer.spotify.com/documentation/web-api/reference/#object-cursorpagingobject
          properties:
            cursors:
              $ref: '#/components/schemas/CursorObject'
            href:
              description: A link to the Web API endpoint returning the full result of the request.
              type: string
            items:
              description: The requested data.
              items:
                $ref: '#/components/schemas/ArtistObject'
              type: array
            limit:
              description: The maximum number of items in the response (as set in the query or by default).
              format: int32
              type: integer
            next:
              description: URL to the next page of items. ( `null` if none)
              type: string
            total:
              description: The total number of items available to return.
              format: int32
              type: integer
          type: object
      type: object
    GenreSeedsObject:
      properties:
        genres:
          description: ''
          items:
            type: string
          type: array
      type: object
    ImageObject:
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/#object-imageobject
      properties:
        height:
          description: The image height in pixels.
          format: int32
          type: integer
        url:
          description: The source URL of the image.
          type: string
        width:
          description: The image width in pixels.
          format: int32
          type: integer
      type: object
    LinkedTrackObject:
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/#object-linkedtrackobject
      properties:
        external_urls:
          $ref: '#/components/schemas/ExternalUrlObject'
        href:
          description: A link to the Web API endpoint providing full details of the track.
          type: string
        id:
          description: The [Spotify ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for the track.
          type: string
        type:
          description: 'The object type: "track".'
          type: string
        uri:
          description: The [Spotify URI](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for the track.
          type: string
      type: object
    MarketsObject:
      properties:
        markets:
          description: ''
          items:
            type: string
          type: array
      type: object
    NewReleasesObject:
      properties:
        albums:
          description: ''
          externalDocs:
            description: Find more info on the official Spotify Web API Reference
            url: https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject
          properties:
            href:
              description: A link to the Web API endpoint returning the full result of the request
              type: string
            items:
              description: The requested data.
              items:
                $ref: '#/components/schemas/SimplifiedAlbumObject'
              type: array
            limit:
              description: The maximum number of items in the response (as set in the query or by default).
              format: int32
              type: integer
            next:
              description: URL to the next page of items. ( `null` if none)
              type: string
            offset:
              description: The offset of the items returned (as set in the query or by default)
              format: int32
              type: integer
            previous:
              description: URL to the previous page of items. ( `null` if none)
              type: string
            total:
              description: The total number of items available to return.
              format: int32
              type: integer
          type: object
      type: object
    PagingObject:
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject
      properties:
        href:
          description: A link to the Web API endpoint returning the full result of the request
          type: string
        items:
          description: The requested data.
          items:
            type: object
          type: array
        limit:
          description: The maximum number of items in the response (as set in the query or by default).
          format: int32
          type: integer
        next:
          description: URL to the next page of items. ( `null` if none)
          type: string
        offset:
          description: The offset of the items returned (as set in the query or by default)
          format: int32
          type: integer
        previous:
          description: URL to the previous page of items. ( `null` if none)
          type: string
        total:
          description: The total number of items available to return.
          format: int32
          type: integer
      type: object
    PlayHistoryObject:
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/#object-playhistoryobject
      properties:
        context:
          $ref: '#/components/schemas/ContextObject'
        played_at:
          description: The date and time the track was played.
          format: date-time
          type: string
        track:
          $ref: '#/components/schemas/SimplifiedTrackObject'
      type: object
    PlayerErrorObject:
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/#object-playererrorobject
      properties:
        message:
          description: A short description of the cause of the error.
          type: string
        reason:
          description: |-
            - `NO_PREV_TRACK` - The command requires a previous track, but there is none in the context.
            - `NO_NEXT_TRACK` - The command requires a next track, but there is none in the context.
            - `NO_SPECIFIC_TRACK` - The requested track does not exist.
            - `ALREADY_PAUSED` - The command requires playback to not be paused.
            - `NOT_PAUSED` - The command requires playback to be paused.
            - `NOT_PLAYING_LOCALLY` - The command requires playback on the local device.
            - `NOT_PLAYING_TRACK` - The command requires that a track is currently playing.
            - `NOT_PLAYING_CONTEXT` - The command requires that a context is currently playing.
            - `ENDLESS_CONTEXT` - The shuffle command cannot be applied on an endless context.
            - `CONTEXT_DISALLOW` - The command could not be performed on the context.
            - `ALREADY_PLAYING` - The track should not be restarted if the same track and context is already playing, and there is a resume point.
            - `RATE_LIMITED` - The user is rate limited due to too frequent track play, also known as cat-on-the-keyboard spamming.
            - `REMOTE_CONTROL_DISALLOW` - The context cannot be remote-controlled.
            - `DEVICE_NOT_CONTROLLABLE` - Not possible to remote control the device.
            - `VOLUME_CONTROL_DISALLOW` - Not possible to remote control the device's volume.
            - `NO_ACTIVE_DEVICE` - Requires an active device and the user has none.
            - `PREMIUM_REQUIRED` - The request is prohibited for non-premium users.
            - `UNKNOWN` - Certain actions are restricted because of unknown reasons.
          type: string
        status:
          description: The HTTP status code. Either `404 NOT FOUND` or `403 FORBIDDEN`. Also returned in the response header.
          format: int32
          type: integer
      type: object
    PlaylistObject:
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/#object-playlistobject
      properties:
        collaborative:
          description: '`true` if the owner allows other users to modify the playlist.'
          type: boolean
        description:
          description: The playlist description. *Only returned for modified, verified playlists, otherwise* `null`.
          type: string
        external_urls:
          $ref: '#/components/schemas/ExternalUrlObject'
        followers:
          $ref: '#/components/schemas/FollowersObject'
        href:
          description: A link to the Web API endpoint providing full details of the playlist.
          type: string
        id:
          description: The [Spotify ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for the playlist.
          type: string
        images:
          description: 'Images for the playlist. The array may be empty or contain up to three images. The images are returned by size in descending order. See [Working with Playlists](https://developer.spotify.com/documentation/general/guides/working-with-playlists/). *Note: If returned, the source URL for the image (`url`) is temporary and will expire in less than a day.*'
          items:
            $ref: '#/components/schemas/ImageObject'
          type: array
        name:
          description: The name of the playlist.
          type: string
        owner:
          $ref: '#/components/schemas/PublicUserObject'
        public:
          description: 'The playlist''s public/private status: `true` the playlist is public, `false` the playlist is private, `null` the playlist status is not relevant. For more about public/private status, see [Working with Playlists](https://developer.spotify.com/documentation/general/guides/working-with-playlists/)'
          type: boolean
        snapshot_id:
          description: The version identifier for the current playlist. Can be supplied in other requests to target a specific playlist version
          type: string
        tracks:
          description: Information about the tracks of the playlist. Note, a track object may be `null`. This can happen if a track is no longer available.
          externalDocs:
            description: Find more info on the official Spotify Web API Reference
            url: https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject
          properties:
            href:
              description: A link to the Web API endpoint returning the full result of the request
              type: string
            items:
              description: The requested data.
              items:
                $ref: '#/components/schemas/PlaylistTrackObject'
              type: array
            limit:
              description: The maximum number of items in the response (as set in the query or by default).
              format: int32
              type: integer
            next:
              description: URL to the next page of items. ( `null` if none)
              type: string
            offset:
              description: The offset of the items returned (as set in the query or by default)
              format: int32
              type: integer
            previous:
              description: URL to the previous page of items. ( `null` if none)
              type: string
            total:
              description: The total number of items available to return.
              format: int32
              type: integer
          type: object
        type:
          description: 'The object type: "playlist"'
          type: string
        uri:
          description: The [Spotify URI](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for the playlist.
          type: string
      type: object
    PlaylistPagingObject:
      properties:
        playlists:
          description: ''
          externalDocs:
            description: Find more info on the official Spotify Web API Reference
            url: https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject
          properties:
            href:
              description: A link to the Web API endpoint returning the full result of the request
              type: string
            items:
              description: The requested data.
              items:
                $ref: '#/components/schemas/SimplifiedPlaylistObject'
              type: array
            limit:
              description: The maximum number of items in the response (as set in the query or by default).
              format: int32
              type: integer
            next:
              description: URL to the next page of items. ( `null` if none)
              type: string
            offset:
              description: The offset of the items returned (as set in the query or by default)
              format: int32
              type: integer
            previous:
              description: URL to the previous page of items. ( `null` if none)
              type: string
            total:
              description: The total number of items available to return.
              format: int32
              type: integer
          type: object
      type: object
    PlaylistTrackObject:
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/#object-playlisttrackobject
      properties:
        added_at:
          description: The date and time the track or episode was added. *Note that some very old playlists may return `null` in this field.*
          format: date-time
          type: string
        added_by:
          $ref: '#/components/schemas/PublicUserObject'
        is_local:
          description: Whether this track or episode is a [local file](https://developer.spotify.com/web-api/local-files-spotify-playlists/) or not.
          type: boolean
        track:
          description: Information about the track or episode.
          oneOf:
            - $ref: '#/components/schemas/TrackObject'
            - $ref: '#/components/schemas/EpisodeObject'
      type: object
    PlaylistTracksRefObject:
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/#object-playlisttracksrefobject
      properties:
        href:
          description: A link to the Web API endpoint where full details of the playlist's tracks can be retrieved.
          type: string
        total:
          description: Number of tracks in the playlist.
          format: int32
          type: integer
      type: object
    PrivateUserObject:
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/#object-privateuserobject
      properties:
        country:
          description: The country of the user, as set in the user's account profile. An [ISO 3166-1 alpha-2 country code](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). *This field is only available when the current user has granted access to the [user-read-private](https://developer.spotify.com/documentation/general/guides/authorization-guide/#list-of-scopes) scope.*
          type: string
        display_name:
          description: The name displayed on the user's profile. `null` if not available.
          type: string
        email:
          description: The user's email address, as entered by the user when creating their account. ***Important!** This email address is unverified; there is no proof that it actually belongs to the user.* *This field is only available when the current user has granted access to the [user-read-email](https://developer.spotify.com/documentation/general/guides/authorization-guide/#list-of-scopes) scope.*
          type: string
        explicit_content:
          $ref: '#/components/schemas/ExplicitContentSettingsObject'
        external_urls:
          $ref: '#/components/schemas/ExternalUrlObject'
        followers:
          $ref: '#/components/schemas/FollowersObject'
        href:
          description: A link to the Web API endpoint for this user.
          type: string
        id:
          description: The [Spotify user ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for the user.
          type: string
        images:
          description: The user's profile image.
          items:
            $ref: '#/components/schemas/ImageObject'
          type: array
        product:
          description: 'The user''s Spotify subscription level: "premium", "free", etc. (The subscription level "open" can be considered the same as "free".) *This field is only available when the current user has granted access to the [user-read-private](https://developer.spotify.com/documentation/general/guides/authorization-guide/#list-of-scopes) scope.*'
          type: string
        type:
          description: 'The object type: "user"'
          type: string
        uri:
          description: The [Spotify URI](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for the user.
          type: string
      type: object
    PublicUserObject:
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/#object-publicuserobject
      properties:
        display_name:
          description: The name displayed on the user's profile. `null` if not available.
          type: string
        external_urls:
          $ref: '#/components/schemas/ExternalUrlObject'
        followers:
          $ref: '#/components/schemas/FollowersObject'
        href:
          description: A link to the Web API endpoint for this user.
          type: string
        id:
          description: The [Spotify user ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for this user.
          type: string
        images:
          description: The user's profile image.
          items:
            $ref: '#/components/schemas/ImageObject'
          type: array
        type:
          description: The object type.
          type: string
        uri:
          description: The [Spotify URI](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for this user.
          type: string
      type: object
    RecommendationSeedObject:
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/#object-recommendationseedobject
      properties:
        afterFilteringSize:
          description: The number of tracks available after min_\* and max_\* filters have been applied.
          format: int32
          type: integer
        afterRelinkingSize:
          description: The number of tracks available after relinking for regional availability.
          format: int32
          type: integer
        href:
          description: A link to the full track or artist data for this seed. For tracks this will be a link to a [Track Object](https://developer.spotify.com/documentation/web-api/reference/#object-trackobject). For artists a link to [an Artist Object](https://developer.spotify.com/documentation/web-api/reference/#object-artistobject). For genre seeds, this value will be `null`.
          type: string
        id:
          description: The id used to select this seed. This will be the same as the string used in the `seed_artists`, `seed_tracks` or `seed_genres` parameter.
          type: string
        initialPoolSize:
          description: The number of recommended tracks available for this seed.
          format: int32
          type: integer
        type:
          description: The entity type of this seed. One of `artist`, `track` or `genre`.
          type: string
      type: object
    RecommendationsObject:
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/#object-recommendationsobject
      properties:
        seeds:
          description: An array of [recommendation seed objects](https://developer.spotify.com/documentation/web-api/reference/#object-recommendationseedobject).
          items:
            $ref: '#/components/schemas/RecommendationSeedObject'
          type: array
        tracks:
          description: An array of [track object](https://developer.spotify.com/documentation/web-api/reference/#object-trackobject) ordered according to the parameters supplied.
          items:
            $ref: '#/components/schemas/TrackObject'
          type: array
      type: object
    ResumePointObject:
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/#object-resumepointobject
      properties:
        fully_played:
          description: Whether or not the episode has been fully played by the user.
          type: boolean
        resume_position_ms:
          description: The user's most recent position in the episode in milliseconds.
          format: int32
          type: integer
      type: object
    SavedAlbumObject:
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/#object-savedalbumobject
      properties:
        added_at:
          description: 'The date and time the album was saved Timestamps are returned in ISO 8601 format as Coordinated Universal Time (UTC) with a zero offset: YYYY-MM-DDTHH:MM:SSZ. If the time is imprecise (for example, the date/time of an album release), an additional field indicates the precision; see for example, release_date in an album object.'
          format: date-time
          type: string
        album:
          $ref: '#/components/schemas/AlbumObject'
      type: object
    SavedEpisodeObject:
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/#object-savedepisodeobject
      properties:
        added_at:
          description: 'The date and time the episode was saved. Timestamps are returned in ISO 8601 format as Coordinated Universal Time (UTC) with a zero offset: YYYY-MM-DDTHH:MM:SSZ.'
          format: date-time
          type: string
        episode:
          $ref: '#/components/schemas/EpisodeObject'
      type: object
    SavedShowObject:
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/#object-savedshowobject
      properties:
        added_at:
          description: 'The date and time the show was saved. Timestamps are returned in ISO 8601 format as Coordinated Universal Time (UTC) with a zero offset: YYYY-MM-DDTHH:MM:SSZ. If the time is imprecise (for example, the date/time of an album release), an additional field indicates the precision; see for example, release_date in an album object.'
          format: date-time
          type: string
        show:
          $ref: '#/components/schemas/SimplifiedShowObject'
      type: object
    SavedTrackObject:
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/#object-savedtrackobject
      properties:
        added_at:
          description: 'The date and time the track was saved. Timestamps are returned in ISO 8601 format as Coordinated Universal Time (UTC) with a zero offset: YYYY-MM-DDTHH:MM:SSZ. If the time is imprecise (for example, the date/time of an album release), an additional field indicates the precision; see for example, release_date in an album object.'
          format: date-time
          type: string
        track:
          $ref: '#/components/schemas/TrackObject'
      type: object
    SearchResponseObject:
      properties:
        albums:
          description: ''
          externalDocs:
            description: Find more info on the official Spotify Web API Reference
            url: https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject
          properties:
            href:
              description: A link to the Web API endpoint returning the full result of the request
              type: string
            items:
              description: The requested data.
              items:
                $ref: '#/components/schemas/SimplifiedAlbumObject'
              type: array
            limit:
              description: The maximum number of items in the response (as set in the query or by default).
              format: int32
              type: integer
            next:
              description: URL to the next page of items. ( `null` if none)
              type: string
            offset:
              description: The offset of the items returned (as set in the query or by default)
              format: int32
              type: integer
            previous:
              description: URL to the previous page of items. ( `null` if none)
              type: string
            total:
              description: The total number of items available to return.
              format: int32
              type: integer
          type: object
        artists:
          description: ''
          externalDocs:
            description: Find more info on the official Spotify Web API Reference
            url: https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject
          properties:
            href:
              description: A link to the Web API endpoint returning the full result of the request
              type: string
            items:
              description: The requested data.
              items:
                $ref: '#/components/schemas/ArtistObject'
              type: array
            limit:
              description: The maximum number of items in the response (as set in the query or by default).
              format: int32
              type: integer
            next:
              description: URL to the next page of items. ( `null` if none)
              type: string
            offset:
              description: The offset of the items returned (as set in the query or by default)
              format: int32
              type: integer
            previous:
              description: URL to the previous page of items. ( `null` if none)
              type: string
            total:
              description: The total number of items available to return.
              format: int32
              type: integer
          type: object
        episodes:
          description: ''
          externalDocs:
            description: Find more info on the official Spotify Web API Reference
            url: https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject
          properties:
            href:
              description: A link to the Web API endpoint returning the full result of the request
              type: string
            items:
              description: The requested data.
              items:
                $ref: '#/components/schemas/SimplifiedEpisodeObject'
              type: array
            limit:
              description: The maximum number of items in the response (as set in the query or by default).
              format: int32
              type: integer
            next:
              description: URL to the next page of items. ( `null` if none)
              type: string
            offset:
              description: The offset of the items returned (as set in the query or by default)
              format: int32
              type: integer
            previous:
              description: URL to the previous page of items. ( `null` if none)
              type: string
            total:
              description: The total number of items available to return.
              format: int32
              type: integer
          type: object
        playlists:
          description: ''
          externalDocs:
            description: Find more info on the official Spotify Web API Reference
            url: https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject
          properties:
            href:
              description: A link to the Web API endpoint returning the full result of the request
              type: string
            items:
              description: The requested data.
              items:
                $ref: '#/components/schemas/SimplifiedPlaylistObject'
              type: array
            limit:
              description: The maximum number of items in the response (as set in the query or by default).
              format: int32
              type: integer
            next:
              description: URL to the next page of items. ( `null` if none)
              type: string
            offset:
              description: The offset of the items returned (as set in the query or by default)
              format: int32
              type: integer
            previous:
              description: URL to the previous page of items. ( `null` if none)
              type: string
            total:
              description: The total number of items available to return.
              format: int32
              type: integer
          type: object
        shows:
          description: ''
          externalDocs:
            description: Find more info on the official Spotify Web API Reference
            url: https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject
          properties:
            href:
              description: A link to the Web API endpoint returning the full result of the request
              type: string
            items:
              description: The requested data.
              items:
                $ref: '#/components/schemas/SimplifiedShowObject'
              type: array
            limit:
              description: The maximum number of items in the response (as set in the query or by default).
              format: int32
              type: integer
            next:
              description: URL to the next page of items. ( `null` if none)
              type: string
            offset:
              description: The offset of the items returned (as set in the query or by default)
              format: int32
              type: integer
            previous:
              description: URL to the previous page of items. ( `null` if none)
              type: string
            total:
              description: The total number of items available to return.
              format: int32
              type: integer
          type: object
        tracks:
          description: ''
          externalDocs:
            description: Find more info on the official Spotify Web API Reference
            url: https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject
          properties:
            href:
              description: A link to the Web API endpoint returning the full result of the request
              type: string
            items:
              description: The requested data.
              items:
                $ref: '#/components/schemas/TrackObject'
              type: array
            limit:
              description: The maximum number of items in the response (as set in the query or by default).
              format: int32
              type: integer
            next:
              description: URL to the next page of items. ( `null` if none)
              type: string
            offset:
              description: The offset of the items returned (as set in the query or by default)
              format: int32
              type: integer
            previous:
              description: URL to the previous page of items. ( `null` if none)
              type: string
            total:
              description: The total number of items available to return.
              format: int32
              type: integer
          type: object
      type: object
    SectionObject:
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/tracks/get-audio-analysis/#section-object
      properties:
        confidence:
          description: The confidence, from 0.0 to 1.0, of the reliability of the section’s "designation".
          type: number
        duration:
          description: The duration (in seconds) of the section.
          type: number
        key:
          description: ''
          format: int32
          type: integer
        key_confidence:
          description: ''
          type: number
        loudness:
          description: The overall loudness of the section in decibels (dB). Loudness values are useful for comparing relative loudness of sections within tracks.
          type: number
        mode:
          description: ''
          format: int32
          type: integer
        mode_confidence:
          description: ''
          type: number
        start:
          description: The starting point (in seconds) of the section.
          type: number
        tempo:
          description: The overall estimated tempo of the section in beats per minute (BPM). In musical terminology, tempo is the speed or pace of a given piece and derives directly from the average beat duration.
          type: number
        tempo_confidence:
          description: ''
          type: number
        time_signature:
          description: ''
          format: int32
          type: integer
        time_signature_confidence:
          description: ''
          type: number
      type: object
    SegmentObject:
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/tracks/get-audio-analysis/#segment-object
      properties:
        confidence:
          description: ''
          type: number
        duration:
          description: ''
          type: number
        loudness_end:
          description: ''
          type: number
        loudness_max:
          description: ''
          type: number
        loudness_max_time:
          description: ''
          type: number
        loudness_start:
          description: ''
          type: number
        pitches:
          description: ''
          items:
            type: number
          type: array
        start:
          description: ''
          type: number
        timbre:
          description: ''
          items:
            type: number
          type: array
      type: object
    ShowObject:
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/#object-showobject
      properties:
        available_markets:
          description: A list of the countries in which the show can be played, identified by their [ISO 3166-1 alpha-2](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) code.
          items:
            type: string
          type: array
        copyrights:
          description: The copyright statements of the show.
          items:
            $ref: '#/components/schemas/CopyrightObject'
          type: array
        description:
          description: A description of the show. HTML tags are stripped away from this field, use `html_description` field in case HTML tags are needed.
          type: string
        episodes:
          description: A list of the show's episodes.
          externalDocs:
            description: Find more info on the official Spotify Web API Reference
            url: https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject
          properties:
            href:
              description: A link to the Web API endpoint returning the full result of the request
              type: string
            items:
              description: The requested data.
              items:
                $ref: '#/components/schemas/SimplifiedEpisodeObject'
              type: array
            limit:
              description: The maximum number of items in the response (as set in the query or by default).
              format: int32
              type: integer
            next:
              description: URL to the next page of items. ( `null` if none)
              type: string
            offset:
              description: The offset of the items returned (as set in the query or by default)
              format: int32
              type: integer
            previous:
              description: URL to the previous page of items. ( `null` if none)
              type: string
            total:
              description: The total number of items available to return.
              format: int32
              type: integer
          type: object
        explicit:
          description: Whether or not the show has explicit content (true = yes it does; false = no it does not OR unknown).
          type: boolean
        external_urls:
          $ref: '#/components/schemas/ExternalUrlObject'
        href:
          description: A link to the Web API endpoint providing full details of the show.
          type: string
        html_description:
          description: A description of the show. This field may contain HTML tags.
          type: string
        id:
          description: The [Spotify ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for the show.
          type: string
        images:
          description: The cover art for the show in various sizes, widest first.
          items:
            $ref: '#/components/schemas/ImageObject'
          type: array
        is_externally_hosted:
          description: True if all of the show's episodes are hosted outside of Spotify's CDN. This field might be `null` in some cases.
          type: boolean
        languages:
          description: A list of the languages used in the show, identified by their [ISO 639](https://en.wikipedia.org/wiki/ISO_639) code.
          items:
            type: string
          type: array
        media_type:
          description: The media type of the show.
          type: string
        name:
          description: The name of the episode.
          type: string
        publisher:
          description: The publisher of the show.
          type: string
        type:
          description: The object type.
          type: string
        uri:
          description: The [Spotify URI](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for the show.
          type: string
      type: object
    ShowsObject:
      properties:
        shows:
          description: ''
          items:
            $ref: '#/components/schemas/SimplifiedShowObject'
          type: array
      type: object
    SimplifiedAlbumObject:
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/#object-simplifiedalbumobject
      properties:
        album_group:
          description: The field is present when getting an artist's albums. Compare to album_type this field represents relationship between the artist and the album.
          type: string
        album_type:
          description: The type of the album.
          type: string
        artists:
          description: The artists of the album. Each artist object includes a link in `href` to more detailed information about the artist.
          items:
            $ref: '#/components/schemas/SimplifiedArtistObject'
          type: array
        available_markets:
          description: 'The markets in which the album is available: [ISO 3166-1 alpha-2 country codes](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). Note that an album is considered available in a market when at least 1 of its tracks is available in that market.'
          items:
            type: string
          type: array
        external_urls:
          $ref: '#/components/schemas/ExternalUrlObject'
        href:
          description: A link to the Web API endpoint providing full details of the album.
          type: string
        id:
          description: The [Spotify ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for the album.
          type: string
        images:
          description: The cover art for the album in various sizes, widest first.
          items:
            $ref: '#/components/schemas/ImageObject'
          type: array
        name:
          description: The name of the album. In case of an album takedown, the value may be an empty string.
          type: string
        release_date:
          description: The date the album was first released.
          type: string
        release_date_precision:
          description: The precision with which `release_date` value is known.
          type: string
        restrictions:
          $ref: '#/components/schemas/AlbumRestrictionObject'
        total_tracks:
          description: The number of tracks in the album.
          format: int32
          type: integer
        type:
          description: The object type.
          type: string
        uri:
          description: The [Spotify URI](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for the album.
          type: string
      type: object
    SimplifiedArtistObject:
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/#object-simplifiedartistobject
      properties:
        external_urls:
          $ref: '#/components/schemas/ExternalUrlObject'
        href:
          description: A link to the Web API endpoint providing full details of the artist.
          type: string
        id:
          description: The [Spotify ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for the artist.
          type: string
        name:
          description: The name of the artist.
          type: string
        type:
          description: The object type.
          type: string
        uri:
          description: The [Spotify URI](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for the artist.
          type: string
      type: object
    SimplifiedEpisodeObject:
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/#object-simplifiedepisodeobject
      properties:
        audio_preview_url:
          description: A URL to a 30 second preview (MP3 format) of the episode. `null` if not available.
          type: string
        description:
          description: A description of the episode. HTML tags are stripped away from this field, use `html_description` field in case HTML tags are needed.
          type: string
        duration_ms:
          description: The episode length in milliseconds.
          format: int32
          type: integer
        explicit:
          description: Whether or not the episode has explicit content (true = yes it does; false = no it does not OR unknown).
          type: boolean
        external_urls:
          $ref: '#/components/schemas/ExternalUrlObject'
        href:
          description: A link to the Web API endpoint providing full details of the episode.
          type: string
        html_description:
          description: A description of the episode. This field may contain HTML tags.
          type: string
        id:
          description: The [Spotify ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for the episode.
          type: string
        images:
          description: The cover art for the episode in various sizes, widest first.
          items:
            $ref: '#/components/schemas/ImageObject'
          type: array
        is_externally_hosted:
          description: True if the episode is hosted outside of Spotify's CDN.
          type: boolean
        is_playable:
          description: True if the episode is playable in the given market. Otherwise false.
          type: boolean
        language:
          description: '**Note: This field is deprecated and might be removed in the future. Please use the `languages` field instead.** The language used in the episode, identified by a [ISO 639](https://en.wikipedia.org/wiki/ISO_639) code.'
          type: string
        languages:
          description: A list of the languages used in the episode, identified by their [ISO 639](https://en.wikipedia.org/wiki/ISO_639) code.
          items:
            type: string
          type: array
        name:
          description: The name of the episode.
          type: string
        release_date:
          description: The date the episode was first released, for example `"1981-12-15"`. Depending on the precision, it might be shown as `"1981"` or `"1981-12"`.
          type: string
        release_date_precision:
          description: The precision with which `release_date` value is known.
          type: string
        restrictions:
          $ref: '#/components/schemas/EpisodeRestrictionObject'
        resume_point:
          $ref: '#/components/schemas/ResumePointObject'
        type:
          description: The object type.
          type: string
        uri:
          description: The [Spotify URI](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for the episode.
          type: string
      type: object
    SimplifiedPlaylistObject:
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/#object-simplifiedplaylistobject
      properties:
        collaborative:
          description: '`true` if the owner allows other users to modify the playlist.'
          type: boolean
        description:
          description: The playlist description. *Only returned for modified, verified playlists, otherwise* `null`.
          type: string
        external_urls:
          $ref: '#/components/schemas/ExternalUrlObject'
        href:
          description: A link to the Web API endpoint providing full details of the playlist.
          type: string
        id:
          description: The [Spotify ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for the playlist.
          type: string
        images:
          description: 'Images for the playlist. The array may be empty or contain up to three images. The images are returned by size in descending order. See [Working with Playlists](https://developer.spotify.com/documentation/general/guides/working-with-playlists/). *Note: If returned, the source URL for the image (`url`) is temporary and will expire in less than a day.*'
          items:
            $ref: '#/components/schemas/ImageObject'
          type: array
        name:
          description: The name of the playlist.
          type: string
        owner:
          $ref: '#/components/schemas/PublicUserObject'
        public:
          description: 'The playlist''s public/private status: `true` the playlist is public, `false` the playlist is private, `null` the playlist status is not relevant. For more about public/private status, see [Working with Playlists](https://developer.spotify.com/documentation/general/guides/working-with-playlists/)'
          type: boolean
        snapshot_id:
          description: The version identifier for the current playlist. Can be supplied in other requests to target a specific playlist version
          type: string
        tracks:
          $ref: '#/components/schemas/PlaylistTracksRefObject'
        type:
          description: 'The object type: "playlist"'
          type: string
        uri:
          description: The [Spotify URI](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for the playlist.
          type: string
      type: object
    SimplifiedShowObject:
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/#object-simplifiedshowobject
      properties:
        available_markets:
          description: A list of the countries in which the show can be played, identified by their [ISO 3166-1 alpha-2](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) code.
          items:
            type: string
          type: array
        copyrights:
          description: The copyright statements of the show.
          items:
            $ref: '#/components/schemas/CopyrightObject'
          type: array
        description:
          description: A description of the show. HTML tags are stripped away from this field, use `html_description` field in case HTML tags are needed.
          type: string
        explicit:
          description: Whether or not the show has explicit content (true = yes it does; false = no it does not OR unknown).
          type: boolean
        external_urls:
          $ref: '#/components/schemas/ExternalUrlObject'
        href:
          description: A link to the Web API endpoint providing full details of the show.
          type: string
        html_description:
          description: A description of the show. This field may contain HTML tags.
          type: string
        id:
          description: The [Spotify ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for the show.
          type: string
        images:
          description: The cover art for the show in various sizes, widest first.
          items:
            $ref: '#/components/schemas/ImageObject'
          type: array
        is_externally_hosted:
          description: True if all of the show's episodes are hosted outside of Spotify's CDN. This field might be `null` in some cases.
          type: boolean
        languages:
          description: A list of the languages used in the show, identified by their [ISO 639](https://en.wikipedia.org/wiki/ISO_639) code.
          items:
            type: string
          type: array
        media_type:
          description: The media type of the show.
          type: string
        name:
          description: The name of the episode.
          type: string
        publisher:
          description: The publisher of the show.
          type: string
        type:
          description: The object type.
          type: string
        uri:
          description: The [Spotify URI](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for the show.
          type: string
      type: object
    SimplifiedTrackObject:
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/#object-simplifiedtrackobject
      properties:
        artists:
          description: The artists who performed the track. Each artist object includes a link in `href` to more detailed information about the artist.
          items:
            $ref: '#/components/schemas/SimplifiedArtistObject'
          type: array
        available_markets:
          description: A list of the countries in which the track can be played, identified by their [ISO 3166-1 alpha-2](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) code.
          items:
            type: string
          type: array
        disc_number:
          description: The disc number (usually `1` unless the album consists of more than one disc).
          format: int32
          type: integer
        duration_ms:
          description: The track length in milliseconds.
          format: int32
          type: integer
        explicit:
          description: Whether or not the track has explicit lyrics ( `true` = yes it does; `false` = no it does not OR unknown).
          type: boolean
        external_urls:
          $ref: '#/components/schemas/ExternalUrlObject'
        href:
          description: A link to the Web API endpoint providing full details of the track.
          type: string
        id:
          description: The [Spotify ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for the track.
          type: string
        is_local:
          description: Whether or not the track is from a local file.
          type: boolean
        is_playable:
          description: Part of the response when [Track Relinking](https://developer.spotify.com/documentation/general/guides/track-relinking-guide/) is applied. If `true` , the track is playable in the given market. Otherwise `false`.
          type: boolean
        linked_from:
          $ref: '#/components/schemas/LinkedTrackObject'
        name:
          description: The name of the track.
          type: string
        preview_url:
          description: A URL to a 30 second preview (MP3 format) of the track.
          type: string
        restrictions:
          $ref: '#/components/schemas/TrackRestrictionObject'
        track_number:
          description: The number of the track. If an album has several discs, the track number is the number on the specified disc.
          format: int32
          type: integer
        type:
          description: 'The object type: "track".'
          type: string
        uri:
          description: The [Spotify URI](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for the track.
          type: string
      type: object
    SnapshotIdObject:
      properties:
        snapshot_id:
          description: The snapshot_id can be used to identify your playlist version in future requests.
          type: string
      type: object
    TimeIntervalObject:
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/tracks/get-audio-analysis/#time-interval-object
      properties:
        confidence:
          description: The confidence, from 0.0 to 1.0, of the reliability of the interval.
          type: number
        duration:
          description: The duration (in seconds) of the time interval.
          type: number
        start:
          description: The starting point (in seconds) of the time interval.
          type: number
      type: object
    TrackObject:
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/#object-trackobject
      properties:
        album:
          $ref: '#/components/schemas/SimplifiedAlbumObject'
        artists:
          description: The artists who performed the track. Each artist object includes a link in `href` to more detailed information about the artist.
          items:
            $ref: '#/components/schemas/ArtistObject'
          type: array
        available_markets:
          description: A list of the countries in which the track can be played, identified by their [ISO 3166-1 alpha-2](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) code.
          items:
            type: string
          type: array
        disc_number:
          description: The disc number (usually `1` unless the album consists of more than one disc).
          format: int32
          type: integer
        duration_ms:
          description: The track length in milliseconds.
          format: int32
          type: integer
        explicit:
          description: Whether or not the track has explicit lyrics ( `true` = yes it does; `false` = no it does not OR unknown).
          type: boolean
        external_ids:
          $ref: '#/components/schemas/ExternalIdObject'
        external_urls:
          $ref: '#/components/schemas/ExternalUrlObject'
        href:
          description: A link to the Web API endpoint providing full details of the track.
          type: string
        id:
          description: The [Spotify ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for the track.
          type: string
        is_local:
          description: Whether or not the track is from a local file.
          type: boolean
        is_playable:
          description: Part of the response when [Track Relinking](https://developer.spotify.com/documentation/general/guides/track-relinking-guide/) is applied. If `true` , the track is playable in the given market. Otherwise `false`.
          type: boolean
        linked_from:
          $ref: '#/components/schemas/LinkedTrackObject'
        name:
          description: The name of the track.
          type: string
        popularity:
          description: |-
            The popularity of the track. The value will be between 0 and 100, with 100 being the most popular.  
            The popularity of a track is a value between 0 and 100, with 100 being the most popular. The popularity is calculated by algorithm and is based, in the most part, on the total number of plays the track has had and how recent those plays are.  
            Generally speaking, songs that are being played a lot now will have a higher popularity than songs that were played a lot in the past. Duplicate tracks (e.g. the same track from a single and an album) are rated independently. Artist and album popularity is derived mathematically from track popularity. Note that the popularity value may lag actual popularity by a few days: the value is not updated in real time.
          format: int32
          type: integer
        preview_url:
          description: A link to a 30 second preview (MP3 format) of the track. Can be `null`
          type: string
        restrictions:
          $ref: '#/components/schemas/TrackRestrictionObject'
        track_number:
          description: The number of the track. If an album has several discs, the track number is the number on the specified disc.
          format: int32
          type: integer
        type:
          description: 'The object type: "track".'
          type: string
        uri:
          description: The [Spotify URI](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for the track.
          type: string
      type: object
    TrackRestrictionObject:
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/#object-trackrestrictionobject
      properties:
        reason:
          description: |-
            The reason for the restriction. Supported values:  

            - `market` - The content item is not available in the given market.  
            - `product` - The content item is not available for the user's subscription type.  
            - `explicit` - The content item is explicit and the user's account is set to not play explicit content.  
              Additional reasons may be added in the future. **Note**: If you use this field, make sure that your application safely handles unknown values.
          type: string
      type: object
    TracksObject:
      properties:
        tracks:
          description: ''
          items:
            $ref: '#/components/schemas/TrackObject'
          type: array
      type: object
    TuneableTrackObject:
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/#object-tuneabletrackobject
      properties:
        acousticness:
          description: A confidence measure from 0.0 to 1.0 of whether the track is acoustic. 1.0 represents high confidence the track is acoustic.
          type: number
        danceability:
          description: Danceability describes how suitable a track is for dancing based on a combination of musical elements including tempo, rhythm stability, beat strength, and overall regularity. A value of 0.0 is least danceable and 1.0 is most danceable.
          type: number
        duration_ms:
          description: The duration of the track in milliseconds.
          format: int32
          type: integer
        energy:
          description: Energy is a measure from 0.0 to 1.0 and represents a perceptual measure of intensity and activity. Typically, energetic tracks feel fast, loud, and noisy. For example, death metal has high energy, while a Bach prelude scores low on the scale. Perceptual features contributing to this attribute include dynamic range, perceived loudness, timbre, onset rate, and general entropy.
          type: number
        instrumentalness:
          description: Predicts whether a track contains no vocals. "Ooh" and "aah" sounds are treated as instrumental in this context. Rap or spoken word tracks are clearly "vocal". The closer the instrumentalness value is to 1.0, the greater likelihood the track contains no vocal content. Values above 0.5 are intended to represent instrumental tracks, but confidence is higher as the value approaches 1.0.
          type: number
        key:
          description: The key the track is in. Integers map to pitches using standard [Pitch Class notation](https://en.wikipedia.org/wiki/Pitch_class). E.g. 0 = C, 1 = C♯/D♭, 2 = D, and so on.
          format: int32
          type: integer
        liveness:
          description: Detects the presence of an audience in the recording. Higher liveness values represent an increased probability that the track was performed live. A value above 0.8 provides strong likelihood that the track is live.
          type: number
        loudness:
          description: The overall loudness of a track in decibels (dB). Loudness values are averaged across the entire track and are useful for comparing relative loudness of tracks. Loudness is the quality of a sound that is the primary psychological correlate of physical strength (amplitude). Values typical range between -60 and 0 db.
          type: number
        mode:
          description: Mode indicates the modality (major or minor) of a track, the type of scale from which its melodic content is derived. Major is represented by 1 and minor is 0.
          format: int32
          type: integer
        popularity:
          description: 'The popularity of the track. The value will be between 0 and 100, with 100 being the most popular. The popularity is calculated by algorithm and is based, in the most part, on the total number of plays the track has had and how recent those plays are. *Note: When applying track relinking via the `market` parameter, it is expected to find relinked tracks with popularities that do not match `min_*`, `max_*`and `target_*` popularities. These relinked tracks are accurate replacements for unplayable tracks with the expected popularity scores. Original, non-relinked tracks are available via the `linked_from` attribute of the [relinked track response](https://developer.spotify.com/documentation/general/guides/track-relinking-guide).*'
          type: number
        speechiness:
          description: Speechiness detects the presence of spoken words in a track. The more exclusively speech-like the recording (e.g. talk show, audio book, poetry), the closer to 1.0 the attribute value. Values above 0.66 describe tracks that are probably made entirely of spoken words. Values between 0.33 and 0.66 describe tracks that may contain both music and speech, either in sections or layered, including such cases as rap music. Values below 0.33 most likely represent music and other non-speech-like tracks.
          type: number
        tempo:
          description: The overall estimated tempo of a track in beats per minute (BPM). In musical terminology, tempo is the speed or pace of a given piece and derives directly from the average beat duration.
          type: number
        time_signature:
          description: An estimated overall time signature of a track. The time signature (meter) is a notational convention to specify how many beats are in each bar (or measure).
          format: int32
          type: integer
        valence:
          description: A measure from 0.0 to 1.0 describing the musical positiveness conveyed by a track. Tracks with high valence sound more positive (e.g. happy, cheerful, euphoric), while tracks with low valence sound more negative (e.g. sad, depressed, angry).
          type: number
      type: object
  securitySchemes:
    spotify_auth:
      flows:
        authorizationCode:
          authorizationUrl: https://accounts.spotify.com/authorize
          scopes:
            app-remote-control: Remote control playback of Spotify. This scope is currently available to Spotify iOS and Android SDKs.
            playlist-modify-private: Write access to a user's private playlists.
            playlist-modify-public: Write access to a user's public playlists.
            playlist-read-collaborative: Include collaborative playlists when requesting a user's playlists.
            playlist-read-private: Read access to user's private playlists.
            streaming: Control playback of a Spotify track. This scope is currently available to the Web Playback SDK. The user must have a Spotify Premium account.
            ugc-image-upload: Write access to user-provided images.
            user-follow-modify: Write/delete access to the list of artists and other users that the user follows.
            user-follow-read: Read access to the list of artists and other users that the user follows.
            user-library-modify: Write/delete access to a user's "Your Music" library.
            user-library-read: Read access to a user's library.
            user-modify-playback-state: Write access to a user’s playback state
            user-read-currently-playing: Read access to a user’s currently playing content.
            user-read-email: Read access to user’s email address.
            user-read-playback-position: Read access to a user’s playback position in a content.
            user-read-playback-state: Read access to a user’s player state.
            user-read-private: Read access to user’s subscription details (type of user account).
            user-read-recently-played: Read access to a user’s recently played tracks.
            user-top-read: Read access to a user's top artists and tracks.
          tokenUrl: https://accounts.spotify.com/api/token
      type: oauth2
